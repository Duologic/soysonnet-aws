// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'dlm',
  },
  aws_dlm_lifecycle_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'description', type: 'string' }, { default: null, enums: null, name: 'execution_role_arn', type: 'string' }, { default: null, enums: null, name: 'policy_details', type: 'object' }], help: '' } },
      new(tf_resource_key, description, execution_role_arn, policy_details):
        {
          local this = self,
          resource: {
            aws_dlm_lifecycle_policy: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withDescription(description)
        + self.withExecutionRoleArn(execution_role_arn)
        + self.withPolicyDetails(policy_details),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExecutionRoleArn(value): {
        spec+: {
          execution_role_arn: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withPolicyDetails': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPolicyDetails(value): {
        spec+: {
          policy_details: value,
        },
      },
      '#withPolicyDetailsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPolicyDetailsMixin(value): {
        spec+: {
          policy_details+: value,
        },
      },
      policy_details+:
        {
          '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAction(value): {
            spec+: {
              policy_details+: {
                action: value,
              },
            },
          },
          '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withActionMixin(value): {
            spec+: {
              policy_details+: {
                action+: value,
              },
            },
          },
          action+:
            {
              '#withCrossRegionCopy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrossRegionCopy(value): {
                spec+: {
                  policy_details+: {
                    action+: {
                      cross_region_copy:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              '#withCrossRegionCopyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrossRegionCopyMixin(value): {
                spec+: {
                  policy_details+: {
                    action+: {
                      cross_region_copy+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              cross_region_copy+:
                {
                  '#': { help: '', name: 'cross_region_copy' },
                  '#withEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withEncryptionConfiguration(value): {
                    encryption_configuration: value,
                  },
                  '#withEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withEncryptionConfigurationMixin(value): {
                    encryption_configuration+: value,
                  },
                  encryption_configuration+:
                    {
                      '#withCmkArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withCmkArn(value): {
                        encryption_configuration+: {
                          cmk_arn: value,
                        },
                      },
                      '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withEncrypted(value=true): {
                        encryption_configuration+: {
                          encrypted: value,
                        },
                      },
                    },
                  '#withRetainRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRetainRule(value): {
                    retain_rule: value,
                  },
                  '#withRetainRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRetainRuleMixin(value): {
                    retain_rule+: value,
                  },
                  retain_rule+:
                    {
                      '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withInterval(value): {
                        retain_rule+: {
                          interval: value,
                        },
                      },
                      '#withIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withIntervalUnit(value): {
                        retain_rule+: {
                          interval_unit: value,
                        },
                      },
                    },
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTarget(value): {
                    target: value,
                  },
                },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                spec+: {
                  policy_details+: {
                    action+: {
                      name: value,
                    },
                  },
                },
              },
            },
          '#withEventSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEventSource(value): {
            spec+: {
              policy_details+: {
                event_source: value,
              },
            },
          },
          '#withEventSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEventSourceMixin(value): {
            spec+: {
              policy_details+: {
                event_source+: value,
              },
            },
          },
          event_source+:
            {
              '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParameters(value): {
                spec+: {
                  policy_details+: {
                    event_source+: {
                      parameters: value,
                    },
                  },
                },
              },
              '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParametersMixin(value): {
                spec+: {
                  policy_details+: {
                    event_source+: {
                      parameters+: value,
                    },
                  },
                },
              },
              parameters+:
                {
                  '#withDescriptionRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDescriptionRegex(value): {
                    spec+: {
                      policy_details+: {
                        event_source+: {
                          parameters+: {
                            description_regex: value,
                          },
                        },
                      },
                    },
                  },
                  '#withEventType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withEventType(value): {
                    spec+: {
                      policy_details+: {
                        event_source+: {
                          parameters+: {
                            event_type: value,
                          },
                        },
                      },
                    },
                  },
                  '#withSnapshotOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSnapshotOwner(value): {
                    spec+: {
                      policy_details+: {
                        event_source+: {
                          parameters+: {
                            snapshot_owner:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      },
                    },
                  },
                  '#withSnapshotOwnerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSnapshotOwnerMixin(value): {
                    spec+: {
                      policy_details+: {
                        event_source+: {
                          parameters+: {
                            snapshot_owner+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      },
                    },
                  },
                },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                spec+: {
                  policy_details+: {
                    event_source+: {
                      type: value,
                    },
                  },
                },
              },
            },
          '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withParameters(value): {
            spec+: {
              policy_details+: {
                parameters: value,
              },
            },
          },
          '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withParametersMixin(value): {
            spec+: {
              policy_details+: {
                parameters+: value,
              },
            },
          },
          parameters+:
            {
              '#withExcludeBootVolume': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withExcludeBootVolume(value=true): {
                spec+: {
                  policy_details+: {
                    parameters+: {
                      exclude_boot_volume: value,
                    },
                  },
                },
              },
              '#withNoReboot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withNoReboot(value=true): {
                spec+: {
                  policy_details+: {
                    parameters+: {
                      no_reboot: value,
                    },
                  },
                },
              },
            },
          '#withPolicyType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPolicyType(value): {
            spec+: {
              policy_details+: {
                policy_type: value,
              },
            },
          },
          '#withResourceLocations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceLocations(value): {
            spec+: {
              policy_details+: {
                resource_locations:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceLocationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceLocationsMixin(value): {
            spec+: {
              policy_details+: {
                resource_locations+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTypes(value): {
            spec+: {
              policy_details+: {
                resource_types:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTypesMixin(value): {
            spec+: {
              policy_details+: {
                resource_types+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withSchedule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSchedule(value): {
            spec+: {
              policy_details+: {
                schedule:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withScheduleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withScheduleMixin(value): {
            spec+: {
              policy_details+: {
                schedule+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          schedule+:
            {
              '#': { help: '', name: 'schedule' },
              '#withCopyTags': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCopyTags(value=true): {
                copy_tags: value,
              },
              '#withCreateRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCreateRule(value): {
                create_rule: value,
              },
              '#withCreateRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCreateRuleMixin(value): {
                create_rule+: value,
              },
              create_rule+:
                {
                  '#withCronExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCronExpression(value): {
                    create_rule+: {
                      cron_expression: value,
                    },
                  },
                  '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withInterval(value): {
                    create_rule+: {
                      interval: value,
                    },
                  },
                  '#withIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withIntervalUnit(value): {
                    create_rule+: {
                      interval_unit: value,
                    },
                  },
                  '#withLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLocation(value): {
                    create_rule+: {
                      location: value,
                    },
                  },
                  '#withTimes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimes(value): {
                    create_rule+: {
                      times:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withTimesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimesMixin(value): {
                    create_rule+: {
                      times+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withCrossRegionCopyRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrossRegionCopyRule(value): {
                cross_region_copy_rule:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCrossRegionCopyRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrossRegionCopyRuleMixin(value): {
                cross_region_copy_rule+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              cross_region_copy_rule+:
                {
                  '#': { help: '', name: 'cross_region_copy_rule' },
                  '#withCmkArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCmkArn(value): {
                    cmk_arn: value,
                  },
                  '#withCopyTags': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withCopyTags(value=true): {
                    copy_tags: value,
                  },
                  '#withDeprecateRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDeprecateRule(value): {
                    deprecate_rule: value,
                  },
                  '#withDeprecateRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDeprecateRuleMixin(value): {
                    deprecate_rule+: value,
                  },
                  deprecate_rule+:
                    {
                      '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withInterval(value): {
                        deprecate_rule+: {
                          interval: value,
                        },
                      },
                      '#withIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withIntervalUnit(value): {
                        deprecate_rule+: {
                          interval_unit: value,
                        },
                      },
                    },
                  '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEncrypted(value=true): {
                    encrypted: value,
                  },
                  '#withRetainRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRetainRule(value): {
                    retain_rule: value,
                  },
                  '#withRetainRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRetainRuleMixin(value): {
                    retain_rule+: value,
                  },
                  retain_rule+:
                    {
                      '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withInterval(value): {
                        retain_rule+: {
                          interval: value,
                        },
                      },
                      '#withIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withIntervalUnit(value): {
                        retain_rule+: {
                          interval_unit: value,
                        },
                      },
                    },
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTarget(value): {
                    target: value,
                  },
                },
              '#withDeprecateRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDeprecateRule(value): {
                deprecate_rule: value,
              },
              '#withDeprecateRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDeprecateRuleMixin(value): {
                deprecate_rule+: value,
              },
              deprecate_rule+:
                {
                  '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withCount(value): {
                    deprecate_rule+: {
                      count: value,
                    },
                  },
                  '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withInterval(value): {
                    deprecate_rule+: {
                      interval: value,
                    },
                  },
                  '#withIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withIntervalUnit(value): {
                    deprecate_rule+: {
                      interval_unit: value,
                    },
                  },
                },
              '#withFastRestoreRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withFastRestoreRule(value): {
                fast_restore_rule: value,
              },
              '#withFastRestoreRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withFastRestoreRuleMixin(value): {
                fast_restore_rule+: value,
              },
              fast_restore_rule+:
                {
                  '#withAvailabilityZones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAvailabilityZones(value): {
                    fast_restore_rule+: {
                      availability_zones:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withAvailabilityZonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAvailabilityZonesMixin(value): {
                    fast_restore_rule+: {
                      availability_zones+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withCount(value): {
                    fast_restore_rule+: {
                      count: value,
                    },
                  },
                  '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withInterval(value): {
                    fast_restore_rule+: {
                      interval: value,
                    },
                  },
                  '#withIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withIntervalUnit(value): {
                    fast_restore_rule+: {
                      interval_unit: value,
                    },
                  },
                },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withRetainRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetainRule(value): {
                retain_rule: value,
              },
              '#withRetainRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetainRuleMixin(value): {
                retain_rule+: value,
              },
              retain_rule+:
                {
                  '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withCount(value): {
                    retain_rule+: {
                      count: value,
                    },
                  },
                  '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withInterval(value): {
                    retain_rule+: {
                      interval: value,
                    },
                  },
                  '#withIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withIntervalUnit(value): {
                    retain_rule+: {
                      interval_unit: value,
                    },
                  },
                },
              '#withShareRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withShareRule(value): {
                share_rule: value,
              },
              '#withShareRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withShareRuleMixin(value): {
                share_rule+: value,
              },
              share_rule+:
                {
                  '#withTargetAccounts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetAccounts(value): {
                    share_rule+: {
                      target_accounts:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withTargetAccountsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetAccountsMixin(value): {
                    share_rule+: {
                      target_accounts+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withUnshareInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withUnshareInterval(value): {
                    share_rule+: {
                      unshare_interval: value,
                    },
                  },
                  '#withUnshareIntervalUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnshareIntervalUnit(value): {
                    share_rule+: {
                      unshare_interval_unit: value,
                    },
                  },
                },
              '#withTagsToAdd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsToAdd(value): {
                tags_to_add: value,
              },
              '#withTagsToAddMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsToAddMixin(value): {
                tags_to_add+: value,
              },
              '#withVariableTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVariableTags(value): {
                variable_tags: value,
              },
              '#withVariableTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVariableTagsMixin(value): {
                variable_tags+: value,
              },
            },
          '#withTargetTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTargetTags(value): {
            spec+: {
              policy_details+: {
                target_tags: value,
              },
            },
          },
          '#withTargetTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTargetTagsMixin(value): {
            spec+: {
              policy_details+: {
                target_tags+: value,
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        spec+: {
          state: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        spec+: {
          tags_all: value,
        },
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        spec+: {
          tags_all+: value,
        },
      },
    },
}
