// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'securityhub',
  },
  aws_securityhub_account:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          resource: {
            aws_securityhub_account: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withAutoEnableControls': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoEnableControls(value=true): {
        spec+: {
          auto_enable_controls: value,
        },
      },
      '#withControlFindingGenerator': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withControlFindingGenerator(value): {
        spec+: {
          control_finding_generator: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEnableDefaultStandards': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableDefaultStandards(value=true): {
        spec+: {
          enable_default_standards: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_action_target:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'description', type: 'string' }, { default: null, enums: null, name: 'identifier', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, description, identifier, name):
        {
          local this = self,
          resource: {
            aws_securityhub_action_target: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withDescription(description)
        + self.withIdentifier(identifier)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIdentifier(value): {
        spec+: {
          identifier: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_automation_rule:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'description', type: 'string' }, { default: null, enums: null, name: 'rule_name', type: 'string' }, { default: null, enums: null, name: 'rule_order', type: 'number' }], help: '' } },
      new(tf_resource_key, description, rule_name, rule_order):
        {
          local this = self,
          resource: {
            aws_securityhub_automation_rule: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withDescription(description)
        + self.withRuleName(rule_name)
        + self.withRuleOrder(rule_order),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActions(value): {
        spec+: {
          actions:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActionsMixin(value): {
        spec+: {
          actions+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      actions+:
        {
          '#': { help: '', name: 'actions' },
          '#withFindingFieldsUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingFieldsUpdate(value): {
            finding_fields_update:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFindingFieldsUpdateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingFieldsUpdateMixin(value): {
            finding_fields_update+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          finding_fields_update+:
            {
              '#': { help: '', name: 'finding_fields_update' },
              '#withConfidence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withConfidence(value): {
                confidence: value,
              },
              '#withCriticality': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCriticality(value): {
                criticality: value,
              },
              '#withNote': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNote(value): {
                note:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withNoteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNoteMixin(value): {
                note+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              note+:
                {
                  '#': { help: '', name: 'note' },
                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withText(value): {
                    text: value,
                  },
                  '#withUpdatedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUpdatedBy(value): {
                    updated_by: value,
                  },
                },
              '#withRelatedFindings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRelatedFindings(value): {
                related_findings:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withRelatedFindingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRelatedFindingsMixin(value): {
                related_findings+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              related_findings+:
                {
                  '#': { help: '', name: 'related_findings' },
                  '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withId(value): {
                    id: value,
                  },
                  '#withProductArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProductArn(value): {
                    product_arn: value,
                  },
                },
              '#withSeverity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSeverity(value): {
                severity:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSeverityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSeverityMixin(value): {
                severity+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              severity+:
                {
                  '#': { help: '', name: 'severity' },
                  '#withLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLabel(value): {
                    label: value,
                  },
                  '#withProduct': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withProduct(value): {
                    product: value,
                  },
                },
              '#withTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTypes(value): {
                types:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTypesMixin(value): {
                types+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withUserDefinedFields': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withUserDefinedFields(value): {
                user_defined_fields: value,
              },
              '#withUserDefinedFieldsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withUserDefinedFieldsMixin(value): {
                user_defined_fields+: value,
              },
              '#withVerificationState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVerificationState(value): {
                verification_state: value,
              },
              '#withWorkflow': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withWorkflow(value): {
                workflow:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withWorkflowMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withWorkflowMixin(value): {
                workflow+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              workflow+:
                {
                  '#': { help: '', name: 'workflow' },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    status: value,
                  },
                },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCriteria': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCriteria(value): {
        spec+: {
          criteria:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCriteriaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCriteriaMixin(value): {
        spec+: {
          criteria+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      criteria+:
        {
          '#': { help: '', name: 'criteria' },
          '#withAwsAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAwsAccountId(value): {
            aws_account_id:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAwsAccountIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAwsAccountIdMixin(value): {
            aws_account_id+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          aws_account_id+:
            {
              '#': { help: '', name: 'aws_account_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withAwsAccountName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAwsAccountName(value): {
            aws_account_name:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAwsAccountNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAwsAccountNameMixin(value): {
            aws_account_name+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          aws_account_name+:
            {
              '#': { help: '', name: 'aws_account_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withCompanyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCompanyName(value): {
            company_name:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCompanyNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCompanyNameMixin(value): {
            company_name+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          company_name+:
            {
              '#': { help: '', name: 'company_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withComplianceAssociatedStandardsId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceAssociatedStandardsId(value): {
            compliance_associated_standards_id:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withComplianceAssociatedStandardsIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceAssociatedStandardsIdMixin(value): {
            compliance_associated_standards_id+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          compliance_associated_standards_id+:
            {
              '#': { help: '', name: 'compliance_associated_standards_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withComplianceSecurityControlId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceSecurityControlId(value): {
            compliance_security_control_id:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withComplianceSecurityControlIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceSecurityControlIdMixin(value): {
            compliance_security_control_id+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          compliance_security_control_id+:
            {
              '#': { help: '', name: 'compliance_security_control_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withComplianceStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceStatus(value): {
            compliance_status:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withComplianceStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceStatusMixin(value): {
            compliance_status+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          compliance_status+:
            {
              '#': { help: '', name: 'compliance_status' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withConfidence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfidence(value): {
            confidence:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConfidenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfidenceMixin(value): {
            confidence+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          confidence+:
            {
              '#': { help: '', name: 'confidence' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withGt(value): {
                gt: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLt(value): {
                lt: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCreatedAt(value): {
            created_at:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCreatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCreatedAtMixin(value): {
            created_at+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          created_at+:
            {
              '#': { help: '', name: 'created_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRange(value): {
                date_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              date_range+:
                {
                  '#': { help: '', name: 'date_range' },
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    unit: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withCriticality': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCriticality(value): {
            criticality:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCriticalityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCriticalityMixin(value): {
            criticality+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          criticality+:
            {
              '#': { help: '', name: 'criticality' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withGt(value): {
                gt: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLt(value): {
                lt: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDescription(value): {
            description:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDescriptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDescriptionMixin(value): {
            description+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          description+:
            {
              '#': { help: '', name: 'description' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withFirstObservedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFirstObservedAt(value): {
            first_observed_at:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFirstObservedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFirstObservedAtMixin(value): {
            first_observed_at+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          first_observed_at+:
            {
              '#': { help: '', name: 'first_observed_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRange(value): {
                date_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              date_range+:
                {
                  '#': { help: '', name: 'date_range' },
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    unit: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withGeneratorId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGeneratorId(value): {
            generator_id:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withGeneratorIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGeneratorIdMixin(value): {
            generator_id+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          generator_id+:
            {
              '#': { help: '', name: 'generator_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withId(value): {
            id:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIdMixin(value): {
            id+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          id+:
            {
              '#': { help: '', name: 'id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withLastObservedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLastObservedAt(value): {
            last_observed_at:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLastObservedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLastObservedAtMixin(value): {
            last_observed_at+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          last_observed_at+:
            {
              '#': { help: '', name: 'last_observed_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRange(value): {
                date_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              date_range+:
                {
                  '#': { help: '', name: 'date_range' },
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    unit: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withNoteText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteText(value): {
            note_text:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNoteTextMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteTextMixin(value): {
            note_text+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          note_text+:
            {
              '#': { help: '', name: 'note_text' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNoteUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedAt(value): {
            note_updated_at:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNoteUpdatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedAtMixin(value): {
            note_updated_at+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          note_updated_at+:
            {
              '#': { help: '', name: 'note_updated_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRange(value): {
                date_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              date_range+:
                {
                  '#': { help: '', name: 'date_range' },
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    unit: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withNoteUpdatedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedBy(value): {
            note_updated_by:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNoteUpdatedByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedByMixin(value): {
            note_updated_by+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          note_updated_by+:
            {
              '#': { help: '', name: 'note_updated_by' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withProductArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductArn(value): {
            product_arn:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withProductArnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductArnMixin(value): {
            product_arn+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          product_arn+:
            {
              '#': { help: '', name: 'product_arn' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withProductName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductName(value): {
            product_name:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withProductNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductNameMixin(value): {
            product_name+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          product_name+:
            {
              '#': { help: '', name: 'product_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withRecordState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecordState(value): {
            record_state:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRecordStateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecordStateMixin(value): {
            record_state+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          record_state+:
            {
              '#': { help: '', name: 'record_state' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withRelatedFindingsId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsId(value): {
            related_findings_id:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRelatedFindingsIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsIdMixin(value): {
            related_findings_id+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          related_findings_id+:
            {
              '#': { help: '', name: 'related_findings_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withRelatedFindingsProductArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsProductArn(value): {
            related_findings_product_arn:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRelatedFindingsProductArnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsProductArnMixin(value): {
            related_findings_product_arn+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          related_findings_product_arn+:
            {
              '#': { help: '', name: 'related_findings_product_arn' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceApplicationArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceApplicationArn(value): {
            resource_application_arn:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourceApplicationArnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceApplicationArnMixin(value): {
            resource_application_arn+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_application_arn+:
            {
              '#': { help: '', name: 'resource_application_arn' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceApplicationName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceApplicationName(value): {
            resource_application_name:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourceApplicationNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceApplicationNameMixin(value): {
            resource_application_name+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_application_name+:
            {
              '#': { help: '', name: 'resource_application_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceDetailsOther': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceDetailsOther(value): {
            resource_details_other:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourceDetailsOtherMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceDetailsOtherMixin(value): {
            resource_details_other+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_details_other+:
            {
              '#': { help: '', name: 'resource_details_other' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceId(value): {
            resource_id:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourceIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceIdMixin(value): {
            resource_id+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_id+:
            {
              '#': { help: '', name: 'resource_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourcePartition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourcePartition(value): {
            resource_partition:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourcePartitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourcePartitionMixin(value): {
            resource_partition+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_partition+:
            {
              '#': { help: '', name: 'resource_partition' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceRegion(value): {
            resource_region:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourceRegionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceRegionMixin(value): {
            resource_region+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_region+:
            {
              '#': { help: '', name: 'resource_region' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTags(value): {
            resource_tags:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourceTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTagsMixin(value): {
            resource_tags+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_tags+:
            {
              '#': { help: '', name: 'resource_tags' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceType(value): {
            resource_type:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withResourceTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTypeMixin(value): {
            resource_type+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          resource_type+:
            {
              '#': { help: '', name: 'resource_type' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withSeverityLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSeverityLabel(value): {
            severity_label:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSeverityLabelMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSeverityLabelMixin(value): {
            severity_label+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          severity_label+:
            {
              '#': { help: '', name: 'severity_label' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withSourceUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceUrl(value): {
            source_url:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSourceUrlMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceUrlMixin(value): {
            source_url+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          source_url+:
            {
              '#': { help: '', name: 'source_url' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTitle(value): {
            title:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTitleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTitleMixin(value): {
            title+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          title+:
            {
              '#': { help: '', name: 'title' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withType(value): {
            type:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTypeMixin(value): {
            type+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          type+:
            {
              '#': { help: '', name: 'type' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUpdatedAt(value): {
            updated_at:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withUpdatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUpdatedAtMixin(value): {
            updated_at+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          updated_at+:
            {
              '#': { help: '', name: 'updated_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRange(value): {
                date_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              date_range+:
                {
                  '#': { help: '', name: 'date_range' },
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    unit: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withUserDefinedFields': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUserDefinedFields(value): {
            user_defined_fields:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withUserDefinedFieldsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUserDefinedFieldsMixin(value): {
            user_defined_fields+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          user_defined_fields+:
            {
              '#': { help: '', name: 'user_defined_fields' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withVerificationState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVerificationState(value): {
            verification_state:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVerificationStateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVerificationStateMixin(value): {
            verification_state+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          verification_state+:
            {
              '#': { help: '', name: 'verification_state' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withWorkflowStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWorkflowStatus(value): {
            workflow_status:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withWorkflowStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWorkflowStatusMixin(value): {
            workflow_status+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          workflow_status+:
            {
              '#': { help: '', name: 'workflow_status' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIsTerminal': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withIsTerminal(value=true): {
        spec+: {
          is_terminal: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRuleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRuleName(value): {
        spec+: {
          rule_name: value,
        },
      },
      '#withRuleOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRuleOrder(value): {
        spec+: {
          rule_order: value,
        },
      },
      '#withRuleStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRuleStatus(value): {
        spec+: {
          rule_status: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        spec+: {
          tags_all: value,
        },
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        spec+: {
          tags_all+: value,
        },
      },
    },
  aws_securityhub_configuration_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'configuration_policy', type: 'object' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, configuration_policy, name):
        {
          local this = self,
          resource: {
            aws_securityhub_configuration_policy: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withConfigurationPolicy(configuration_policy)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withConfigurationPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withConfigurationPolicy(value): {
        spec+: {
          configuration_policy: value,
        },
      },
      '#withConfigurationPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withConfigurationPolicyMixin(value): {
        spec+: {
          configuration_policy+: value,
        },
      },
      configuration_policy+:
        {
          '#withEnabledStandardArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEnabledStandardArns(value): {
            spec+: {
              configuration_policy+: {
                enabled_standard_arns:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withEnabledStandardArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEnabledStandardArnsMixin(value): {
            spec+: {
              configuration_policy+: {
                enabled_standard_arns+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withSecurityControlsConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecurityControlsConfiguration(value): {
            spec+: {
              configuration_policy+: {
                security_controls_configuration: value,
              },
            },
          },
          '#withSecurityControlsConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecurityControlsConfigurationMixin(value): {
            spec+: {
              configuration_policy+: {
                security_controls_configuration+: value,
              },
            },
          },
          security_controls_configuration+:
            {
              '#withDisabledControlIdentifiers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDisabledControlIdentifiers(value): {
                spec+: {
                  configuration_policy+: {
                    security_controls_configuration+: {
                      disabled_control_identifiers:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              '#withDisabledControlIdentifiersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDisabledControlIdentifiersMixin(value): {
                spec+: {
                  configuration_policy+: {
                    security_controls_configuration+: {
                      disabled_control_identifiers+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              '#withEnabledControlIdentifiers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEnabledControlIdentifiers(value): {
                spec+: {
                  configuration_policy+: {
                    security_controls_configuration+: {
                      enabled_control_identifiers:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              '#withEnabledControlIdentifiersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEnabledControlIdentifiersMixin(value): {
                spec+: {
                  configuration_policy+: {
                    security_controls_configuration+: {
                      enabled_control_identifiers+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              '#withSecurityControlCustomParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityControlCustomParameter(value): {
                spec+: {
                  configuration_policy+: {
                    security_controls_configuration+: {
                      security_control_custom_parameter:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              '#withSecurityControlCustomParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityControlCustomParameterMixin(value): {
                spec+: {
                  configuration_policy+: {
                    security_controls_configuration+: {
                      security_control_custom_parameter+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              },
              security_control_custom_parameter+:
                {
                  '#': { help: '', name: 'security_control_custom_parameter' },
                  '#withParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameter(value): {
                    parameter:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameterMixin(value): {
                    parameter+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameter+:
                    {
                      '#': { help: '', name: 'parameter' },
                      '#withBool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withBool(value): {
                        bool: value,
                      },
                      '#withBoolMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withBoolMixin(value): {
                        bool+: value,
                      },
                      bool+:
                        {
                          '#withValue': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withValue(value=true): {
                            bool+: {
                              value: value,
                            },
                          },
                        },
                      '#withDouble': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDouble(value): {
                        double: value,
                      },
                      '#withDoubleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDoubleMixin(value): {
                        double+: value,
                      },
                      double+:
                        {
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            double+: {
                              value: value,
                            },
                          },
                        },
                      '#withEnum': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withEnum(value): {
                        enum: value,
                      },
                      '#withEnumMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withEnumMixin(value): {
                        enum+: value,
                      },
                      enum+:
                        {
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            enum+: {
                              value: value,
                            },
                          },
                        },
                      '#withEnumList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withEnumList(value): {
                        enum_list: value,
                      },
                      '#withEnumListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withEnumListMixin(value): {
                        enum_list+: value,
                      },
                      enum_list+:
                        {
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValue(value): {
                            enum_list+: {
                              value:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValueMixin(value): {
                            enum_list+: {
                              value+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withInt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withInt(value): {
                        int: value,
                      },
                      '#withIntMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIntMixin(value): {
                        int+: value,
                      },
                      int+:
                        {
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            int+: {
                              value: value,
                            },
                          },
                        },
                      '#withIntList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIntList(value): {
                        int_list: value,
                      },
                      '#withIntListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIntListMixin(value): {
                        int_list+: value,
                      },
                      int_list+:
                        {
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValue(value): {
                            int_list+: {
                              value:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValueMixin(value): {
                            int_list+: {
                              value+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withString(value): {
                        string: value,
                      },
                      '#withStringMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withStringMixin(value): {
                        string+: value,
                      },
                      string+:
                        {
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            string+: {
                              value: value,
                            },
                          },
                        },
                      '#withStringList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withStringList(value): {
                        string_list: value,
                      },
                      '#withStringListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withStringListMixin(value): {
                        string_list+: value,
                      },
                      string_list+:
                        {
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValue(value): {
                            string_list+: {
                              value:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValueMixin(value): {
                            string_list+: {
                              value+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withValueType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValueType(value): {
                        value_type: value,
                      },
                    },
                  '#withSecurityControlId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSecurityControlId(value): {
                    security_control_id: value,
                  },
                },
            },
          '#withServiceEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withServiceEnabled(value=true): {
            spec+: {
              configuration_policy+: {
                service_enabled: value,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_configuration_policy_association:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'policy_id', type: 'string' }, { default: null, enums: null, name: 'target_id', type: 'string' }], help: '' } },
      new(tf_resource_key, policy_id, target_id):
        {
          local this = self,
          resource: {
            aws_securityhub_configuration_policy_association: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withPolicyId(policy_id)
        + self.withTargetId(target_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withPolicyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The universally unique identifier (UUID) of the configuration policy.' } },
      withPolicyId(value): {
        spec+: {
          policy_id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTargetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The identifier of the target account, organizational unit, or the root to associate with the specified configuration.' } },
      withTargetId(value): {
        spec+: {
          target_id: value,
        },
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        spec+: {
          timeouts: value,
        },
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        spec+: {
          timeouts+: value,
        },
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            spec+: {
              timeouts+: {
                create: value,
              },
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            spec+: {
              timeouts+: {
                update: value,
              },
            },
          },
        },
    },
  aws_securityhub_finding_aggregator:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'linking_mode', type: 'string' }], help: '' } },
      new(tf_resource_key, linking_mode):
        {
          local this = self,
          resource: {
            aws_securityhub_finding_aggregator: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withLinkingMode(linking_mode),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withLinkingMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLinkingMode(value): {
        spec+: {
          linking_mode: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSpecifiedRegions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecifiedRegions(value): {
        spec+: {
          specified_regions:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSpecifiedRegionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecifiedRegionsMixin(value): {
        spec+: {
          specified_regions+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_insight:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'filters', type: 'object' }, { default: null, enums: null, name: 'group_by_attribute', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, filters, group_by_attribute, name):
        {
          local this = self,
          resource: {
            aws_securityhub_insight: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withFilters(filters)
        + self.withGroupByAttribute(group_by_attribute)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFilters(value): {
        spec+: {
          filters: value,
        },
      },
      '#withFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFiltersMixin(value): {
        spec+: {
          filters+: value,
        },
      },
      filters+:
        {
          '#withAwsAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAwsAccountId(value): {
            spec+: {
              filters+: {
                aws_account_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withAwsAccountIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAwsAccountIdMixin(value): {
            spec+: {
              filters+: {
                aws_account_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          aws_account_id+:
            {
              '#': { help: '', name: 'aws_account_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withCompanyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCompanyName(value): {
            spec+: {
              filters+: {
                company_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withCompanyNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCompanyNameMixin(value): {
            spec+: {
              filters+: {
                company_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          company_name+:
            {
              '#': { help: '', name: 'company_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withComplianceStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceStatus(value): {
            spec+: {
              filters+: {
                compliance_status:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withComplianceStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceStatusMixin(value): {
            spec+: {
              filters+: {
                compliance_status+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          compliance_status+:
            {
              '#': { help: '', name: 'compliance_status' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withConfidence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfidence(value): {
            spec+: {
              filters+: {
                confidence:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withConfidenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfidenceMixin(value): {
            spec+: {
              filters+: {
                confidence+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          confidence+:
            {
              '#': { help: '', name: 'confidence' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCreatedAt(value): {
            spec+: {
              filters+: {
                created_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withCreatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCreatedAtMixin(value): {
            spec+: {
              filters+: {
                created_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          created_at+:
            {
              '#': { help: '', name: 'created_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withCriticality': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCriticality(value): {
            spec+: {
              filters+: {
                criticality:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withCriticalityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCriticalityMixin(value): {
            spec+: {
              filters+: {
                criticality+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          criticality+:
            {
              '#': { help: '', name: 'criticality' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDescription(value): {
            spec+: {
              filters+: {
                description:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withDescriptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDescriptionMixin(value): {
            spec+: {
              filters+: {
                description+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          description+:
            {
              '#': { help: '', name: 'description' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withFindingProviderFieldsConfidence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsConfidence(value): {
            spec+: {
              filters+: {
                finding_provider_fields_confidence:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFindingProviderFieldsConfidenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsConfidenceMixin(value): {
            spec+: {
              filters+: {
                finding_provider_fields_confidence+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          finding_provider_fields_confidence+:
            {
              '#': { help: '', name: 'finding_provider_fields_confidence' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withFindingProviderFieldsCriticality': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsCriticality(value): {
            spec+: {
              filters+: {
                finding_provider_fields_criticality:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFindingProviderFieldsCriticalityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsCriticalityMixin(value): {
            spec+: {
              filters+: {
                finding_provider_fields_criticality+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          finding_provider_fields_criticality+:
            {
              '#': { help: '', name: 'finding_provider_fields_criticality' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withFindingProviderFieldsRelatedFindingsId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsRelatedFindingsId(value): {
            spec+: {
              filters+: {
                finding_provider_fields_related_findings_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFindingProviderFieldsRelatedFindingsIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsRelatedFindingsIdMixin(value): {
            spec+: {
              filters+: {
                finding_provider_fields_related_findings_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          finding_provider_fields_related_findings_id+:
            {
              '#': { help: '', name: 'finding_provider_fields_related_findings_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withFindingProviderFieldsRelatedFindingsProductArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsRelatedFindingsProductArn(value): {
            spec+: {
              filters+: {
                finding_provider_fields_related_findings_product_arn:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFindingProviderFieldsRelatedFindingsProductArnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsRelatedFindingsProductArnMixin(value): {
            spec+: {
              filters+: {
                finding_provider_fields_related_findings_product_arn+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          finding_provider_fields_related_findings_product_arn+:
            {
              '#': { help: '', name: 'finding_provider_fields_related_findings_product_arn' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withFindingProviderFieldsSeverityLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsSeverityLabel(value): {
            spec+: {
              filters+: {
                finding_provider_fields_severity_label:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFindingProviderFieldsSeverityLabelMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsSeverityLabelMixin(value): {
            spec+: {
              filters+: {
                finding_provider_fields_severity_label+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          finding_provider_fields_severity_label+:
            {
              '#': { help: '', name: 'finding_provider_fields_severity_label' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withFindingProviderFieldsSeverityOriginal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsSeverityOriginal(value): {
            spec+: {
              filters+: {
                finding_provider_fields_severity_original:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFindingProviderFieldsSeverityOriginalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsSeverityOriginalMixin(value): {
            spec+: {
              filters+: {
                finding_provider_fields_severity_original+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          finding_provider_fields_severity_original+:
            {
              '#': { help: '', name: 'finding_provider_fields_severity_original' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withFindingProviderFieldsTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsTypes(value): {
            spec+: {
              filters+: {
                finding_provider_fields_types:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFindingProviderFieldsTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFindingProviderFieldsTypesMixin(value): {
            spec+: {
              filters+: {
                finding_provider_fields_types+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          finding_provider_fields_types+:
            {
              '#': { help: '', name: 'finding_provider_fields_types' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withFirstObservedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFirstObservedAt(value): {
            spec+: {
              filters+: {
                first_observed_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withFirstObservedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFirstObservedAtMixin(value): {
            spec+: {
              filters+: {
                first_observed_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          first_observed_at+:
            {
              '#': { help: '', name: 'first_observed_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withGeneratorId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGeneratorId(value): {
            spec+: {
              filters+: {
                generator_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withGeneratorIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGeneratorIdMixin(value): {
            spec+: {
              filters+: {
                generator_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          generator_id+:
            {
              '#': { help: '', name: 'generator_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withId(value): {
            spec+: {
              filters+: {
                id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIdMixin(value): {
            spec+: {
              filters+: {
                id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          id+:
            {
              '#': { help: '', name: 'id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withKeyword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKeyword(value): {
            spec+: {
              filters+: {
                keyword:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withKeywordMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKeywordMixin(value): {
            spec+: {
              filters+: {
                keyword+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          keyword+:
            {
              '#': { help: '', name: 'keyword' },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withLastObservedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLastObservedAt(value): {
            spec+: {
              filters+: {
                last_observed_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withLastObservedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLastObservedAtMixin(value): {
            spec+: {
              filters+: {
                last_observed_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          last_observed_at+:
            {
              '#': { help: '', name: 'last_observed_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withMalwareName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwareName(value): {
            spec+: {
              filters+: {
                malware_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withMalwareNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwareNameMixin(value): {
            spec+: {
              filters+: {
                malware_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          malware_name+:
            {
              '#': { help: '', name: 'malware_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withMalwarePath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwarePath(value): {
            spec+: {
              filters+: {
                malware_path:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withMalwarePathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwarePathMixin(value): {
            spec+: {
              filters+: {
                malware_path+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          malware_path+:
            {
              '#': { help: '', name: 'malware_path' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withMalwareState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwareState(value): {
            spec+: {
              filters+: {
                malware_state:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withMalwareStateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwareStateMixin(value): {
            spec+: {
              filters+: {
                malware_state+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          malware_state+:
            {
              '#': { help: '', name: 'malware_state' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withMalwareType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwareType(value): {
            spec+: {
              filters+: {
                malware_type:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withMalwareTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMalwareTypeMixin(value): {
            spec+: {
              filters+: {
                malware_type+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          malware_type+:
            {
              '#': { help: '', name: 'malware_type' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNetworkDestinationDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationDomain(value): {
            spec+: {
              filters+: {
                network_destination_domain:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkDestinationDomainMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationDomainMixin(value): {
            spec+: {
              filters+: {
                network_destination_domain+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_destination_domain+:
            {
              '#': { help: '', name: 'network_destination_domain' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNetworkDestinationIpv4': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationIpv4(value): {
            spec+: {
              filters+: {
                network_destination_ipv4:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkDestinationIpv4Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationIpv4Mixin(value): {
            spec+: {
              filters+: {
                network_destination_ipv4+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_destination_ipv4+:
            {
              '#': { help: '', name: 'network_destination_ipv4' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
            },
          '#withNetworkDestinationIpv6': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationIpv6(value): {
            spec+: {
              filters+: {
                network_destination_ipv6:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkDestinationIpv6Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationIpv6Mixin(value): {
            spec+: {
              filters+: {
                network_destination_ipv6+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_destination_ipv6+:
            {
              '#': { help: '', name: 'network_destination_ipv6' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
            },
          '#withNetworkDestinationPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationPort(value): {
            spec+: {
              filters+: {
                network_destination_port:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkDestinationPortMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDestinationPortMixin(value): {
            spec+: {
              filters+: {
                network_destination_port+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_destination_port+:
            {
              '#': { help: '', name: 'network_destination_port' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withNetworkDirection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDirection(value): {
            spec+: {
              filters+: {
                network_direction:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkDirectionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkDirectionMixin(value): {
            spec+: {
              filters+: {
                network_direction+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_direction+:
            {
              '#': { help: '', name: 'network_direction' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNetworkProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkProtocol(value): {
            spec+: {
              filters+: {
                network_protocol:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkProtocolMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkProtocolMixin(value): {
            spec+: {
              filters+: {
                network_protocol+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_protocol+:
            {
              '#': { help: '', name: 'network_protocol' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNetworkSourceDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceDomain(value): {
            spec+: {
              filters+: {
                network_source_domain:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkSourceDomainMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceDomainMixin(value): {
            spec+: {
              filters+: {
                network_source_domain+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_source_domain+:
            {
              '#': { help: '', name: 'network_source_domain' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNetworkSourceIpv4': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceIpv4(value): {
            spec+: {
              filters+: {
                network_source_ipv4:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkSourceIpv4Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceIpv4Mixin(value): {
            spec+: {
              filters+: {
                network_source_ipv4+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_source_ipv4+:
            {
              '#': { help: '', name: 'network_source_ipv4' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
            },
          '#withNetworkSourceIpv6': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceIpv6(value): {
            spec+: {
              filters+: {
                network_source_ipv6:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkSourceIpv6Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceIpv6Mixin(value): {
            spec+: {
              filters+: {
                network_source_ipv6+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_source_ipv6+:
            {
              '#': { help: '', name: 'network_source_ipv6' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
            },
          '#withNetworkSourceMac': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceMac(value): {
            spec+: {
              filters+: {
                network_source_mac:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkSourceMacMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourceMacMixin(value): {
            spec+: {
              filters+: {
                network_source_mac+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_source_mac+:
            {
              '#': { help: '', name: 'network_source_mac' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNetworkSourcePort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourcePort(value): {
            spec+: {
              filters+: {
                network_source_port:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNetworkSourcePortMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkSourcePortMixin(value): {
            spec+: {
              filters+: {
                network_source_port+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          network_source_port+:
            {
              '#': { help: '', name: 'network_source_port' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withNoteText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteText(value): {
            spec+: {
              filters+: {
                note_text:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNoteTextMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteTextMixin(value): {
            spec+: {
              filters+: {
                note_text+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          note_text+:
            {
              '#': { help: '', name: 'note_text' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withNoteUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedAt(value): {
            spec+: {
              filters+: {
                note_updated_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNoteUpdatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedAtMixin(value): {
            spec+: {
              filters+: {
                note_updated_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          note_updated_at+:
            {
              '#': { help: '', name: 'note_updated_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withNoteUpdatedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedBy(value): {
            spec+: {
              filters+: {
                note_updated_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withNoteUpdatedByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNoteUpdatedByMixin(value): {
            spec+: {
              filters+: {
                note_updated_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          note_updated_by+:
            {
              '#': { help: '', name: 'note_updated_by' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withProcessLaunchedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessLaunchedAt(value): {
            spec+: {
              filters+: {
                process_launched_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProcessLaunchedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessLaunchedAtMixin(value): {
            spec+: {
              filters+: {
                process_launched_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          process_launched_at+:
            {
              '#': { help: '', name: 'process_launched_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withProcessName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessName(value): {
            spec+: {
              filters+: {
                process_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProcessNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessNameMixin(value): {
            spec+: {
              filters+: {
                process_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          process_name+:
            {
              '#': { help: '', name: 'process_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withProcessParentPid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessParentPid(value): {
            spec+: {
              filters+: {
                process_parent_pid:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProcessParentPidMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessParentPidMixin(value): {
            spec+: {
              filters+: {
                process_parent_pid+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          process_parent_pid+:
            {
              '#': { help: '', name: 'process_parent_pid' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withProcessPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessPath(value): {
            spec+: {
              filters+: {
                process_path:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProcessPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessPathMixin(value): {
            spec+: {
              filters+: {
                process_path+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          process_path+:
            {
              '#': { help: '', name: 'process_path' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withProcessPid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessPid(value): {
            spec+: {
              filters+: {
                process_pid:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProcessPidMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessPidMixin(value): {
            spec+: {
              filters+: {
                process_pid+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          process_pid+:
            {
              '#': { help: '', name: 'process_pid' },
              '#withEq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEq(value): {
                eq: value,
              },
              '#withGte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGte(value): {
                gte: value,
              },
              '#withLte': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLte(value): {
                lte: value,
              },
            },
          '#withProcessTerminatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessTerminatedAt(value): {
            spec+: {
              filters+: {
                process_terminated_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProcessTerminatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProcessTerminatedAtMixin(value): {
            spec+: {
              filters+: {
                process_terminated_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          process_terminated_at+:
            {
              '#': { help: '', name: 'process_terminated_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withProductArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductArn(value): {
            spec+: {
              filters+: {
                product_arn:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProductArnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductArnMixin(value): {
            spec+: {
              filters+: {
                product_arn+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          product_arn+:
            {
              '#': { help: '', name: 'product_arn' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withProductFields': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductFields(value): {
            spec+: {
              filters+: {
                product_fields:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProductFieldsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductFieldsMixin(value): {
            spec+: {
              filters+: {
                product_fields+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          product_fields+:
            {
              '#': { help: '', name: 'product_fields' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withProductName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductName(value): {
            spec+: {
              filters+: {
                product_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withProductNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProductNameMixin(value): {
            spec+: {
              filters+: {
                product_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          product_name+:
            {
              '#': { help: '', name: 'product_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withRecommendationText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecommendationText(value): {
            spec+: {
              filters+: {
                recommendation_text:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withRecommendationTextMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecommendationTextMixin(value): {
            spec+: {
              filters+: {
                recommendation_text+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          recommendation_text+:
            {
              '#': { help: '', name: 'recommendation_text' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withRecordState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecordState(value): {
            spec+: {
              filters+: {
                record_state:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withRecordStateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecordStateMixin(value): {
            spec+: {
              filters+: {
                record_state+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          record_state+:
            {
              '#': { help: '', name: 'record_state' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withRelatedFindingsId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsId(value): {
            spec+: {
              filters+: {
                related_findings_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withRelatedFindingsIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsIdMixin(value): {
            spec+: {
              filters+: {
                related_findings_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          related_findings_id+:
            {
              '#': { help: '', name: 'related_findings_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withRelatedFindingsProductArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsProductArn(value): {
            spec+: {
              filters+: {
                related_findings_product_arn:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withRelatedFindingsProductArnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelatedFindingsProductArnMixin(value): {
            spec+: {
              filters+: {
                related_findings_product_arn+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          related_findings_product_arn+:
            {
              '#': { help: '', name: 'related_findings_product_arn' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsEc2InstanceIamInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceIamInstanceProfileArn(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_iam_instance_profile_arn:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceIamInstanceProfileArnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceIamInstanceProfileArnMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_iam_instance_profile_arn+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_iam_instance_profile_arn+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_iam_instance_profile_arn' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsEc2InstanceImageId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceImageId(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_image_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceImageIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceImageIdMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_image_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_image_id+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_image_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsEc2InstanceIpv4Addresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceIpv4Addresses(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_ipv4_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceIpv4AddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceIpv4AddressesMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_ipv4_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_ipv4_addresses+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_ipv4_addresses' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
            },
          '#withResourceAwsEc2InstanceIpv6Addresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceIpv6Addresses(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_ipv6_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceIpv6AddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceIpv6AddressesMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_ipv6_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_ipv6_addresses+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_ipv6_addresses' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
            },
          '#withResourceAwsEc2InstanceKeyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceKeyName(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_key_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceKeyNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceKeyNameMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_key_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_key_name+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_key_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsEc2InstanceLaunchedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceLaunchedAt(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_launched_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceLaunchedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceLaunchedAtMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_launched_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_launched_at+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_launched_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withResourceAwsEc2InstanceSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceSubnetId(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_subnet_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceSubnetIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceSubnetIdMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_subnet_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_subnet_id+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_subnet_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsEc2InstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceType(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_type:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceTypeMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_type+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_type+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_type' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsEc2InstanceVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceVpcId(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_vpc_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsEc2InstanceVpcIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsEc2InstanceVpcIdMixin(value): {
            spec+: {
              filters+: {
                resource_aws_ec2_instance_vpc_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_ec2_instance_vpc_id+:
            {
              '#': { help: '', name: 'resource_aws_ec2_instance_vpc_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsIamAccessKeyCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsIamAccessKeyCreatedAt(value): {
            spec+: {
              filters+: {
                resource_aws_iam_access_key_created_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsIamAccessKeyCreatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsIamAccessKeyCreatedAtMixin(value): {
            spec+: {
              filters+: {
                resource_aws_iam_access_key_created_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_iam_access_key_created_at+:
            {
              '#': { help: '', name: 'resource_aws_iam_access_key_created_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withResourceAwsIamAccessKeyStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsIamAccessKeyStatus(value): {
            spec+: {
              filters+: {
                resource_aws_iam_access_key_status:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsIamAccessKeyStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsIamAccessKeyStatusMixin(value): {
            spec+: {
              filters+: {
                resource_aws_iam_access_key_status+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_iam_access_key_status+:
            {
              '#': { help: '', name: 'resource_aws_iam_access_key_status' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsIamAccessKeyUserName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsIamAccessKeyUserName(value): {
            spec+: {
              filters+: {
                resource_aws_iam_access_key_user_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsIamAccessKeyUserNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsIamAccessKeyUserNameMixin(value): {
            spec+: {
              filters+: {
                resource_aws_iam_access_key_user_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_iam_access_key_user_name+:
            {
              '#': { help: '', name: 'resource_aws_iam_access_key_user_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsS3BucketOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsS3BucketOwnerId(value): {
            spec+: {
              filters+: {
                resource_aws_s3_bucket_owner_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsS3BucketOwnerIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsS3BucketOwnerIdMixin(value): {
            spec+: {
              filters+: {
                resource_aws_s3_bucket_owner_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_s3_bucket_owner_id+:
            {
              '#': { help: '', name: 'resource_aws_s3_bucket_owner_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceAwsS3BucketOwnerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsS3BucketOwnerName(value): {
            spec+: {
              filters+: {
                resource_aws_s3_bucket_owner_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceAwsS3BucketOwnerNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceAwsS3BucketOwnerNameMixin(value): {
            spec+: {
              filters+: {
                resource_aws_s3_bucket_owner_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_aws_s3_bucket_owner_name+:
            {
              '#': { help: '', name: 'resource_aws_s3_bucket_owner_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceContainerImageId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerImageId(value): {
            spec+: {
              filters+: {
                resource_container_image_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceContainerImageIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerImageIdMixin(value): {
            spec+: {
              filters+: {
                resource_container_image_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_container_image_id+:
            {
              '#': { help: '', name: 'resource_container_image_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceContainerImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerImageName(value): {
            spec+: {
              filters+: {
                resource_container_image_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceContainerImageNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerImageNameMixin(value): {
            spec+: {
              filters+: {
                resource_container_image_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_container_image_name+:
            {
              '#': { help: '', name: 'resource_container_image_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceContainerLaunchedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerLaunchedAt(value): {
            spec+: {
              filters+: {
                resource_container_launched_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceContainerLaunchedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerLaunchedAtMixin(value): {
            spec+: {
              filters+: {
                resource_container_launched_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_container_launched_at+:
            {
              '#': { help: '', name: 'resource_container_launched_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withResourceContainerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerName(value): {
            spec+: {
              filters+: {
                resource_container_name:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceContainerNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceContainerNameMixin(value): {
            spec+: {
              filters+: {
                resource_container_name+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_container_name+:
            {
              '#': { help: '', name: 'resource_container_name' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceDetailsOther': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceDetailsOther(value): {
            spec+: {
              filters+: {
                resource_details_other:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceDetailsOtherMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceDetailsOtherMixin(value): {
            spec+: {
              filters+: {
                resource_details_other+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_details_other+:
            {
              '#': { help: '', name: 'resource_details_other' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceId(value): {
            spec+: {
              filters+: {
                resource_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceIdMixin(value): {
            spec+: {
              filters+: {
                resource_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_id+:
            {
              '#': { help: '', name: 'resource_id' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourcePartition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourcePartition(value): {
            spec+: {
              filters+: {
                resource_partition:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourcePartitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourcePartitionMixin(value): {
            spec+: {
              filters+: {
                resource_partition+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_partition+:
            {
              '#': { help: '', name: 'resource_partition' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceRegion(value): {
            spec+: {
              filters+: {
                resource_region:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceRegionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceRegionMixin(value): {
            spec+: {
              filters+: {
                resource_region+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_region+:
            {
              '#': { help: '', name: 'resource_region' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTags(value): {
            spec+: {
              filters+: {
                resource_tags:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTagsMixin(value): {
            spec+: {
              filters+: {
                resource_tags+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_tags+:
            {
              '#': { help: '', name: 'resource_tags' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceType(value): {
            spec+: {
              filters+: {
                resource_type:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withResourceTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withResourceTypeMixin(value): {
            spec+: {
              filters+: {
                resource_type+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          resource_type+:
            {
              '#': { help: '', name: 'resource_type' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withSeverityLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSeverityLabel(value): {
            spec+: {
              filters+: {
                severity_label:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withSeverityLabelMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSeverityLabelMixin(value): {
            spec+: {
              filters+: {
                severity_label+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          severity_label+:
            {
              '#': { help: '', name: 'severity_label' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withSourceUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceUrl(value): {
            spec+: {
              filters+: {
                source_url:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withSourceUrlMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceUrlMixin(value): {
            spec+: {
              filters+: {
                source_url+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          source_url+:
            {
              '#': { help: '', name: 'source_url' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withThreatIntelIndicatorCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorCategory(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_category:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withThreatIntelIndicatorCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorCategoryMixin(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_category+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          threat_intel_indicator_category+:
            {
              '#': { help: '', name: 'threat_intel_indicator_category' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withThreatIntelIndicatorLastObservedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorLastObservedAt(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_last_observed_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withThreatIntelIndicatorLastObservedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorLastObservedAtMixin(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_last_observed_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          threat_intel_indicator_last_observed_at+:
            {
              '#': { help: '', name: 'threat_intel_indicator_last_observed_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withThreatIntelIndicatorSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorSource(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_source:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withThreatIntelIndicatorSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorSourceMixin(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_source+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          threat_intel_indicator_source+:
            {
              '#': { help: '', name: 'threat_intel_indicator_source' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withThreatIntelIndicatorSourceUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorSourceUrl(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_source_url:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withThreatIntelIndicatorSourceUrlMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorSourceUrlMixin(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_source_url+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          threat_intel_indicator_source_url+:
            {
              '#': { help: '', name: 'threat_intel_indicator_source_url' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withThreatIntelIndicatorType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorType(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_type:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withThreatIntelIndicatorTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorTypeMixin(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_type+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          threat_intel_indicator_type+:
            {
              '#': { help: '', name: 'threat_intel_indicator_type' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withThreatIntelIndicatorValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorValue(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_value:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withThreatIntelIndicatorValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withThreatIntelIndicatorValueMixin(value): {
            spec+: {
              filters+: {
                threat_intel_indicator_value+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          threat_intel_indicator_value+:
            {
              '#': { help: '', name: 'threat_intel_indicator_value' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTitle(value): {
            spec+: {
              filters+: {
                title:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withTitleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTitleMixin(value): {
            spec+: {
              filters+: {
                title+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          title+:
            {
              '#': { help: '', name: 'title' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withType(value): {
            spec+: {
              filters+: {
                type:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTypeMixin(value): {
            spec+: {
              filters+: {
                type+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          type+:
            {
              '#': { help: '', name: 'type' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUpdatedAt(value): {
            spec+: {
              filters+: {
                updated_at:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withUpdatedAtMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUpdatedAtMixin(value): {
            spec+: {
              filters+: {
                updated_at+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          updated_at+:
            {
              '#': { help: '', name: 'updated_at' },
              '#withDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRange(value): {
                date_range: value,
              },
              '#withDateRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDateRangeMixin(value): {
                date_range+: value,
              },
              date_range+:
                {
                  '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnit(value): {
                    date_range+: {
                      unit: value,
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    date_range+: {
                      value: value,
                    },
                  },
                },
              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnd(value): {
                end: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
          '#withUserDefinedValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUserDefinedValues(value): {
            spec+: {
              filters+: {
                user_defined_values:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withUserDefinedValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUserDefinedValuesMixin(value): {
            spec+: {
              filters+: {
                user_defined_values+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          user_defined_values+:
            {
              '#': { help: '', name: 'user_defined_values' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withVerificationState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVerificationState(value): {
            spec+: {
              filters+: {
                verification_state:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withVerificationStateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVerificationStateMixin(value): {
            spec+: {
              filters+: {
                verification_state+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          verification_state+:
            {
              '#': { help: '', name: 'verification_state' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withWorkflowStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWorkflowStatus(value): {
            spec+: {
              filters+: {
                workflow_status:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withWorkflowStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWorkflowStatusMixin(value): {
            spec+: {
              filters+: {
                workflow_status+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          workflow_status+:
            {
              '#': { help: '', name: 'workflow_status' },
              '#withComparison': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComparison(value): {
                comparison: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
        },
      '#withGroupByAttribute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withGroupByAttribute(value): {
        spec+: {
          group_by_attribute: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_invite_accepter:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'master_id', type: 'string' }], help: '' } },
      new(tf_resource_key, master_id):
        {
          local this = self,
          resource: {
            aws_securityhub_invite_accepter: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withMasterId(master_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withInvitationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInvitationId(value): {
        spec+: {
          invitation_id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withMasterId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMasterId(value): {
        spec+: {
          master_id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_member:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'account_id', type: 'string' }], help: '' } },
      new(tf_resource_key, account_id):
        {
          local this = self,
          resource: {
            aws_securityhub_member: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withAccountId(account_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAccountId(value): {
        spec+: {
          account_id: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEmail': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEmail(value): {
        spec+: {
          email: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withInvite': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInvite(value=true): {
        spec+: {
          invite: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withMasterId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMasterId(value): {
        spec+: {
          master_id: value,
        },
      },
      '#withMemberStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMemberStatus(value): {
        spec+: {
          member_status: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_organization_admin_account:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'admin_account_id', type: 'string' }], help: '' } },
      new(tf_resource_key, admin_account_id):
        {
          local this = self,
          resource: {
            aws_securityhub_organization_admin_account: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withAdminAccountId(admin_account_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAdminAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAdminAccountId(value): {
        spec+: {
          admin_account_id: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_organization_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'auto_enable', type: 'boolean' }], help: '' } },
      new(tf_resource_key, auto_enable):
        {
          local this = self,
          resource: {
            aws_securityhub_organization_configuration: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withAutoEnable(auto_enable),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAutoEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoEnable(value=true): {
        spec+: {
          auto_enable: value,
        },
      },
      '#withAutoEnableStandards': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAutoEnableStandards(value): {
        spec+: {
          auto_enable_standards: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withOrganizationConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOrganizationConfiguration(value): {
        spec+: {
          organization_configuration: value,
        },
      },
      '#withOrganizationConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOrganizationConfigurationMixin(value): {
        spec+: {
          organization_configuration+: value,
        },
      },
      organization_configuration+:
        {
          '#withConfigurationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withConfigurationType(value): {
            spec+: {
              organization_configuration+: {
                configuration_type: value,
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        spec+: {
          timeouts: value,
        },
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        spec+: {
          timeouts+: value,
        },
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            spec+: {
              timeouts+: {
                create: value,
              },
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            spec+: {
              timeouts+: {
                delete: value,
              },
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            spec+: {
              timeouts+: {
                update: value,
              },
            },
          },
        },
    },
  aws_securityhub_product_subscription:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'product_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, product_arn):
        {
          local this = self,
          resource: {
            aws_securityhub_product_subscription: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withProductArn(product_arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withProductArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProductArn(value): {
        spec+: {
          product_arn: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_securityhub_standards_control:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'control_status', type: 'string' }, { default: null, enums: null, name: 'standards_control_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, control_status, standards_control_arn):
        {
          local this = self,
          resource: {
            aws_securityhub_standards_control: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withControlStatus(control_status)
        + self.withStandardsControlArn(standards_control_arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withControlId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withControlId(value): {
        spec+: {
          control_id: value,
        },
      },
      '#withControlStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withControlStatus(value): {
        spec+: {
          control_status: value,
        },
      },
      '#withControlStatusUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withControlStatusUpdatedAt(value): {
        spec+: {
          control_status_updated_at: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withDisabledReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDisabledReason(value): {
        spec+: {
          disabled_reason: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRelatedRequirements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRelatedRequirements(value): {
        spec+: {
          related_requirements:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRelatedRequirementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRelatedRequirementsMixin(value): {
        spec+: {
          related_requirements+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRemediationUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRemediationUrl(value): {
        spec+: {
          remediation_url: value,
        },
      },
      '#withSeverityRating': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSeverityRating(value): {
        spec+: {
          severity_rating: value,
        },
      },
      '#withStandardsControlArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStandardsControlArn(value): {
        spec+: {
          standards_control_arn: value,
        },
      },
      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTitle(value): {
        spec+: {
          title: value,
        },
      },
    },
  aws_securityhub_standards_control_association:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'association_status', type: 'string' }, { default: null, enums: null, name: 'security_control_id', type: 'string' }, { default: null, enums: null, name: 'standards_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, association_status, security_control_id, standards_arn):
        {
          local this = self,
          resource: {
            aws_securityhub_standards_control_association: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withAssociationStatus(association_status)
        + self.withSecurityControlId(security_control_id)
        + self.withStandardsArn(standards_arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAssociationStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAssociationStatus(value): {
        spec+: {
          association_status: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSecurityControlId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSecurityControlId(value): {
        spec+: {
          security_control_id: value,
        },
      },
      '#withStandardsArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStandardsArn(value): {
        spec+: {
          standards_arn: value,
        },
      },
      '#withUpdatedReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedReason(value): {
        spec+: {
          updated_reason: value,
        },
      },
    },
  aws_securityhub_standards_subscription:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'standards_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, standards_arn):
        {
          local this = self,
          resource: {
            aws_securityhub_standards_subscription: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withStandardsArn(standards_arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withStandardsArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStandardsArn(value): {
        spec+: {
          standards_arn: value,
        },
      },
    },
}
