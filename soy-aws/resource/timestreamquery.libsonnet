// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'timestreamquery',
  },
  aws_timestreamquery_scheduled_query:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'execution_role_arn', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'query_string', type: 'string' }], help: '' } },
      new(tf_resource_key, execution_role_arn, name, query_string):
        self.withTfResourceKey(tf_resource_key)
        + self.withExecutionRoleArn(execution_role_arn)
        + self.withName(name)
        + self.withQueryString(query_string),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_timestreamquery_scheduled_query+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTime(value): {
        creation_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withErrorReportConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withErrorReportConfiguration(value): {
        error_report_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withErrorReportConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withErrorReportConfigurationMixin(value): {
        error_report_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      error_report_configuration+:
        {
          '#': { help: '', name: 'error_report_configuration' },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3Configuration(value): {
            s3_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            s3_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          s3_configuration+:
            {
              '#': { help: '', name: 's3_configuration' },
              '#withBucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketName(value): {
                bucket_name: value,
              },
              '#withEncryptionOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncryptionOption(value): {
                encryption_option: value,
              },
              '#withObjectKeyPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withObjectKeyPrefix(value): {
                object_key_prefix: value,
              },
            },
        },
      '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExecutionRoleArn(value): {
        execution_role_arn: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withLastRunSummary': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLastRunSummary(value): {
        last_run_summary:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLastRunSummaryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLastRunSummaryMixin(value): {
        last_run_summary+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      last_run_summary+:
        {
          '#': { help: '', name: 'last_run_summary' },
          '#withErrorReportLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withErrorReportLocation(value): {
            error_report_location:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withErrorReportLocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withErrorReportLocationMixin(value): {
            error_report_location+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          error_report_location+:
            {
              '#': { help: '', name: 'error_report_location' },
              '#withS3ReportLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3ReportLocation(value): {
                s3_report_location:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withS3ReportLocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3ReportLocationMixin(value): {
                s3_report_location+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              s3_report_location+:
                {
                  '#': { help: '', name: 's3_report_location' },
                  '#withBucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withBucketName(value): {
                    bucket_name: value,
                  },
                  '#withObjectKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withObjectKey(value): {
                    object_key: value,
                  },
                },
            },
          '#withExecutionStats': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExecutionStats(value): {
            execution_stats:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withExecutionStatsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExecutionStatsMixin(value): {
            execution_stats+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          execution_stats+:
            {
              '#': { help: '', name: 'execution_stats' },
              '#withBytesMetered': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBytesMetered(value): {
                bytes_metered: value,
              },
              '#withCumulativeBytesScanned': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCumulativeBytesScanned(value): {
                cumulative_bytes_scanned: value,
              },
              '#withDataWrites': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDataWrites(value): {
                data_writes: value,
              },
              '#withExecutionTimeInMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withExecutionTimeInMillis(value): {
                execution_time_in_millis: value,
              },
              '#withQueryResultRows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withQueryResultRows(value): {
                query_result_rows: value,
              },
              '#withRecordsIngested': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withRecordsIngested(value): {
                records_ingested: value,
              },
            },
          '#withFailureReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFailureReason(value): {
            failure_reason: value,
          },
          '#withInvocationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInvocationTime(value): {
            invocation_time: value,
          },
          '#withQueryInsightsResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryInsightsResponse(value): {
            query_insights_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withQueryInsightsResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryInsightsResponseMixin(value): {
            query_insights_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          query_insights_response+:
            {
              '#': { help: '', name: 'query_insights_response' },
              '#withOutputBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withOutputBytes(value): {
                output_bytes: value,
              },
              '#withOutputRows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withOutputRows(value): {
                output_rows: value,
              },
              '#withQuerySpatialCoverage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQuerySpatialCoverage(value): {
                query_spatial_coverage:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withQuerySpatialCoverageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQuerySpatialCoverageMixin(value): {
                query_spatial_coverage+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              query_spatial_coverage+:
                {
                  '#': { help: '', name: 'query_spatial_coverage' },
                  '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMax(value): {
                    max:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMaxMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMaxMixin(value): {
                    max+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  max+:
                    {
                      '#': { help: '', name: 'max' },
                      '#withPartitionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPartitionKey(value): {
                        partition_key:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPartitionKeyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPartitionKeyMixin(value): {
                        partition_key+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTableArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withTableArn(value): {
                        table_arn: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
              '#withQueryTableCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withQueryTableCount(value): {
                query_table_count: value,
              },
              '#withQueryTemporalRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQueryTemporalRange(value): {
                query_temporal_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withQueryTemporalRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQueryTemporalRangeMixin(value): {
                query_temporal_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              query_temporal_range+:
                {
                  '#': { help: '', name: 'query_temporal_range' },
                  '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMax(value): {
                    max:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMaxMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMaxMixin(value): {
                    max+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  max+:
                    {
                      '#': { help: '', name: 'max' },
                      '#withTableArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withTableArn(value): {
                        table_arn: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
            },
          '#withRunStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRunStatus(value): {
            run_status: value,
          },
          '#withTriggerTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTriggerTime(value): {
            trigger_time: value,
          },
        },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNextInvocationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNextInvocationTime(value): {
        next_invocation_time: value,
      },
      '#withNotificationConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNotificationConfiguration(value): {
        notification_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNotificationConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNotificationConfigurationMixin(value): {
        notification_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      notification_configuration+:
        {
          '#': { help: '', name: 'notification_configuration' },
          '#withSnsConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSnsConfiguration(value): {
            sns_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSnsConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSnsConfigurationMixin(value): {
            sns_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          sns_configuration+:
            {
              '#': { help: '', name: 'sns_configuration' },
              '#withTopicArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTopicArn(value): {
                topic_arn: value,
              },
            },
        },
      '#withPreviousInvocationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreviousInvocationTime(value): {
        previous_invocation_time: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withQueryString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQueryString(value): {
        query_string: value,
      },
      '#withRecentlyFailedRuns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRecentlyFailedRuns(value): {
        recently_failed_runs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRecentlyFailedRunsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRecentlyFailedRunsMixin(value): {
        recently_failed_runs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      recently_failed_runs+:
        {
          '#': { help: '', name: 'recently_failed_runs' },
          '#withErrorReportLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withErrorReportLocation(value): {
            error_report_location:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withErrorReportLocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withErrorReportLocationMixin(value): {
            error_report_location+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          error_report_location+:
            {
              '#': { help: '', name: 'error_report_location' },
              '#withS3ReportLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3ReportLocation(value): {
                s3_report_location:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withS3ReportLocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3ReportLocationMixin(value): {
                s3_report_location+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              s3_report_location+:
                {
                  '#': { help: '', name: 's3_report_location' },
                  '#withBucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withBucketName(value): {
                    bucket_name: value,
                  },
                  '#withObjectKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withObjectKey(value): {
                    object_key: value,
                  },
                },
            },
          '#withExecutionStats': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExecutionStats(value): {
            execution_stats:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withExecutionStatsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExecutionStatsMixin(value): {
            execution_stats+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          execution_stats+:
            {
              '#': { help: '', name: 'execution_stats' },
              '#withBytesMetered': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBytesMetered(value): {
                bytes_metered: value,
              },
              '#withCumulativeBytesScanned': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCumulativeBytesScanned(value): {
                cumulative_bytes_scanned: value,
              },
              '#withDataWrites': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDataWrites(value): {
                data_writes: value,
              },
              '#withExecutionTimeInMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withExecutionTimeInMillis(value): {
                execution_time_in_millis: value,
              },
              '#withQueryResultRows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withQueryResultRows(value): {
                query_result_rows: value,
              },
              '#withRecordsIngested': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withRecordsIngested(value): {
                records_ingested: value,
              },
            },
          '#withFailureReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFailureReason(value): {
            failure_reason: value,
          },
          '#withInvocationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInvocationTime(value): {
            invocation_time: value,
          },
          '#withQueryInsightsResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryInsightsResponse(value): {
            query_insights_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withQueryInsightsResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryInsightsResponseMixin(value): {
            query_insights_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          query_insights_response+:
            {
              '#': { help: '', name: 'query_insights_response' },
              '#withOutputBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withOutputBytes(value): {
                output_bytes: value,
              },
              '#withOutputRows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withOutputRows(value): {
                output_rows: value,
              },
              '#withQuerySpatialCoverage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQuerySpatialCoverage(value): {
                query_spatial_coverage:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withQuerySpatialCoverageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQuerySpatialCoverageMixin(value): {
                query_spatial_coverage+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              query_spatial_coverage+:
                {
                  '#': { help: '', name: 'query_spatial_coverage' },
                  '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMax(value): {
                    max:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMaxMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMaxMixin(value): {
                    max+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  max+:
                    {
                      '#': { help: '', name: 'max' },
                      '#withPartitionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPartitionKey(value): {
                        partition_key:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPartitionKeyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPartitionKeyMixin(value): {
                        partition_key+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTableArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withTableArn(value): {
                        table_arn: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
              '#withQueryTableCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withQueryTableCount(value): {
                query_table_count: value,
              },
              '#withQueryTemporalRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQueryTemporalRange(value): {
                query_temporal_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withQueryTemporalRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQueryTemporalRangeMixin(value): {
                query_temporal_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              query_temporal_range+:
                {
                  '#': { help: '', name: 'query_temporal_range' },
                  '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMax(value): {
                    max:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMaxMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMaxMixin(value): {
                    max+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  max+:
                    {
                      '#': { help: '', name: 'max' },
                      '#withTableArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withTableArn(value): {
                        table_arn: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
            },
          '#withRunStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRunStatus(value): {
            run_status: value,
          },
          '#withTriggerTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTriggerTime(value): {
            trigger_time: value,
          },
        },
      '#withScheduleConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withScheduleConfiguration(value): {
        schedule_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withScheduleConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withScheduleConfigurationMixin(value): {
        schedule_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      schedule_configuration+:
        {
          '#': { help: '', name: 'schedule_configuration' },
          '#withScheduleExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withScheduleExpression(value): {
            schedule_expression: value,
          },
        },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTargetConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTargetConfiguration(value): {
        target_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTargetConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTargetConfigurationMixin(value): {
        target_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      target_configuration+:
        {
          '#': { help: '', name: 'target_configuration' },
          '#withTimestreamConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTimestreamConfiguration(value): {
            timestream_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTimestreamConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTimestreamConfigurationMixin(value): {
            timestream_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          timestream_configuration+:
            {
              '#': { help: '', name: 'timestream_configuration' },
              '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatabaseName(value): {
                database_name: value,
              },
              '#withDimensionMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDimensionMapping(value): {
                dimension_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDimensionMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDimensionMappingMixin(value): {
                dimension_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dimension_mapping+:
                {
                  '#': { help: '', name: 'dimension_mapping' },
                  '#withDimensionValueType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDimensionValueType(value): {
                    dimension_value_type: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                },
              '#withMeasureNameColumn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMeasureNameColumn(value): {
                measure_name_column: value,
              },
              '#withMixedMeasureMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMixedMeasureMapping(value): {
                mixed_measure_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMixedMeasureMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMixedMeasureMappingMixin(value): {
                mixed_measure_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              mixed_measure_mapping+:
                {
                  '#': { help: '', name: 'mixed_measure_mapping' },
                  '#withMeasureName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMeasureName(value): {
                    measure_name: value,
                  },
                  '#withMeasureValueType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMeasureValueType(value): {
                    measure_value_type: value,
                  },
                  '#withMultiMeasureAttributeMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMultiMeasureAttributeMapping(value): {
                    multi_measure_attribute_mapping:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMultiMeasureAttributeMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMultiMeasureAttributeMappingMixin(value): {
                    multi_measure_attribute_mapping+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  multi_measure_attribute_mapping+:
                    {
                      '#': { help: '', name: 'multi_measure_attribute_mapping' },
                      '#withMeasureValueType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMeasureValueType(value): {
                        measure_value_type: value,
                      },
                      '#withSourceColumn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSourceColumn(value): {
                        source_column: value,
                      },
                      '#withTargetMultiMeasureAttributeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withTargetMultiMeasureAttributeName(value): {
                        target_multi_measure_attribute_name: value,
                      },
                    },
                  '#withSourceColumn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSourceColumn(value): {
                    source_column: value,
                  },
                  '#withTargetMeasureName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTargetMeasureName(value): {
                    target_measure_name: value,
                  },
                },
              '#withMultiMeasureMappings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMultiMeasureMappings(value): {
                multi_measure_mappings:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMultiMeasureMappingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMultiMeasureMappingsMixin(value): {
                multi_measure_mappings+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              multi_measure_mappings+:
                {
                  '#': { help: '', name: 'multi_measure_mappings' },
                  '#withMultiMeasureAttributeMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMultiMeasureAttributeMapping(value): {
                    multi_measure_attribute_mapping:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMultiMeasureAttributeMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMultiMeasureAttributeMappingMixin(value): {
                    multi_measure_attribute_mapping+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  multi_measure_attribute_mapping+:
                    {
                      '#': { help: '', name: 'multi_measure_attribute_mapping' },
                      '#withMeasureValueType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMeasureValueType(value): {
                        measure_value_type: value,
                      },
                      '#withSourceColumn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSourceColumn(value): {
                        source_column: value,
                      },
                      '#withTargetMultiMeasureAttributeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withTargetMultiMeasureAttributeName(value): {
                        target_multi_measure_attribute_name: value,
                      },
                    },
                  '#withTargetMultiMeasureName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTargetMultiMeasureName(value): {
                    target_multi_measure_name: value,
                  },
                },
              '#withTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTableName(value): {
                table_name: value,
              },
              '#withTimeColumn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeColumn(value): {
                time_column: value,
              },
            },
        },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
}
