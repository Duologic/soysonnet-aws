// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'pipes',
  },
  aws_pipes_pipe:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'role_arn', type: 'string' }, { default: null, enums: null, name: 'source', type: 'string' }, { default: null, enums: null, name: 'target', type: 'string' }], help: '' } },
      new(tf_resource_key, role_arn, source, target):
        self.withTfResourceKey(tf_resource_key)
        + self.withRoleArn(role_arn)
        + self.withSource(source)
        + self.withTarget(target),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_pipes_pipe: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDesiredState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDesiredState(value): {
        desired_state: value,
      },
      '#withEnrichment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEnrichment(value): {
        enrichment: value,
      },
      '#withEnrichmentParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEnrichmentParameters(value): {
        enrichment_parameters: value,
      },
      '#withEnrichmentParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEnrichmentParametersMixin(value): {
        enrichment_parameters+: value,
      },
      enrichment_parameters+:
        {
          '#withHttpParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpParameters(value): {
            enrichment_parameters+: {
              http_parameters: value,
            },
          },
          '#withHttpParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpParametersMixin(value): {
            enrichment_parameters+: {
              http_parameters+: value,
            },
          },
          http_parameters+:
            {
              '#withHeaderParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHeaderParameters(value): {
                enrichment_parameters+: {
                  http_parameters+: {
                    header_parameters: value,
                  },
                },
              },
              '#withHeaderParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHeaderParametersMixin(value): {
                enrichment_parameters+: {
                  http_parameters+: {
                    header_parameters+: value,
                  },
                },
              },
              '#withPathParameterValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPathParameterValues(value): {
                enrichment_parameters+: {
                  http_parameters+: {
                    path_parameter_values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPathParameterValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPathParameterValuesMixin(value): {
                enrichment_parameters+: {
                  http_parameters+: {
                    path_parameter_values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withQueryStringParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withQueryStringParameters(value): {
                enrichment_parameters+: {
                  http_parameters+: {
                    query_string_parameters: value,
                  },
                },
              },
              '#withQueryStringParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withQueryStringParametersMixin(value): {
                enrichment_parameters+: {
                  http_parameters+: {
                    query_string_parameters+: value,
                  },
                },
              },
            },
          '#withInputTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInputTemplate(value): {
            enrichment_parameters+: {
              input_template: value,
            },
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyIdentifier(value): {
        kms_key_identifier: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLogConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLogConfiguration(value): {
        log_configuration: value,
      },
      '#withLogConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLogConfigurationMixin(value): {
        log_configuration+: value,
      },
      log_configuration+:
        {
          '#withCloudwatchLogsLogDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLogsLogDestination(value): {
            log_configuration+: {
              cloudwatch_logs_log_destination: value,
            },
          },
          '#withCloudwatchLogsLogDestinationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLogsLogDestinationMixin(value): {
            log_configuration+: {
              cloudwatch_logs_log_destination+: value,
            },
          },
          cloudwatch_logs_log_destination+:
            {
              '#withLogGroupArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupArn(value): {
                log_configuration+: {
                  cloudwatch_logs_log_destination+: {
                    log_group_arn: value,
                  },
                },
              },
            },
          '#withFirehoseLogDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFirehoseLogDestination(value): {
            log_configuration+: {
              firehose_log_destination: value,
            },
          },
          '#withFirehoseLogDestinationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFirehoseLogDestinationMixin(value): {
            log_configuration+: {
              firehose_log_destination+: value,
            },
          },
          firehose_log_destination+:
            {
              '#withDeliveryStreamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDeliveryStreamArn(value): {
                log_configuration+: {
                  firehose_log_destination+: {
                    delivery_stream_arn: value,
                  },
                },
              },
            },
          '#withIncludeExecutionData': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIncludeExecutionData(value): {
            log_configuration+: {
              include_execution_data:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIncludeExecutionDataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIncludeExecutionDataMixin(value): {
            log_configuration+: {
              include_execution_data+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLevel(value): {
            log_configuration+: {
              level: value,
            },
          },
          '#withS3LogDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3LogDestination(value): {
            log_configuration+: {
              s3_log_destination: value,
            },
          },
          '#withS3LogDestinationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3LogDestinationMixin(value): {
            log_configuration+: {
              s3_log_destination+: value,
            },
          },
          s3_log_destination+:
            {
              '#withBucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketName(value): {
                log_configuration+: {
                  s3_log_destination+: {
                    bucket_name: value,
                  },
                },
              },
              '#withBucketOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketOwner(value): {
                log_configuration+: {
                  s3_log_destination+: {
                    bucket_owner: value,
                  },
                },
              },
              '#withOutputFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOutputFormat(value): {
                log_configuration+: {
                  s3_log_destination+: {
                    output_format: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                log_configuration+: {
                  s3_log_destination+: {
                    prefix: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNamePrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNamePrefix(value): {
        name_prefix: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSource(value): {
        source: value,
      },
      '#withSourceParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSourceParameters(value): {
        source_parameters: value,
      },
      '#withSourceParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSourceParametersMixin(value): {
        source_parameters+: value,
      },
      source_parameters+:
        {
          '#withActivemqBrokerParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withActivemqBrokerParameters(value): {
            source_parameters+: {
              activemq_broker_parameters: value,
            },
          },
          '#withActivemqBrokerParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withActivemqBrokerParametersMixin(value): {
            source_parameters+: {
              activemq_broker_parameters+: value,
            },
          },
          activemq_broker_parameters+:
            {
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                source_parameters+: {
                  activemq_broker_parameters+: {
                    batch_size: value,
                  },
                },
              },
              '#withCredentials': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentials(value): {
                source_parameters+: {
                  activemq_broker_parameters+: {
                    credentials: value,
                  },
                },
              },
              '#withCredentialsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentialsMixin(value): {
                source_parameters+: {
                  activemq_broker_parameters+: {
                    credentials+: value,
                  },
                },
              },
              credentials+:
                {
                  '#withBasicAuth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withBasicAuth(value): {
                    source_parameters+: {
                      activemq_broker_parameters+: {
                        credentials+: {
                          basic_auth: value,
                        },
                      },
                    },
                  },
                },
              '#withMaximumBatchingWindowInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumBatchingWindowInSeconds(value): {
                source_parameters+: {
                  activemq_broker_parameters+: {
                    maximum_batching_window_in_seconds: value,
                  },
                },
              },
              '#withQueueName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withQueueName(value): {
                source_parameters+: {
                  activemq_broker_parameters+: {
                    queue_name: value,
                  },
                },
              },
            },
          '#withDynamodbStreamParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDynamodbStreamParameters(value): {
            source_parameters+: {
              dynamodb_stream_parameters: value,
            },
          },
          '#withDynamodbStreamParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDynamodbStreamParametersMixin(value): {
            source_parameters+: {
              dynamodb_stream_parameters+: value,
            },
          },
          dynamodb_stream_parameters+:
            {
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    batch_size: value,
                  },
                },
              },
              '#withDeadLetterConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDeadLetterConfig(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    dead_letter_config: value,
                  },
                },
              },
              '#withDeadLetterConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDeadLetterConfigMixin(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    dead_letter_config+: value,
                  },
                },
              },
              dead_letter_config+:
                {
                  '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withArn(value): {
                    source_parameters+: {
                      dynamodb_stream_parameters+: {
                        dead_letter_config+: {
                          arn: value,
                        },
                      },
                    },
                  },
                },
              '#withMaximumBatchingWindowInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumBatchingWindowInSeconds(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    maximum_batching_window_in_seconds: value,
                  },
                },
              },
              '#withMaximumRecordAgeInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumRecordAgeInSeconds(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    maximum_record_age_in_seconds: value,
                  },
                },
              },
              '#withMaximumRetryAttempts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumRetryAttempts(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    maximum_retry_attempts: value,
                  },
                },
              },
              '#withOnPartialBatchItemFailure': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnPartialBatchItemFailure(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    on_partial_batch_item_failure: value,
                  },
                },
              },
              '#withParallelizationFactor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withParallelizationFactor(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    parallelization_factor: value,
                  },
                },
              },
              '#withStartingPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStartingPosition(value): {
                source_parameters+: {
                  dynamodb_stream_parameters+: {
                    starting_position: value,
                  },
                },
              },
            },
          '#withFilterCriteria': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFilterCriteria(value): {
            source_parameters+: {
              filter_criteria: value,
            },
          },
          '#withFilterCriteriaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFilterCriteriaMixin(value): {
            source_parameters+: {
              filter_criteria+: value,
            },
          },
          filter_criteria+:
            {
              '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFilter(value): {
                source_parameters+: {
                  filter_criteria+: {
                    filter:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFilterMixin(value): {
                source_parameters+: {
                  filter_criteria+: {
                    filter+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              filter+:
                {
                  '#': { help: '', name: 'filter' },
                  '#withPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPattern(value): {
                    pattern: value,
                  },
                },
            },
          '#withKinesisStreamParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStreamParameters(value): {
            source_parameters+: {
              kinesis_stream_parameters: value,
            },
          },
          '#withKinesisStreamParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStreamParametersMixin(value): {
            source_parameters+: {
              kinesis_stream_parameters+: value,
            },
          },
          kinesis_stream_parameters+:
            {
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    batch_size: value,
                  },
                },
              },
              '#withDeadLetterConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDeadLetterConfig(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    dead_letter_config: value,
                  },
                },
              },
              '#withDeadLetterConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDeadLetterConfigMixin(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    dead_letter_config+: value,
                  },
                },
              },
              dead_letter_config+:
                {
                  '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withArn(value): {
                    source_parameters+: {
                      kinesis_stream_parameters+: {
                        dead_letter_config+: {
                          arn: value,
                        },
                      },
                    },
                  },
                },
              '#withMaximumBatchingWindowInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumBatchingWindowInSeconds(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    maximum_batching_window_in_seconds: value,
                  },
                },
              },
              '#withMaximumRecordAgeInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumRecordAgeInSeconds(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    maximum_record_age_in_seconds: value,
                  },
                },
              },
              '#withMaximumRetryAttempts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumRetryAttempts(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    maximum_retry_attempts: value,
                  },
                },
              },
              '#withOnPartialBatchItemFailure': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnPartialBatchItemFailure(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    on_partial_batch_item_failure: value,
                  },
                },
              },
              '#withParallelizationFactor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withParallelizationFactor(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    parallelization_factor: value,
                  },
                },
              },
              '#withStartingPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStartingPosition(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    starting_position: value,
                  },
                },
              },
              '#withStartingPositionTimestamp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStartingPositionTimestamp(value): {
                source_parameters+: {
                  kinesis_stream_parameters+: {
                    starting_position_timestamp: value,
                  },
                },
              },
            },
          '#withManagedStreamingKafkaParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withManagedStreamingKafkaParameters(value): {
            source_parameters+: {
              managed_streaming_kafka_parameters: value,
            },
          },
          '#withManagedStreamingKafkaParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withManagedStreamingKafkaParametersMixin(value): {
            source_parameters+: {
              managed_streaming_kafka_parameters+: value,
            },
          },
          managed_streaming_kafka_parameters+:
            {
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                source_parameters+: {
                  managed_streaming_kafka_parameters+: {
                    batch_size: value,
                  },
                },
              },
              '#withConsumerGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withConsumerGroupId(value): {
                source_parameters+: {
                  managed_streaming_kafka_parameters+: {
                    consumer_group_id: value,
                  },
                },
              },
              '#withCredentials': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentials(value): {
                source_parameters+: {
                  managed_streaming_kafka_parameters+: {
                    credentials: value,
                  },
                },
              },
              '#withCredentialsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentialsMixin(value): {
                source_parameters+: {
                  managed_streaming_kafka_parameters+: {
                    credentials+: value,
                  },
                },
              },
              credentials+:
                {
                  '#withClientCertificateTlsAuth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withClientCertificateTlsAuth(value): {
                    source_parameters+: {
                      managed_streaming_kafka_parameters+: {
                        credentials+: {
                          client_certificate_tls_auth: value,
                        },
                      },
                    },
                  },
                  '#withSaslScram512Auth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSaslScram512Auth(value): {
                    source_parameters+: {
                      managed_streaming_kafka_parameters+: {
                        credentials+: {
                          sasl_scram_512_auth: value,
                        },
                      },
                    },
                  },
                },
              '#withMaximumBatchingWindowInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumBatchingWindowInSeconds(value): {
                source_parameters+: {
                  managed_streaming_kafka_parameters+: {
                    maximum_batching_window_in_seconds: value,
                  },
                },
              },
              '#withStartingPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStartingPosition(value): {
                source_parameters+: {
                  managed_streaming_kafka_parameters+: {
                    starting_position: value,
                  },
                },
              },
              '#withTopicName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTopicName(value): {
                source_parameters+: {
                  managed_streaming_kafka_parameters+: {
                    topic_name: value,
                  },
                },
              },
            },
          '#withRabbitmqBrokerParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRabbitmqBrokerParameters(value): {
            source_parameters+: {
              rabbitmq_broker_parameters: value,
            },
          },
          '#withRabbitmqBrokerParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRabbitmqBrokerParametersMixin(value): {
            source_parameters+: {
              rabbitmq_broker_parameters+: value,
            },
          },
          rabbitmq_broker_parameters+:
            {
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                source_parameters+: {
                  rabbitmq_broker_parameters+: {
                    batch_size: value,
                  },
                },
              },
              '#withCredentials': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentials(value): {
                source_parameters+: {
                  rabbitmq_broker_parameters+: {
                    credentials: value,
                  },
                },
              },
              '#withCredentialsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentialsMixin(value): {
                source_parameters+: {
                  rabbitmq_broker_parameters+: {
                    credentials+: value,
                  },
                },
              },
              credentials+:
                {
                  '#withBasicAuth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withBasicAuth(value): {
                    source_parameters+: {
                      rabbitmq_broker_parameters+: {
                        credentials+: {
                          basic_auth: value,
                        },
                      },
                    },
                  },
                },
              '#withMaximumBatchingWindowInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumBatchingWindowInSeconds(value): {
                source_parameters+: {
                  rabbitmq_broker_parameters+: {
                    maximum_batching_window_in_seconds: value,
                  },
                },
              },
              '#withQueueName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withQueueName(value): {
                source_parameters+: {
                  rabbitmq_broker_parameters+: {
                    queue_name: value,
                  },
                },
              },
              '#withVirtualHost': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVirtualHost(value): {
                source_parameters+: {
                  rabbitmq_broker_parameters+: {
                    virtual_host: value,
                  },
                },
              },
            },
          '#withSelfManagedKafkaParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSelfManagedKafkaParameters(value): {
            source_parameters+: {
              self_managed_kafka_parameters: value,
            },
          },
          '#withSelfManagedKafkaParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSelfManagedKafkaParametersMixin(value): {
            source_parameters+: {
              self_managed_kafka_parameters+: value,
            },
          },
          self_managed_kafka_parameters+:
            {
              '#withAdditionalBootstrapServers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAdditionalBootstrapServers(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    additional_bootstrap_servers:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAdditionalBootstrapServersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAdditionalBootstrapServersMixin(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    additional_bootstrap_servers+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    batch_size: value,
                  },
                },
              },
              '#withConsumerGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withConsumerGroupId(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    consumer_group_id: value,
                  },
                },
              },
              '#withCredentials': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentials(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    credentials: value,
                  },
                },
              },
              '#withCredentialsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCredentialsMixin(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    credentials+: value,
                  },
                },
              },
              credentials+:
                {
                  '#withBasicAuth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withBasicAuth(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        credentials+: {
                          basic_auth: value,
                        },
                      },
                    },
                  },
                  '#withClientCertificateTlsAuth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withClientCertificateTlsAuth(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        credentials+: {
                          client_certificate_tls_auth: value,
                        },
                      },
                    },
                  },
                  '#withSaslScram256Auth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSaslScram256Auth(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        credentials+: {
                          sasl_scram_256_auth: value,
                        },
                      },
                    },
                  },
                  '#withSaslScram512Auth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSaslScram512Auth(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        credentials+: {
                          sasl_scram_512_auth: value,
                        },
                      },
                    },
                  },
                },
              '#withMaximumBatchingWindowInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumBatchingWindowInSeconds(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    maximum_batching_window_in_seconds: value,
                  },
                },
              },
              '#withServerRootCaCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withServerRootCaCertificate(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    server_root_ca_certificate: value,
                  },
                },
              },
              '#withStartingPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStartingPosition(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    starting_position: value,
                  },
                },
              },
              '#withTopicName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTopicName(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    topic_name: value,
                  },
                },
              },
              '#withVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVpc(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    vpc: value,
                  },
                },
              },
              '#withVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVpcMixin(value): {
                source_parameters+: {
                  self_managed_kafka_parameters+: {
                    vpc+: value,
                  },
                },
              },
              vpc+:
                {
                  '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecurityGroups(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        vpc+: {
                          security_groups:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecurityGroupsMixin(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        vpc+: {
                          security_groups+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSubnets(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        vpc+: {
                          subnets:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSubnetsMixin(value): {
                    source_parameters+: {
                      self_managed_kafka_parameters+: {
                        vpc+: {
                          subnets+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
            },
          '#withSqsQueueParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSqsQueueParameters(value): {
            source_parameters+: {
              sqs_queue_parameters: value,
            },
          },
          '#withSqsQueueParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSqsQueueParametersMixin(value): {
            source_parameters+: {
              sqs_queue_parameters+: value,
            },
          },
          sqs_queue_parameters+:
            {
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                source_parameters+: {
                  sqs_queue_parameters+: {
                    batch_size: value,
                  },
                },
              },
              '#withMaximumBatchingWindowInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumBatchingWindowInSeconds(value): {
                source_parameters+: {
                  sqs_queue_parameters+: {
                    maximum_batching_window_in_seconds: value,
                  },
                },
              },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTarget(value): {
        target: value,
      },
      '#withTargetParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTargetParameters(value): {
        target_parameters: value,
      },
      '#withTargetParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTargetParametersMixin(value): {
        target_parameters+: value,
      },
      target_parameters+:
        {
          '#withBatchJobParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBatchJobParameters(value): {
            target_parameters+: {
              batch_job_parameters: value,
            },
          },
          '#withBatchJobParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBatchJobParametersMixin(value): {
            target_parameters+: {
              batch_job_parameters+: value,
            },
          },
          batch_job_parameters+:
            {
              '#withArrayProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withArrayProperties(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    array_properties: value,
                  },
                },
              },
              '#withArrayPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withArrayPropertiesMixin(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    array_properties+: value,
                  },
                },
              },
              array_properties+:
                {
                  '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withSize(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        array_properties+: {
                          size: value,
                        },
                      },
                    },
                  },
                },
              '#withContainerOverrides': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withContainerOverrides(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    container_overrides: value,
                  },
                },
              },
              '#withContainerOverridesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withContainerOverridesMixin(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    container_overrides+: value,
                  },
                },
              },
              container_overrides+:
                {
                  '#withCommand': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommand(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        container_overrides+: {
                          command:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withCommandMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommandMixin(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        container_overrides+: {
                          command+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnvironment(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        container_overrides+: {
                          environment:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnvironmentMixin(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        container_overrides+: {
                          environment+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  environment+:
                    {
                      '#': { help: '', name: 'environment' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        container_overrides+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withResourceRequirement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResourceRequirement(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        container_overrides+: {
                          resource_requirement:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withResourceRequirementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResourceRequirementMixin(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        container_overrides+: {
                          resource_requirement+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  resource_requirement+:
                    {
                      '#': { help: '', name: 'resource_requirement' },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
              '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDependsOn(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    depends_on:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDependsOnMixin(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    depends_on+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              depends_on+:
                {
                  '#': { help: '', name: 'depends_on' },
                  '#withJobId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withJobId(value): {
                    job_id: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withJobDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withJobDefinition(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    job_definition: value,
                  },
                },
              },
              '#withJobName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withJobName(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    job_name: value,
                  },
                },
              },
              '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParameters(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    parameters: value,
                  },
                },
              },
              '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParametersMixin(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    parameters+: value,
                  },
                },
              },
              '#withRetryStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryStrategy(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    retry_strategy: value,
                  },
                },
              },
              '#withRetryStrategyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryStrategyMixin(value): {
                target_parameters+: {
                  batch_job_parameters+: {
                    retry_strategy+: value,
                  },
                },
              },
              retry_strategy+:
                {
                  '#withAttempts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withAttempts(value): {
                    target_parameters+: {
                      batch_job_parameters+: {
                        retry_strategy+: {
                          attempts: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withCloudwatchLogsParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLogsParameters(value): {
            target_parameters+: {
              cloudwatch_logs_parameters: value,
            },
          },
          '#withCloudwatchLogsParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLogsParametersMixin(value): {
            target_parameters+: {
              cloudwatch_logs_parameters+: value,
            },
          },
          cloudwatch_logs_parameters+:
            {
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                target_parameters+: {
                  cloudwatch_logs_parameters+: {
                    log_stream_name: value,
                  },
                },
              },
              '#withTimestamp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimestamp(value): {
                target_parameters+: {
                  cloudwatch_logs_parameters+: {
                    timestamp: value,
                  },
                },
              },
            },
          '#withEcsTaskParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEcsTaskParameters(value): {
            target_parameters+: {
              ecs_task_parameters: value,
            },
          },
          '#withEcsTaskParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEcsTaskParametersMixin(value): {
            target_parameters+: {
              ecs_task_parameters+: value,
            },
          },
          ecs_task_parameters+:
            {
              '#withCapacityProviderStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCapacityProviderStrategy(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    capacity_provider_strategy:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCapacityProviderStrategyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCapacityProviderStrategyMixin(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    capacity_provider_strategy+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              capacity_provider_strategy+:
                {
                  '#': { help: '', name: 'capacity_provider_strategy' },
                  '#withBase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withBase(value): {
                    base: value,
                  },
                  '#withCapacityProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCapacityProvider(value): {
                    capacity_provider: value,
                  },
                  '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withWeight(value): {
                    weight: value,
                  },
                },
              '#withEnableEcsManagedTags': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnableEcsManagedTags(value=true): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    enable_ecs_managed_tags: value,
                  },
                },
              },
              '#withEnableExecuteCommand': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnableExecuteCommand(value=true): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    enable_execute_command: value,
                  },
                },
              },
              '#withGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGroup(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    group: value,
                  },
                },
              },
              '#withLaunchType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLaunchType(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    launch_type: value,
                  },
                },
              },
              '#withNetworkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withNetworkConfiguration(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    network_configuration: value,
                  },
                },
              },
              '#withNetworkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withNetworkConfigurationMixin(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    network_configuration+: value,
                  },
                },
              },
              network_configuration+:
                {
                  '#withAwsVpcConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withAwsVpcConfiguration(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        network_configuration+: {
                          aws_vpc_configuration: value,
                        },
                      },
                    },
                  },
                  '#withAwsVpcConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withAwsVpcConfigurationMixin(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        network_configuration+: {
                          aws_vpc_configuration+: value,
                        },
                      },
                    },
                  },
                  aws_vpc_configuration+:
                    {
                      '#withAssignPublicIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withAssignPublicIp(value): {
                        target_parameters+: {
                          ecs_task_parameters+: {
                            network_configuration+: {
                              aws_vpc_configuration+: {
                                assign_public_ip: value,
                              },
                            },
                          },
                        },
                      },
                      '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSecurityGroups(value): {
                        target_parameters+: {
                          ecs_task_parameters+: {
                            network_configuration+: {
                              aws_vpc_configuration+: {
                                security_groups:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                      '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSecurityGroupsMixin(value): {
                        target_parameters+: {
                          ecs_task_parameters+: {
                            network_configuration+: {
                              aws_vpc_configuration+: {
                                security_groups+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                      '#withSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSubnets(value): {
                        target_parameters+: {
                          ecs_task_parameters+: {
                            network_configuration+: {
                              aws_vpc_configuration+: {
                                subnets:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                      '#withSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSubnetsMixin(value): {
                        target_parameters+: {
                          ecs_task_parameters+: {
                            network_configuration+: {
                              aws_vpc_configuration+: {
                                subnets+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withOverrides': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOverrides(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    overrides: value,
                  },
                },
              },
              '#withOverridesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOverridesMixin(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    overrides+: value,
                  },
                },
              },
              overrides+:
                {
                  '#withContainerOverride': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withContainerOverride(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          container_override:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withContainerOverrideMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withContainerOverrideMixin(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          container_override+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  container_override+:
                    {
                      '#': { help: '', name: 'container_override' },
                      '#withCommand': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCommand(value): {
                        command:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCommandMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCommandMixin(value): {
                        command+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withCpu(value): {
                        cpu: value,
                      },
                      '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withEnvironment(value): {
                        environment:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withEnvironmentMixin(value): {
                        environment+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      environment+:
                        {
                          '#': { help: '', name: 'environment' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withEnvironmentFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withEnvironmentFile(value): {
                        environment_file:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withEnvironmentFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withEnvironmentFileMixin(value): {
                        environment_file+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      environment_file+:
                        {
                          '#': { help: '', name: 'environment_file' },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMemory(value): {
                        memory: value,
                      },
                      '#withMemoryReservation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMemoryReservation(value): {
                        memory_reservation: value,
                      },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withResourceRequirement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResourceRequirement(value): {
                        resource_requirement:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withResourceRequirementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResourceRequirementMixin(value): {
                        resource_requirement+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      resource_requirement+:
                        {
                          '#': { help: '', name: 'resource_requirement' },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withCpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCpu(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          cpu: value,
                        },
                      },
                    },
                  },
                  '#withEphemeralStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withEphemeralStorage(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          ephemeral_storage: value,
                        },
                      },
                    },
                  },
                  '#withEphemeralStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withEphemeralStorageMixin(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          ephemeral_storage+: value,
                        },
                      },
                    },
                  },
                  ephemeral_storage+:
                    {
                      '#withSizeInGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withSizeInGib(value): {
                        target_parameters+: {
                          ecs_task_parameters+: {
                            overrides+: {
                              ephemeral_storage+: {
                                size_in_gib: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withExecutionRoleArn(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          execution_role_arn: value,
                        },
                      },
                    },
                  },
                  '#withInferenceAcceleratorOverride': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withInferenceAcceleratorOverride(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          inference_accelerator_override:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withInferenceAcceleratorOverrideMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withInferenceAcceleratorOverrideMixin(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          inference_accelerator_override+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  inference_accelerator_override+:
                    {
                      '#': { help: '', name: 'inference_accelerator_override' },
                      '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withDeviceName(value): {
                        device_name: value,
                      },
                      '#withDeviceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withDeviceType(value): {
                        device_type: value,
                      },
                    },
                  '#withMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMemory(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          memory: value,
                        },
                      },
                    },
                  },
                  '#withTaskRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTaskRoleArn(value): {
                    target_parameters+: {
                      ecs_task_parameters+: {
                        overrides+: {
                          task_role_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withPlacementConstraint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPlacementConstraint(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    placement_constraint:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPlacementConstraintMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPlacementConstraintMixin(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    placement_constraint+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              placement_constraint+:
                {
                  '#': { help: '', name: 'placement_constraint' },
                  '#withExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withExpression(value): {
                    expression: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withPlacementStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPlacementStrategy(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    placement_strategy:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPlacementStrategyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPlacementStrategyMixin(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    placement_strategy+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              placement_strategy+:
                {
                  '#': { help: '', name: 'placement_strategy' },
                  '#withField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withField(value): {
                    field: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withPlatformVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPlatformVersion(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    platform_version: value,
                  },
                },
              },
              '#withPropagateTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPropagateTags(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    propagate_tags: value,
                  },
                },
              },
              '#withReferenceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withReferenceId(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    reference_id: value,
                  },
                },
              },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    tags: value,
                  },
                },
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    tags+: value,
                  },
                },
              },
              '#withTaskCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withTaskCount(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    task_count: value,
                  },
                },
              },
              '#withTaskDefinitionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTaskDefinitionArn(value): {
                target_parameters+: {
                  ecs_task_parameters+: {
                    task_definition_arn: value,
                  },
                },
              },
            },
          '#withEventbridgeEventBusParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEventbridgeEventBusParameters(value): {
            target_parameters+: {
              eventbridge_event_bus_parameters: value,
            },
          },
          '#withEventbridgeEventBusParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEventbridgeEventBusParametersMixin(value): {
            target_parameters+: {
              eventbridge_event_bus_parameters+: value,
            },
          },
          eventbridge_event_bus_parameters+:
            {
              '#withDetailType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDetailType(value): {
                target_parameters+: {
                  eventbridge_event_bus_parameters+: {
                    detail_type: value,
                  },
                },
              },
              '#withEndpointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEndpointId(value): {
                target_parameters+: {
                  eventbridge_event_bus_parameters+: {
                    endpoint_id: value,
                  },
                },
              },
              '#withResources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withResources(value): {
                target_parameters+: {
                  eventbridge_event_bus_parameters+: {
                    resources:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withResourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withResourcesMixin(value): {
                target_parameters+: {
                  eventbridge_event_bus_parameters+: {
                    resources+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSource(value): {
                target_parameters+: {
                  eventbridge_event_bus_parameters+: {
                    source: value,
                  },
                },
              },
              '#withTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTime(value): {
                target_parameters+: {
                  eventbridge_event_bus_parameters+: {
                    time: value,
                  },
                },
              },
            },
          '#withHttpParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpParameters(value): {
            target_parameters+: {
              http_parameters: value,
            },
          },
          '#withHttpParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpParametersMixin(value): {
            target_parameters+: {
              http_parameters+: value,
            },
          },
          http_parameters+:
            {
              '#withHeaderParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHeaderParameters(value): {
                target_parameters+: {
                  http_parameters+: {
                    header_parameters: value,
                  },
                },
              },
              '#withHeaderParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHeaderParametersMixin(value): {
                target_parameters+: {
                  http_parameters+: {
                    header_parameters+: value,
                  },
                },
              },
              '#withPathParameterValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPathParameterValues(value): {
                target_parameters+: {
                  http_parameters+: {
                    path_parameter_values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPathParameterValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPathParameterValuesMixin(value): {
                target_parameters+: {
                  http_parameters+: {
                    path_parameter_values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withQueryStringParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withQueryStringParameters(value): {
                target_parameters+: {
                  http_parameters+: {
                    query_string_parameters: value,
                  },
                },
              },
              '#withQueryStringParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withQueryStringParametersMixin(value): {
                target_parameters+: {
                  http_parameters+: {
                    query_string_parameters+: value,
                  },
                },
              },
            },
          '#withInputTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInputTemplate(value): {
            target_parameters+: {
              input_template: value,
            },
          },
          '#withKinesisStreamParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStreamParameters(value): {
            target_parameters+: {
              kinesis_stream_parameters: value,
            },
          },
          '#withKinesisStreamParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStreamParametersMixin(value): {
            target_parameters+: {
              kinesis_stream_parameters+: value,
            },
          },
          kinesis_stream_parameters+:
            {
              '#withPartitionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPartitionKey(value): {
                target_parameters+: {
                  kinesis_stream_parameters+: {
                    partition_key: value,
                  },
                },
              },
            },
          '#withLambdaFunctionParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLambdaFunctionParameters(value): {
            target_parameters+: {
              lambda_function_parameters: value,
            },
          },
          '#withLambdaFunctionParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLambdaFunctionParametersMixin(value): {
            target_parameters+: {
              lambda_function_parameters+: value,
            },
          },
          lambda_function_parameters+:
            {
              '#withInvocationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInvocationType(value): {
                target_parameters+: {
                  lambda_function_parameters+: {
                    invocation_type: value,
                  },
                },
              },
            },
          '#withRedshiftDataParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRedshiftDataParameters(value): {
            target_parameters+: {
              redshift_data_parameters: value,
            },
          },
          '#withRedshiftDataParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRedshiftDataParametersMixin(value): {
            target_parameters+: {
              redshift_data_parameters+: value,
            },
          },
          redshift_data_parameters+:
            {
              '#withDatabase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatabase(value): {
                target_parameters+: {
                  redshift_data_parameters+: {
                    database: value,
                  },
                },
              },
              '#withDbUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDbUser(value): {
                target_parameters+: {
                  redshift_data_parameters+: {
                    db_user: value,
                  },
                },
              },
              '#withSecretManagerArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecretManagerArn(value): {
                target_parameters+: {
                  redshift_data_parameters+: {
                    secret_manager_arn: value,
                  },
                },
              },
              '#withSqls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSqls(value): {
                target_parameters+: {
                  redshift_data_parameters+: {
                    sqls:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSqlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSqlsMixin(value): {
                target_parameters+: {
                  redshift_data_parameters+: {
                    sqls+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withStatementName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStatementName(value): {
                target_parameters+: {
                  redshift_data_parameters+: {
                    statement_name: value,
                  },
                },
              },
              '#withWithEvent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withWithEvent(value=true): {
                target_parameters+: {
                  redshift_data_parameters+: {
                    with_event: value,
                  },
                },
              },
            },
          '#withSagemakerPipelineParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSagemakerPipelineParameters(value): {
            target_parameters+: {
              sagemaker_pipeline_parameters: value,
            },
          },
          '#withSagemakerPipelineParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSagemakerPipelineParametersMixin(value): {
            target_parameters+: {
              sagemaker_pipeline_parameters+: value,
            },
          },
          sagemaker_pipeline_parameters+:
            {
              '#withPipelineParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPipelineParameter(value): {
                target_parameters+: {
                  sagemaker_pipeline_parameters+: {
                    pipeline_parameter:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPipelineParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPipelineParameterMixin(value): {
                target_parameters+: {
                  sagemaker_pipeline_parameters+: {
                    pipeline_parameter+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              pipeline_parameter+:
                {
                  '#': { help: '', name: 'pipeline_parameter' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
            },
          '#withSqsQueueParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSqsQueueParameters(value): {
            target_parameters+: {
              sqs_queue_parameters: value,
            },
          },
          '#withSqsQueueParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSqsQueueParametersMixin(value): {
            target_parameters+: {
              sqs_queue_parameters+: value,
            },
          },
          sqs_queue_parameters+:
            {
              '#withMessageDeduplicationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMessageDeduplicationId(value): {
                target_parameters+: {
                  sqs_queue_parameters+: {
                    message_deduplication_id: value,
                  },
                },
              },
              '#withMessageGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMessageGroupId(value): {
                target_parameters+: {
                  sqs_queue_parameters+: {
                    message_group_id: value,
                  },
                },
              },
            },
          '#withStepFunctionStateMachineParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStepFunctionStateMachineParameters(value): {
            target_parameters+: {
              step_function_state_machine_parameters: value,
            },
          },
          '#withStepFunctionStateMachineParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStepFunctionStateMachineParametersMixin(value): {
            target_parameters+: {
              step_function_state_machine_parameters+: value,
            },
          },
          step_function_state_machine_parameters+:
            {
              '#withInvocationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInvocationType(value): {
                target_parameters+: {
                  step_function_state_machine_parameters+: {
                    invocation_type: value,
                  },
                },
              },
            },
        },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
}
