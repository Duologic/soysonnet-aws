// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'networkfirewall',
  },
  aws_networkfirewall_firewall:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'firewall_policy_arn', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'subnet_mapping', type: 'array' }, { default: null, enums: null, name: 'vpc_id', type: 'string' }], help: '' } },
      new(tf_resource_key, firewall_policy_arn, name, subnet_mapping, vpc_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withFirewallPolicyArn(firewall_policy_arn)
        + self.withName(name)
        + self.withSubnetMapping(subnet_mapping)
        + self.withVpcId(vpc_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_networkfirewall_firewall+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDeleteProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDeleteProtection(value=true): {
        delete_protection: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEncryptionConfiguration(value): {
        encryption_configuration: value,
      },
      '#withEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEncryptionConfigurationMixin(value): {
        encryption_configuration+: value,
      },
      encryption_configuration+:
        {
          '#withKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyId(value): {
            encryption_configuration+: {
              key_id: value,
            },
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            encryption_configuration+: {
              type: value,
            },
          },
        },
      '#withFirewallPolicyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFirewallPolicyArn(value): {
        firewall_policy_arn: value,
      },
      '#withFirewallPolicyChangeProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withFirewallPolicyChangeProtection(value=true): {
        firewall_policy_change_protection: value,
      },
      '#withFirewallStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFirewallStatus(value): {
        firewall_status:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFirewallStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFirewallStatusMixin(value): {
        firewall_status+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      firewall_status+:
        {
          '#': { help: '', name: 'firewall_status' },
          '#withSyncStates': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSyncStates(value): {
            sync_states:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSyncStatesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSyncStatesMixin(value): {
            sync_states+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          sync_states+:
            {
              '#': { help: '', name: 'sync_states' },
              '#withAttachment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAttachment(value): {
                attachment:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAttachmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAttachmentMixin(value): {
                attachment+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              attachment+:
                {
                  '#': { help: '', name: 'attachment' },
                  '#withEndpointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withEndpointId(value): {
                    endpoint_id: value,
                  },
                  '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSubnetId(value): {
                    subnet_id: value,
                  },
                },
              '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAvailabilityZone(value): {
                availability_zone: value,
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetChangeProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSubnetChangeProtection(value=true): {
        subnet_change_protection: value,
      },
      '#withSubnetMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetMapping(value): {
        subnet_mapping:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetMappingMixin(value): {
        subnet_mapping+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      subnet_mapping+:
        {
          '#': { help: '', name: 'subnet_mapping' },
          '#withIpAddressType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIpAddressType(value): {
            ip_address_type: value,
          },
          '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSubnetId(value): {
            subnet_id: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withUpdateToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdateToken(value): {
        update_token: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
    },
  aws_networkfirewall_firewall_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'firewall_policy', type: 'object' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, firewall_policy, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withFirewallPolicy(firewall_policy)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_networkfirewall_firewall_policy+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEncryptionConfiguration(value): {
        encryption_configuration: value,
      },
      '#withEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEncryptionConfigurationMixin(value): {
        encryption_configuration+: value,
      },
      encryption_configuration+:
        {
          '#withKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyId(value): {
            encryption_configuration+: {
              key_id: value,
            },
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            encryption_configuration+: {
              type: value,
            },
          },
        },
      '#withFirewallPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFirewallPolicy(value): {
        firewall_policy: value,
      },
      '#withFirewallPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFirewallPolicyMixin(value): {
        firewall_policy+: value,
      },
      firewall_policy+:
        {
          '#withPolicyVariables': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPolicyVariables(value): {
            firewall_policy+: {
              policy_variables: value,
            },
          },
          '#withPolicyVariablesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPolicyVariablesMixin(value): {
            firewall_policy+: {
              policy_variables+: value,
            },
          },
          policy_variables+:
            {
              '#withRuleVariables': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRuleVariables(value): {
                firewall_policy+: {
                  policy_variables+: {
                    rule_variables:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withRuleVariablesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRuleVariablesMixin(value): {
                firewall_policy+: {
                  policy_variables+: {
                    rule_variables+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              rule_variables+:
                {
                  '#': { help: '', name: 'rule_variables' },
                  '#withIpSet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIpSet(value): {
                    ip_set: value,
                  },
                  '#withIpSetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIpSetMixin(value): {
                    ip_set+: value,
                  },
                  ip_set+:
                    {
                      '#withDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefinition(value): {
                        ip_set+: {
                          definition:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefinitionMixin(value): {
                        ip_set+: {
                          definition+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                },
            },
          '#withStatefulDefaultActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulDefaultActions(value): {
            firewall_policy+: {
              stateful_default_actions:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatefulDefaultActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulDefaultActionsMixin(value): {
            firewall_policy+: {
              stateful_default_actions+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatefulEngineOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStatefulEngineOptions(value): {
            firewall_policy+: {
              stateful_engine_options: value,
            },
          },
          '#withStatefulEngineOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStatefulEngineOptionsMixin(value): {
            firewall_policy+: {
              stateful_engine_options+: value,
            },
          },
          stateful_engine_options+:
            {
              '#withFlowTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withFlowTimeouts(value): {
                firewall_policy+: {
                  stateful_engine_options+: {
                    flow_timeouts: value,
                  },
                },
              },
              '#withFlowTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withFlowTimeoutsMixin(value): {
                firewall_policy+: {
                  stateful_engine_options+: {
                    flow_timeouts+: value,
                  },
                },
              },
              flow_timeouts+:
                {
                  '#withTcpIdleTimeoutSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTcpIdleTimeoutSeconds(value): {
                    firewall_policy+: {
                      stateful_engine_options+: {
                        flow_timeouts+: {
                          tcp_idle_timeout_seconds: value,
                        },
                      },
                    },
                  },
                },
              '#withRuleOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRuleOrder(value): {
                firewall_policy+: {
                  stateful_engine_options+: {
                    rule_order: value,
                  },
                },
              },
              '#withStreamExceptionPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStreamExceptionPolicy(value): {
                firewall_policy+: {
                  stateful_engine_options+: {
                    stream_exception_policy: value,
                  },
                },
              },
            },
          '#withStatefulRuleGroupReference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulRuleGroupReference(value): {
            firewall_policy+: {
              stateful_rule_group_reference:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatefulRuleGroupReferenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulRuleGroupReferenceMixin(value): {
            firewall_policy+: {
              stateful_rule_group_reference+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          stateful_rule_group_reference+:
            {
              '#': { help: '', name: 'stateful_rule_group_reference' },
              '#withOverride': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOverride(value): {
                override: value,
              },
              '#withOverrideMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOverrideMixin(value): {
                override+: value,
              },
              override+:
                {
                  '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAction(value): {
                    override+: {
                      action: value,
                    },
                  },
                },
              '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withPriority(value): {
                priority: value,
              },
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                resource_arn: value,
              },
            },
          '#withStatelessCustomAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessCustomAction(value): {
            firewall_policy+: {
              stateless_custom_action:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatelessCustomActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessCustomActionMixin(value): {
            firewall_policy+: {
              stateless_custom_action+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          stateless_custom_action+:
            {
              '#': { help: '', name: 'stateless_custom_action' },
              '#withActionDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionDefinition(value): {
                action_definition: value,
              },
              '#withActionDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionDefinitionMixin(value): {
                action_definition+: value,
              },
              action_definition+:
                {
                  '#withPublishMetricAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPublishMetricAction(value): {
                    action_definition+: {
                      publish_metric_action: value,
                    },
                  },
                  '#withPublishMetricActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPublishMetricActionMixin(value): {
                    action_definition+: {
                      publish_metric_action+: value,
                    },
                  },
                  publish_metric_action+:
                    {
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        action_definition+: {
                          publish_metric_action+: {
                            dimension:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        action_definition+: {
                          publish_metric_action+: {
                            dimension+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
              '#withActionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withActionName(value): {
                action_name: value,
              },
            },
          '#withStatelessDefaultActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessDefaultActions(value): {
            firewall_policy+: {
              stateless_default_actions:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatelessDefaultActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessDefaultActionsMixin(value): {
            firewall_policy+: {
              stateless_default_actions+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatelessFragmentDefaultActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessFragmentDefaultActions(value): {
            firewall_policy+: {
              stateless_fragment_default_actions:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatelessFragmentDefaultActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessFragmentDefaultActionsMixin(value): {
            firewall_policy+: {
              stateless_fragment_default_actions+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatelessRuleGroupReference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessRuleGroupReference(value): {
            firewall_policy+: {
              stateless_rule_group_reference:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStatelessRuleGroupReferenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessRuleGroupReferenceMixin(value): {
            firewall_policy+: {
              stateless_rule_group_reference+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          stateless_rule_group_reference+:
            {
              '#': { help: '', name: 'stateless_rule_group_reference' },
              '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withPriority(value): {
                priority: value,
              },
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                resource_arn: value,
              },
            },
          '#withTlsInspectionConfigurationArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTlsInspectionConfigurationArn(value): {
            firewall_policy+: {
              tls_inspection_configuration_arn: value,
            },
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUpdateToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdateToken(value): {
        update_token: value,
      },
    },
  aws_networkfirewall_logging_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'firewall_arn', type: 'string' }, { default: null, enums: null, name: 'logging_configuration', type: 'object' }], help: '' } },
      new(tf_resource_key, firewall_arn, logging_configuration):
        self.withTfResourceKey(tf_resource_key)
        + self.withFirewallArn(firewall_arn)
        + self.withLoggingConfiguration(logging_configuration),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_networkfirewall_logging_configuration+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFirewallArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFirewallArn(value): {
        firewall_arn: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoggingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoggingConfiguration(value): {
        logging_configuration: value,
      },
      '#withLoggingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoggingConfigurationMixin(value): {
        logging_configuration+: value,
      },
      logging_configuration+:
        {
          '#withLogDestinationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogDestinationConfig(value): {
            logging_configuration+: {
              log_destination_config:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogDestinationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogDestinationConfigMixin(value): {
            logging_configuration+: {
              log_destination_config+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_destination_config+:
            {
              '#': { help: '', name: 'log_destination_config' },
              '#withLogDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withLogDestination(value): {
                log_destination: value,
              },
              '#withLogDestinationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withLogDestinationMixin(value): {
                log_destination+: value,
              },
              '#withLogDestinationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogDestinationType(value): {
                log_destination_type: value,
              },
              '#withLogType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogType(value): {
                log_type: value,
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_networkfirewall_resource_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'policy', type: 'string' }, { default: null, enums: null, name: 'resource_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, policy, resource_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withPolicy(policy)
        + self.withResourceArn(resource_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_networkfirewall_resource_policy+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPolicy(value): {
        policy: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceArn(value): {
        resource_arn: value,
      },
    },
  aws_networkfirewall_rule_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'capacity', type: 'number' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'type', type: 'string' }], help: '' } },
      new(tf_resource_key, capacity, name, type):
        self.withTfResourceKey(tf_resource_key)
        + self.withCapacity(capacity)
        + self.withName(name)
        + self.withType(type),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_networkfirewall_rule_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCapacity(value): {
        capacity: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEncryptionConfiguration(value): {
        encryption_configuration: value,
      },
      '#withEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEncryptionConfigurationMixin(value): {
        encryption_configuration+: value,
      },
      encryption_configuration+:
        {
          '#withKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyId(value): {
            encryption_configuration+: {
              key_id: value,
            },
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            encryption_configuration+: {
              type: value,
            },
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRuleGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRuleGroup(value): {
        rule_group: value,
      },
      '#withRuleGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRuleGroupMixin(value): {
        rule_group+: value,
      },
      rule_group+:
        {
          '#withReferenceSets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withReferenceSets(value): {
            rule_group+: {
              reference_sets: value,
            },
          },
          '#withReferenceSetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withReferenceSetsMixin(value): {
            rule_group+: {
              reference_sets+: value,
            },
          },
          reference_sets+:
            {
              '#withIpSetReferences': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpSetReferences(value): {
                rule_group+: {
                  reference_sets+: {
                    ip_set_references:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withIpSetReferencesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpSetReferencesMixin(value): {
                rule_group+: {
                  reference_sets+: {
                    ip_set_references+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              ip_set_references+:
                {
                  '#': { help: '', name: 'ip_set_references' },
                  '#withIpSetReference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIpSetReference(value): {
                    ip_set_reference:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIpSetReferenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIpSetReferenceMixin(value): {
                    ip_set_reference+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  ip_set_reference+:
                    {
                      '#': { help: '', name: 'ip_set_reference' },
                      '#withReferenceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withReferenceArn(value): {
                        reference_arn: value,
                      },
                    },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                },
            },
          '#withRuleVariables': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRuleVariables(value): {
            rule_group+: {
              rule_variables: value,
            },
          },
          '#withRuleVariablesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRuleVariablesMixin(value): {
            rule_group+: {
              rule_variables+: value,
            },
          },
          rule_variables+:
            {
              '#withIpSets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpSets(value): {
                rule_group+: {
                  rule_variables+: {
                    ip_sets:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withIpSetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpSetsMixin(value): {
                rule_group+: {
                  rule_variables+: {
                    ip_sets+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              ip_sets+:
                {
                  '#': { help: '', name: 'ip_sets' },
                  '#withIpSet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIpSet(value): {
                    ip_set: value,
                  },
                  '#withIpSetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIpSetMixin(value): {
                    ip_set+: value,
                  },
                  ip_set+:
                    {
                      '#withDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefinition(value): {
                        ip_set+: {
                          definition:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefinitionMixin(value): {
                        ip_set+: {
                          definition+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                },
              '#withPortSets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortSets(value): {
                rule_group+: {
                  rule_variables+: {
                    port_sets:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPortSetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortSetsMixin(value): {
                rule_group+: {
                  rule_variables+: {
                    port_sets+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              port_sets+:
                {
                  '#': { help: '', name: 'port_sets' },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                  '#withPortSet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPortSet(value): {
                    port_set: value,
                  },
                  '#withPortSetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPortSetMixin(value): {
                    port_set+: value,
                  },
                  port_set+:
                    {
                      '#withDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefinition(value): {
                        port_set+: {
                          definition:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefinitionMixin(value): {
                        port_set+: {
                          definition+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                },
            },
          '#withRulesSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRulesSource(value): {
            rule_group+: {
              rules_source: value,
            },
          },
          '#withRulesSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRulesSourceMixin(value): {
            rule_group+: {
              rules_source+: value,
            },
          },
          rules_source+:
            {
              '#withRulesSourceList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRulesSourceList(value): {
                rule_group+: {
                  rules_source+: {
                    rules_source_list: value,
                  },
                },
              },
              '#withRulesSourceListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRulesSourceListMixin(value): {
                rule_group+: {
                  rules_source+: {
                    rules_source_list+: value,
                  },
                },
              },
              rules_source_list+:
                {
                  '#withGeneratedRulesType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withGeneratedRulesType(value): {
                    rule_group+: {
                      rules_source+: {
                        rules_source_list+: {
                          generated_rules_type: value,
                        },
                      },
                    },
                  },
                  '#withTargetTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetTypes(value): {
                    rule_group+: {
                      rules_source+: {
                        rules_source_list+: {
                          target_types:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withTargetTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetTypesMixin(value): {
                    rule_group+: {
                      rules_source+: {
                        rules_source_list+: {
                          target_types+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargets(value): {
                    rule_group+: {
                      rules_source+: {
                        rules_source_list+: {
                          targets:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetsMixin(value): {
                    rule_group+: {
                      rules_source+: {
                        rules_source_list+: {
                          targets+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withRulesString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRulesString(value): {
                rule_group+: {
                  rules_source+: {
                    rules_string: value,
                  },
                },
              },
              '#withStatefulRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStatefulRule(value): {
                rule_group+: {
                  rules_source+: {
                    stateful_rule:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withStatefulRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStatefulRuleMixin(value): {
                rule_group+: {
                  rules_source+: {
                    stateful_rule+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              stateful_rule+:
                {
                  '#': { help: '', name: 'stateful_rule' },
                  '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAction(value): {
                    action: value,
                  },
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHeader(value): {
                    header: value,
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHeaderMixin(value): {
                    header+: value,
                  },
                  header+:
                    {
                      '#withDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withDestination(value): {
                        header+: {
                          destination: value,
                        },
                      },
                      '#withDestinationPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withDestinationPort(value): {
                        header+: {
                          destination_port: value,
                        },
                      },
                      '#withDirection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withDirection(value): {
                        header+: {
                          direction: value,
                        },
                      },
                      '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withProtocol(value): {
                        header+: {
                          protocol: value,
                        },
                      },
                      '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSource(value): {
                        header+: {
                          source: value,
                        },
                      },
                      '#withSourcePort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSourcePort(value): {
                        header+: {
                          source_port: value,
                        },
                      },
                    },
                  '#withRuleOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRuleOption(value): {
                    rule_option:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withRuleOptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRuleOptionMixin(value): {
                    rule_option+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  rule_option+:
                    {
                      '#': { help: '', name: 'rule_option' },
                      '#withKeyword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKeyword(value): {
                        keyword: value,
                      },
                      '#withSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSettings(value): {
                        settings:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSettingsMixin(value): {
                        settings+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                },
              '#withStatelessRulesAndCustomActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withStatelessRulesAndCustomActions(value): {
                rule_group+: {
                  rules_source+: {
                    stateless_rules_and_custom_actions: value,
                  },
                },
              },
              '#withStatelessRulesAndCustomActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withStatelessRulesAndCustomActionsMixin(value): {
                rule_group+: {
                  rules_source+: {
                    stateless_rules_and_custom_actions+: value,
                  },
                },
              },
              stateless_rules_and_custom_actions+:
                {
                  '#withCustomAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCustomAction(value): {
                    rule_group+: {
                      rules_source+: {
                        stateless_rules_and_custom_actions+: {
                          custom_action:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withCustomActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCustomActionMixin(value): {
                    rule_group+: {
                      rules_source+: {
                        stateless_rules_and_custom_actions+: {
                          custom_action+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  custom_action+:
                    {
                      '#': { help: '', name: 'custom_action' },
                      '#withActionDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withActionDefinition(value): {
                        action_definition: value,
                      },
                      '#withActionDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withActionDefinitionMixin(value): {
                        action_definition+: value,
                      },
                      action_definition+:
                        {
                          '#withPublishMetricAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withPublishMetricAction(value): {
                            action_definition+: {
                              publish_metric_action: value,
                            },
                          },
                          '#withPublishMetricActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withPublishMetricActionMixin(value): {
                            action_definition+: {
                              publish_metric_action+: value,
                            },
                          },
                          publish_metric_action+:
                            {
                              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDimension(value): {
                                action_definition+: {
                                  publish_metric_action+: {
                                    dimension:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDimensionMixin(value): {
                                action_definition+: {
                                  publish_metric_action+: {
                                    dimension+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              dimension+:
                                {
                                  '#': { help: '', name: 'dimension' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                      '#withActionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withActionName(value): {
                        action_name: value,
                      },
                    },
                  '#withStatelessRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStatelessRule(value): {
                    rule_group+: {
                      rules_source+: {
                        stateless_rules_and_custom_actions+: {
                          stateless_rule:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withStatelessRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStatelessRuleMixin(value): {
                    rule_group+: {
                      rules_source+: {
                        stateless_rules_and_custom_actions+: {
                          stateless_rule+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  stateless_rule+:
                    {
                      '#': { help: '', name: 'stateless_rule' },
                      '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPriority(value): {
                        priority: value,
                      },
                      '#withRuleDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withRuleDefinition(value): {
                        rule_definition: value,
                      },
                      '#withRuleDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withRuleDefinitionMixin(value): {
                        rule_definition+: value,
                      },
                      rule_definition+:
                        {
                          '#withActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withActions(value): {
                            rule_definition+: {
                              actions:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withActionsMixin(value): {
                            rule_definition+: {
                              actions+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withMatchAttributes(value): {
                            rule_definition+: {
                              match_attributes: value,
                            },
                          },
                          '#withMatchAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withMatchAttributesMixin(value): {
                            rule_definition+: {
                              match_attributes+: value,
                            },
                          },
                          match_attributes+:
                            {
                              '#withDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDestination(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    destination:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withDestinationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDestinationMixin(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    destination+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              destination+:
                                {
                                  '#': { help: '', name: 'destination' },
                                  '#withAddressDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withAddressDefinition(value): {
                                    address_definition: value,
                                  },
                                },
                              '#withDestinationPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDestinationPort(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    destination_port:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withDestinationPortMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDestinationPortMixin(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    destination_port+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              destination_port+:
                                {
                                  '#': { help: '', name: 'destination_port' },
                                  '#withFromPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withFromPort(value): {
                                    from_port: value,
                                  },
                                  '#withToPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withToPort(value): {
                                    to_port: value,
                                  },
                                },
                              '#withProtocols': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withProtocols(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    protocols:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withProtocolsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withProtocolsMixin(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    protocols+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSource(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    source:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSourceMixin(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    source+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              source+:
                                {
                                  '#': { help: '', name: 'source' },
                                  '#withAddressDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withAddressDefinition(value): {
                                    address_definition: value,
                                  },
                                },
                              '#withSourcePort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSourcePort(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    source_port:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withSourcePortMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSourcePortMixin(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    source_port+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              source_port+:
                                {
                                  '#': { help: '', name: 'source_port' },
                                  '#withFromPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withFromPort(value): {
                                    from_port: value,
                                  },
                                  '#withToPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withToPort(value): {
                                    to_port: value,
                                  },
                                },
                              '#withTcpFlag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withTcpFlag(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    tcp_flag:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              '#withTcpFlagMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withTcpFlagMixin(value): {
                                rule_definition+: {
                                  match_attributes+: {
                                    tcp_flag+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                              tcp_flag+:
                                {
                                  '#': { help: '', name: 'tcp_flag' },
                                  '#withFlags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withFlags(value): {
                                    flags:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withFlagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withFlagsMixin(value): {
                                    flags+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMasks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMasks(value): {
                                    masks:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMasksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMasksMixin(value): {
                                    masks+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withStatefulRuleOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStatefulRuleOptions(value): {
            rule_group+: {
              stateful_rule_options: value,
            },
          },
          '#withStatefulRuleOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStatefulRuleOptionsMixin(value): {
            rule_group+: {
              stateful_rule_options+: value,
            },
          },
          stateful_rule_options+:
            {
              '#withRuleOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRuleOrder(value): {
                rule_group+: {
                  stateful_rule_options+: {
                    rule_order: value,
                  },
                },
              },
            },
        },
      '#withRules': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRules(value): {
        rules: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        type: value,
      },
      '#withUpdateToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdateToken(value): {
        update_token: value,
      },
    },
  aws_networkfirewall_tls_inspection_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_networkfirewall_tls_inspection_configuration+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCertificateAuthority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCertificateAuthority(value): {
        certificate_authority:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCertificateAuthorityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCertificateAuthorityMixin(value): {
        certificate_authority+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      certificate_authority+:
        {
          '#': { help: '', name: 'certificate_authority' },
          '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCertificateArn(value): {
            certificate_arn: value,
          },
          '#withCertificateSerial': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCertificateSerial(value): {
            certificate_serial: value,
          },
          '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatus(value): {
            status: value,
          },
          '#withStatusMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatusMessage(value): {
            status_message: value,
          },
        },
      '#withCertificates': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCertificates(value): {
        certificates:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCertificatesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCertificatesMixin(value): {
        certificates+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      certificates+:
        {
          '#': { help: '', name: 'certificates' },
          '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCertificateArn(value): {
            certificate_arn: value,
          },
          '#withCertificateSerial': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCertificateSerial(value): {
            certificate_serial: value,
          },
          '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatus(value): {
            status: value,
          },
          '#withStatusMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatusMessage(value): {
            status_message: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEncryptionConfiguration(value): {
        encryption_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEncryptionConfigurationMixin(value): {
        encryption_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      encryption_configuration+:
        {
          '#': { help: '', name: 'encryption_configuration' },
          '#withKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyId(value): {
            key_id: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNumberOfAssociations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withNumberOfAssociations(value): {
        number_of_associations: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withTlsInspectionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTlsInspectionConfiguration(value): {
        tls_inspection_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTlsInspectionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTlsInspectionConfigurationMixin(value): {
        tls_inspection_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      tls_inspection_configuration+:
        {
          '#': { help: '', name: 'tls_inspection_configuration' },
          '#withServerCertificateConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withServerCertificateConfiguration(value): {
            server_certificate_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withServerCertificateConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withServerCertificateConfigurationMixin(value): {
            server_certificate_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          server_certificate_configuration+:
            {
              '#': { help: '', name: 'server_certificate_configuration' },
              '#withCertificateAuthorityArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCertificateAuthorityArn(value): {
                certificate_authority_arn: value,
              },
              '#withCheckCertificateRevocationStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCheckCertificateRevocationStatus(value): {
                check_certificate_revocation_status:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCheckCertificateRevocationStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCheckCertificateRevocationStatusMixin(value): {
                check_certificate_revocation_status+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              check_certificate_revocation_status+:
                {
                  '#': { help: '', name: 'check_certificate_revocation_status' },
                  '#withRevokedStatusAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRevokedStatusAction(value): {
                    revoked_status_action: value,
                  },
                  '#withUnknownStatusAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUnknownStatusAction(value): {
                    unknown_status_action: value,
                  },
                },
              '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withScope(value): {
                scope:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withScopeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withScopeMixin(value): {
                scope+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              scope+:
                {
                  '#': { help: '', name: 'scope' },
                  '#withDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDestination(value): {
                    destination:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDestinationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDestinationMixin(value): {
                    destination+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  destination+:
                    {
                      '#': { help: '', name: 'destination' },
                      '#withAddressDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withAddressDefinition(value): {
                        address_definition: value,
                      },
                    },
                  '#withDestinationPorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDestinationPorts(value): {
                    destination_ports:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDestinationPortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDestinationPortsMixin(value): {
                    destination_ports+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  destination_ports+:
                    {
                      '#': { help: '', name: 'destination_ports' },
                      '#withFromPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withFromPort(value): {
                        from_port: value,
                      },
                      '#withToPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withToPort(value): {
                        to_port: value,
                      },
                    },
                  '#withProtocols': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withProtocols(value): {
                    protocols:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withProtocolsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withProtocolsMixin(value): {
                    protocols+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSource(value): {
                    source:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSourceMixin(value): {
                    source+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  source+:
                    {
                      '#': { help: '', name: 'source' },
                      '#withAddressDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withAddressDefinition(value): {
                        address_definition: value,
                      },
                    },
                  '#withSourcePorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSourcePorts(value): {
                    source_ports:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSourcePortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSourcePortsMixin(value): {
                    source_ports+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  source_ports+:
                    {
                      '#': { help: '', name: 'source_ports' },
                      '#withFromPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withFromPort(value): {
                        from_port: value,
                      },
                      '#withToPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withToPort(value): {
                        to_port: value,
                      },
                    },
                },
              '#withServerCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withServerCertificate(value): {
                server_certificate:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withServerCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withServerCertificateMixin(value): {
                server_certificate+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              server_certificate+:
                {
                  '#': { help: '', name: 'server_certificate' },
                  '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withResourceArn(value): {
                    resource_arn: value,
                  },
                },
            },
        },
      '#withTlsInspectionConfigurationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTlsInspectionConfigurationId(value): {
        tls_inspection_configuration_id: value,
      },
      '#withUpdateToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdateToken(value): {
        update_token: value,
      },
    },
}
