// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'appmesh',
  },
  aws_appmesh_gateway_route:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'spec', type: 'object' }, { default: null, enums: null, name: 'virtual_gateway_name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name, spec, virtual_gateway_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withSpec(spec)
        + self.withVirtualGatewayName(virtual_gateway_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_appmesh_gateway_route: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        created_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        last_updated_date: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        mesh_name: value,
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        mesh_owner: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        resource_owner: value,
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpec(value): {
        spec: value,
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpecMixin(value): {
        spec+: value,
      },
      spec+:
        {
          '#withGrpcRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withGrpcRoute(value): {
            spec+: {
              grpc_route: value,
            },
          },
          '#withGrpcRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withGrpcRouteMixin(value): {
            spec+: {
              grpc_route+: value,
            },
          },
          grpc_route+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAction(value): {
                spec+: {
                  grpc_route+: {
                    action: value,
                  },
                },
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionMixin(value): {
                spec+: {
                  grpc_route+: {
                    action+: value,
                  },
                },
              },
              action+:
                {
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTarget(value): {
                    spec+: {
                      grpc_route+: {
                        action+: {
                          target: value,
                        },
                      },
                    },
                  },
                  '#withTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTargetMixin(value): {
                    spec+: {
                      grpc_route+: {
                        action+: {
                          target+: value,
                        },
                      },
                    },
                  },
                  target+:
                    {
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        spec+: {
                          grpc_route+: {
                            action+: {
                              target+: {
                                port: value,
                              },
                            },
                          },
                        },
                      },
                      '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withVirtualService(value): {
                        spec+: {
                          grpc_route+: {
                            action+: {
                              target+: {
                                virtual_service: value,
                              },
                            },
                          },
                        },
                      },
                      '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withVirtualServiceMixin(value): {
                        spec+: {
                          grpc_route+: {
                            action+: {
                              target+: {
                                virtual_service+: value,
                              },
                            },
                          },
                        },
                      },
                      virtual_service+:
                        {
                          '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withVirtualServiceName(value): {
                            spec+: {
                              grpc_route+: {
                                action+: {
                                  target+: {
                                    virtual_service+: {
                                      virtual_service_name: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatch(value): {
                spec+: {
                  grpc_route+: {
                    match: value,
                  },
                },
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatchMixin(value): {
                spec+: {
                  grpc_route+: {
                    match+: value,
                  },
                },
              },
              match+:
                {
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          port: value,
                        },
                      },
                    },
                  },
                  '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withServiceName(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          service_name: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withHttp2Route': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttp2Route(value): {
            spec+: {
              http2_route: value,
            },
          },
          '#withHttp2RouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttp2RouteMixin(value): {
            spec+: {
              http2_route+: value,
            },
          },
          http2_route+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAction(value): {
                spec+: {
                  http2_route+: {
                    action: value,
                  },
                },
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionMixin(value): {
                spec+: {
                  http2_route+: {
                    action+: value,
                  },
                },
              },
              action+:
                {
                  '#withRewrite': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRewrite(value): {
                    spec+: {
                      http2_route+: {
                        action+: {
                          rewrite: value,
                        },
                      },
                    },
                  },
                  '#withRewriteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRewriteMixin(value): {
                    spec+: {
                      http2_route+: {
                        action+: {
                          rewrite+: value,
                        },
                      },
                    },
                  },
                  rewrite+:
                    {
                      '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withHostname(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              rewrite+: {
                                hostname: value,
                              },
                            },
                          },
                        },
                      },
                      '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withHostnameMixin(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              rewrite+: {
                                hostname+: value,
                              },
                            },
                          },
                        },
                      },
                      hostname+:
                        {
                          '#withDefaultTargetHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultTargetHostname(value): {
                            spec+: {
                              http2_route+: {
                                action+: {
                                  rewrite+: {
                                    hostname+: {
                                      default_target_hostname: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPath(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              rewrite+: {
                                path: value,
                              },
                            },
                          },
                        },
                      },
                      '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPathMixin(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              rewrite+: {
                                path+: value,
                              },
                            },
                          },
                        },
                      },
                      path+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            spec+: {
                              http2_route+: {
                                action+: {
                                  rewrite+: {
                                    path+: {
                                      exact: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPrefix(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              rewrite+: {
                                prefix: value,
                              },
                            },
                          },
                        },
                      },
                      '#withPrefixMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPrefixMixin(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              rewrite+: {
                                prefix+: value,
                              },
                            },
                          },
                        },
                      },
                      prefix+:
                        {
                          '#withDefaultPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultPrefix(value): {
                            spec+: {
                              http2_route+: {
                                action+: {
                                  rewrite+: {
                                    prefix+: {
                                      default_prefix: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            spec+: {
                              http2_route+: {
                                action+: {
                                  rewrite+: {
                                    prefix+: {
                                      value: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTarget(value): {
                    spec+: {
                      http2_route+: {
                        action+: {
                          target: value,
                        },
                      },
                    },
                  },
                  '#withTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTargetMixin(value): {
                    spec+: {
                      http2_route+: {
                        action+: {
                          target+: value,
                        },
                      },
                    },
                  },
                  target+:
                    {
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              target+: {
                                port: value,
                              },
                            },
                          },
                        },
                      },
                      '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withVirtualService(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              target+: {
                                virtual_service: value,
                              },
                            },
                          },
                        },
                      },
                      '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withVirtualServiceMixin(value): {
                        spec+: {
                          http2_route+: {
                            action+: {
                              target+: {
                                virtual_service+: value,
                              },
                            },
                          },
                        },
                      },
                      virtual_service+:
                        {
                          '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withVirtualServiceName(value): {
                            spec+: {
                              http2_route+: {
                                action+: {
                                  target+: {
                                    virtual_service+: {
                                      virtual_service_name: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatch(value): {
                spec+: {
                  http2_route+: {
                    match: value,
                  },
                },
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatchMixin(value): {
                spec+: {
                  http2_route+: {
                    match+: value,
                  },
                },
              },
              match+:
                {
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          header:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          header+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            match+: {
                              prefix: value,
                            },
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRange(value): {
                            match+: {
                              range: value,
                            },
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRangeMixin(value): {
                            match+: {
                              range+: value,
                            },
                          },
                          range+:
                            {
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                match+: {
                                  range+: {
                                    end: value,
                                  },
                                },
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                match+: {
                                  range+: {
                                    start: value,
                                  },
                                },
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            match+: {
                              regex: value,
                            },
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            match+: {
                              suffix: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHostname(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          hostname: value,
                        },
                      },
                    },
                  },
                  '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHostnameMixin(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          hostname+: value,
                        },
                      },
                    },
                  },
                  hostname+:
                    {
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        spec+: {
                          http2_route+: {
                            match+: {
                              hostname+: {
                                exact: value,
                              },
                            },
                          },
                        },
                      },
                      '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSuffix(value): {
                        spec+: {
                          http2_route+: {
                            match+: {
                              hostname+: {
                                suffix: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPath(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          path: value,
                        },
                      },
                    },
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPathMixin(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          path+: value,
                        },
                      },
                    },
                  },
                  path+:
                    {
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        spec+: {
                          http2_route+: {
                            match+: {
                              path+: {
                                exact: value,
                              },
                            },
                          },
                        },
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        spec+: {
                          http2_route+: {
                            match+: {
                              path+: {
                                regex: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          port: value,
                        },
                      },
                    },
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          prefix: value,
                        },
                      },
                    },
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          query_parameter:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          query_parameter+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                },
            },
          '#withHttpRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpRoute(value): {
            spec+: {
              http_route: value,
            },
          },
          '#withHttpRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpRouteMixin(value): {
            spec+: {
              http_route+: value,
            },
          },
          http_route+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAction(value): {
                spec+: {
                  http_route+: {
                    action: value,
                  },
                },
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionMixin(value): {
                spec+: {
                  http_route+: {
                    action+: value,
                  },
                },
              },
              action+:
                {
                  '#withRewrite': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRewrite(value): {
                    spec+: {
                      http_route+: {
                        action+: {
                          rewrite: value,
                        },
                      },
                    },
                  },
                  '#withRewriteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withRewriteMixin(value): {
                    spec+: {
                      http_route+: {
                        action+: {
                          rewrite+: value,
                        },
                      },
                    },
                  },
                  rewrite+:
                    {
                      '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withHostname(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              rewrite+: {
                                hostname: value,
                              },
                            },
                          },
                        },
                      },
                      '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withHostnameMixin(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              rewrite+: {
                                hostname+: value,
                              },
                            },
                          },
                        },
                      },
                      hostname+:
                        {
                          '#withDefaultTargetHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultTargetHostname(value): {
                            spec+: {
                              http_route+: {
                                action+: {
                                  rewrite+: {
                                    hostname+: {
                                      default_target_hostname: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPath(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              rewrite+: {
                                path: value,
                              },
                            },
                          },
                        },
                      },
                      '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPathMixin(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              rewrite+: {
                                path+: value,
                              },
                            },
                          },
                        },
                      },
                      path+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            spec+: {
                              http_route+: {
                                action+: {
                                  rewrite+: {
                                    path+: {
                                      exact: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPrefix(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              rewrite+: {
                                prefix: value,
                              },
                            },
                          },
                        },
                      },
                      '#withPrefixMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPrefixMixin(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              rewrite+: {
                                prefix+: value,
                              },
                            },
                          },
                        },
                      },
                      prefix+:
                        {
                          '#withDefaultPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultPrefix(value): {
                            spec+: {
                              http_route+: {
                                action+: {
                                  rewrite+: {
                                    prefix+: {
                                      default_prefix: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            spec+: {
                              http_route+: {
                                action+: {
                                  rewrite+: {
                                    prefix+: {
                                      value: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTarget(value): {
                    spec+: {
                      http_route+: {
                        action+: {
                          target: value,
                        },
                      },
                    },
                  },
                  '#withTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTargetMixin(value): {
                    spec+: {
                      http_route+: {
                        action+: {
                          target+: value,
                        },
                      },
                    },
                  },
                  target+:
                    {
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              target+: {
                                port: value,
                              },
                            },
                          },
                        },
                      },
                      '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withVirtualService(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              target+: {
                                virtual_service: value,
                              },
                            },
                          },
                        },
                      },
                      '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withVirtualServiceMixin(value): {
                        spec+: {
                          http_route+: {
                            action+: {
                              target+: {
                                virtual_service+: value,
                              },
                            },
                          },
                        },
                      },
                      virtual_service+:
                        {
                          '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withVirtualServiceName(value): {
                            spec+: {
                              http_route+: {
                                action+: {
                                  target+: {
                                    virtual_service+: {
                                      virtual_service_name: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatch(value): {
                spec+: {
                  http_route+: {
                    match: value,
                  },
                },
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatchMixin(value): {
                spec+: {
                  http_route+: {
                    match+: value,
                  },
                },
              },
              match+:
                {
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          header:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          header+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            match+: {
                              prefix: value,
                            },
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRange(value): {
                            match+: {
                              range: value,
                            },
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRangeMixin(value): {
                            match+: {
                              range+: value,
                            },
                          },
                          range+:
                            {
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                match+: {
                                  range+: {
                                    end: value,
                                  },
                                },
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                match+: {
                                  range+: {
                                    start: value,
                                  },
                                },
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            match+: {
                              regex: value,
                            },
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            match+: {
                              suffix: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHostname(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          hostname: value,
                        },
                      },
                    },
                  },
                  '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHostnameMixin(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          hostname+: value,
                        },
                      },
                    },
                  },
                  hostname+:
                    {
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        spec+: {
                          http_route+: {
                            match+: {
                              hostname+: {
                                exact: value,
                              },
                            },
                          },
                        },
                      },
                      '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSuffix(value): {
                        spec+: {
                          http_route+: {
                            match+: {
                              hostname+: {
                                suffix: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPath(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          path: value,
                        },
                      },
                    },
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPathMixin(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          path+: value,
                        },
                      },
                    },
                  },
                  path+:
                    {
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        spec+: {
                          http_route+: {
                            match+: {
                              path+: {
                                exact: value,
                              },
                            },
                          },
                        },
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        spec+: {
                          http_route+: {
                            match+: {
                              path+: {
                                regex: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          port: value,
                        },
                      },
                    },
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          prefix: value,
                        },
                      },
                    },
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          query_parameter:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          query_parameter+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                },
            },
          '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPriority(value): {
            spec+: {
              priority: value,
            },
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withVirtualGatewayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVirtualGatewayName(value): {
        virtual_gateway_name: value,
      },
    },
  aws_appmesh_mesh:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_appmesh_mesh: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        created_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        last_updated_date: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        mesh_owner: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        resource_owner: value,
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpec(value): {
        spec: value,
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpecMixin(value): {
        spec+: value,
      },
      spec+:
        {
          '#withEgressFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEgressFilter(value): {
            spec+: {
              egress_filter: value,
            },
          },
          '#withEgressFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEgressFilterMixin(value): {
            spec+: {
              egress_filter+: value,
            },
          },
          egress_filter+:
            {
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                spec+: {
                  egress_filter+: {
                    type: value,
                  },
                },
              },
            },
          '#withServiceDiscovery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServiceDiscovery(value): {
            spec+: {
              service_discovery: value,
            },
          },
          '#withServiceDiscoveryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServiceDiscoveryMixin(value): {
            spec+: {
              service_discovery+: value,
            },
          },
          service_discovery+:
            {
              '#withIpPreference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIpPreference(value): {
                spec+: {
                  service_discovery+: {
                    ip_preference: value,
                  },
                },
              },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_appmesh_route:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'spec', type: 'object' }, { default: null, enums: null, name: 'virtual_router_name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name, spec, virtual_router_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withSpec(spec)
        + self.withVirtualRouterName(virtual_router_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_appmesh_route: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        created_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        last_updated_date: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        mesh_name: value,
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        mesh_owner: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        resource_owner: value,
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpec(value): {
        spec: value,
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpecMixin(value): {
        spec+: value,
      },
      spec+:
        {
          '#withGrpcRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withGrpcRoute(value): {
            spec+: {
              grpc_route: value,
            },
          },
          '#withGrpcRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withGrpcRouteMixin(value): {
            spec+: {
              grpc_route+: value,
            },
          },
          grpc_route+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAction(value): {
                spec+: {
                  grpc_route+: {
                    action: value,
                  },
                },
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionMixin(value): {
                spec+: {
                  grpc_route+: {
                    action+: value,
                  },
                },
              },
              action+:
                {
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    spec+: {
                      grpc_route+: {
                        action+: {
                          weighted_target:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    spec+: {
                      grpc_route+: {
                        action+: {
                          weighted_target+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatch(value): {
                spec+: {
                  grpc_route+: {
                    match: value,
                  },
                },
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatchMixin(value): {
                spec+: {
                  grpc_route+: {
                    match+: value,
                  },
                },
              },
              match+:
                {
                  '#withMetadata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMetadata(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          metadata:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMetadataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMetadataMixin(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          metadata+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  metadata+:
                    {
                      '#': { help: '', name: 'metadata' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            match+: {
                              prefix: value,
                            },
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRange(value): {
                            match+: {
                              range: value,
                            },
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRangeMixin(value): {
                            match+: {
                              range+: value,
                            },
                          },
                          range+:
                            {
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                match+: {
                                  range+: {
                                    end: value,
                                  },
                                },
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                match+: {
                                  range+: {
                                    start: value,
                                  },
                                },
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            match+: {
                              regex: value,
                            },
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            match+: {
                              suffix: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withMethodName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMethodName(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          method_name: value,
                        },
                      },
                    },
                  },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          port: value,
                        },
                      },
                    },
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          prefix: value,
                        },
                      },
                    },
                  },
                  '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withServiceName(value): {
                    spec+: {
                      grpc_route+: {
                        match+: {
                          service_name: value,
                        },
                      },
                    },
                  },
                },
              '#withRetryPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryPolicy(value): {
                spec+: {
                  grpc_route+: {
                    retry_policy: value,
                  },
                },
              },
              '#withRetryPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryPolicyMixin(value): {
                spec+: {
                  grpc_route+: {
                    retry_policy+: value,
                  },
                },
              },
              retry_policy+:
                {
                  '#withGrpcRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpcRetryEvents(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          grpc_retry_events:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withGrpcRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpcRetryEventsMixin(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          grpc_retry_events+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHttpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEvents(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          http_retry_events:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHttpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEventsMixin(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          http_retry_events+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxRetries(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          max_retries: value,
                        },
                      },
                    },
                  },
                  '#withPerRetryTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRetryTimeout(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          per_retry_timeout: value,
                        },
                      },
                    },
                  },
                  '#withPerRetryTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRetryTimeoutMixin(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          per_retry_timeout+: value,
                        },
                      },
                    },
                  },
                  per_retry_timeout+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          grpc_route+: {
                            retry_policy+: {
                              per_retry_timeout+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          grpc_route+: {
                            retry_policy+: {
                              per_retry_timeout+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withTcpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEvents(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          tcp_retry_events:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withTcpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEventsMixin(value): {
                    spec+: {
                      grpc_route+: {
                        retry_policy+: {
                          tcp_retry_events+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeout(value): {
                spec+: {
                  grpc_route+: {
                    timeout: value,
                  },
                },
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeoutMixin(value): {
                spec+: {
                  grpc_route+: {
                    timeout+: value,
                  },
                },
              },
              timeout+:
                {
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdle(value): {
                    spec+: {
                      grpc_route+: {
                        timeout+: {
                          idle: value,
                        },
                      },
                    },
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleMixin(value): {
                    spec+: {
                      grpc_route+: {
                        timeout+: {
                          idle+: value,
                        },
                      },
                    },
                  },
                  idle+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          grpc_route+: {
                            timeout+: {
                              idle+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          grpc_route+: {
                            timeout+: {
                              idle+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRequest(value): {
                    spec+: {
                      grpc_route+: {
                        timeout+: {
                          per_request: value,
                        },
                      },
                    },
                  },
                  '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRequestMixin(value): {
                    spec+: {
                      grpc_route+: {
                        timeout+: {
                          per_request+: value,
                        },
                      },
                    },
                  },
                  per_request+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          grpc_route+: {
                            timeout+: {
                              per_request+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          grpc_route+: {
                            timeout+: {
                              per_request+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
            },
          '#withHttp2Route': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttp2Route(value): {
            spec+: {
              http2_route: value,
            },
          },
          '#withHttp2RouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttp2RouteMixin(value): {
            spec+: {
              http2_route+: value,
            },
          },
          http2_route+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAction(value): {
                spec+: {
                  http2_route+: {
                    action: value,
                  },
                },
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionMixin(value): {
                spec+: {
                  http2_route+: {
                    action+: value,
                  },
                },
              },
              action+:
                {
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    spec+: {
                      http2_route+: {
                        action+: {
                          weighted_target:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    spec+: {
                      http2_route+: {
                        action+: {
                          weighted_target+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatch(value): {
                spec+: {
                  http2_route+: {
                    match: value,
                  },
                },
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatchMixin(value): {
                spec+: {
                  http2_route+: {
                    match+: value,
                  },
                },
              },
              match+:
                {
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          header:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          header+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            match+: {
                              prefix: value,
                            },
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRange(value): {
                            match+: {
                              range: value,
                            },
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRangeMixin(value): {
                            match+: {
                              range+: value,
                            },
                          },
                          range+:
                            {
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                match+: {
                                  range+: {
                                    end: value,
                                  },
                                },
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                match+: {
                                  range+: {
                                    start: value,
                                  },
                                },
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            match+: {
                              regex: value,
                            },
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            match+: {
                              suffix: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMethod(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          method: value,
                        },
                      },
                    },
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPath(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          path: value,
                        },
                      },
                    },
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPathMixin(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          path+: value,
                        },
                      },
                    },
                  },
                  path+:
                    {
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        spec+: {
                          http2_route+: {
                            match+: {
                              path+: {
                                exact: value,
                              },
                            },
                          },
                        },
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        spec+: {
                          http2_route+: {
                            match+: {
                              path+: {
                                regex: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          port: value,
                        },
                      },
                    },
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          prefix: value,
                        },
                      },
                    },
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          query_parameter:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          query_parameter+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withScheme': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withScheme(value): {
                    spec+: {
                      http2_route+: {
                        match+: {
                          scheme: value,
                        },
                      },
                    },
                  },
                },
              '#withRetryPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryPolicy(value): {
                spec+: {
                  http2_route+: {
                    retry_policy: value,
                  },
                },
              },
              '#withRetryPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryPolicyMixin(value): {
                spec+: {
                  http2_route+: {
                    retry_policy+: value,
                  },
                },
              },
              retry_policy+:
                {
                  '#withHttpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEvents(value): {
                    spec+: {
                      http2_route+: {
                        retry_policy+: {
                          http_retry_events:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHttpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEventsMixin(value): {
                    spec+: {
                      http2_route+: {
                        retry_policy+: {
                          http_retry_events+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxRetries(value): {
                    spec+: {
                      http2_route+: {
                        retry_policy+: {
                          max_retries: value,
                        },
                      },
                    },
                  },
                  '#withPerRetryTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRetryTimeout(value): {
                    spec+: {
                      http2_route+: {
                        retry_policy+: {
                          per_retry_timeout: value,
                        },
                      },
                    },
                  },
                  '#withPerRetryTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRetryTimeoutMixin(value): {
                    spec+: {
                      http2_route+: {
                        retry_policy+: {
                          per_retry_timeout+: value,
                        },
                      },
                    },
                  },
                  per_retry_timeout+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          http2_route+: {
                            retry_policy+: {
                              per_retry_timeout+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          http2_route+: {
                            retry_policy+: {
                              per_retry_timeout+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withTcpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEvents(value): {
                    spec+: {
                      http2_route+: {
                        retry_policy+: {
                          tcp_retry_events:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withTcpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEventsMixin(value): {
                    spec+: {
                      http2_route+: {
                        retry_policy+: {
                          tcp_retry_events+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeout(value): {
                spec+: {
                  http2_route+: {
                    timeout: value,
                  },
                },
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeoutMixin(value): {
                spec+: {
                  http2_route+: {
                    timeout+: value,
                  },
                },
              },
              timeout+:
                {
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdle(value): {
                    spec+: {
                      http2_route+: {
                        timeout+: {
                          idle: value,
                        },
                      },
                    },
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleMixin(value): {
                    spec+: {
                      http2_route+: {
                        timeout+: {
                          idle+: value,
                        },
                      },
                    },
                  },
                  idle+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          http2_route+: {
                            timeout+: {
                              idle+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          http2_route+: {
                            timeout+: {
                              idle+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRequest(value): {
                    spec+: {
                      http2_route+: {
                        timeout+: {
                          per_request: value,
                        },
                      },
                    },
                  },
                  '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRequestMixin(value): {
                    spec+: {
                      http2_route+: {
                        timeout+: {
                          per_request+: value,
                        },
                      },
                    },
                  },
                  per_request+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          http2_route+: {
                            timeout+: {
                              per_request+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          http2_route+: {
                            timeout+: {
                              per_request+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
            },
          '#withHttpRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpRoute(value): {
            spec+: {
              http_route: value,
            },
          },
          '#withHttpRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpRouteMixin(value): {
            spec+: {
              http_route+: value,
            },
          },
          http_route+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAction(value): {
                spec+: {
                  http_route+: {
                    action: value,
                  },
                },
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionMixin(value): {
                spec+: {
                  http_route+: {
                    action+: value,
                  },
                },
              },
              action+:
                {
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    spec+: {
                      http_route+: {
                        action+: {
                          weighted_target:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    spec+: {
                      http_route+: {
                        action+: {
                          weighted_target+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatch(value): {
                spec+: {
                  http_route+: {
                    match: value,
                  },
                },
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatchMixin(value): {
                spec+: {
                  http_route+: {
                    match+: value,
                  },
                },
              },
              match+:
                {
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          header:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          header+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            match+: {
                              prefix: value,
                            },
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRange(value): {
                            match+: {
                              range: value,
                            },
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withRangeMixin(value): {
                            match+: {
                              range+: value,
                            },
                          },
                          range+:
                            {
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                match+: {
                                  range+: {
                                    end: value,
                                  },
                                },
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                match+: {
                                  range+: {
                                    start: value,
                                  },
                                },
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            match+: {
                              regex: value,
                            },
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            match+: {
                              suffix: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMethod(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          method: value,
                        },
                      },
                    },
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPath(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          path: value,
                        },
                      },
                    },
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPathMixin(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          path+: value,
                        },
                      },
                    },
                  },
                  path+:
                    {
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        spec+: {
                          http_route+: {
                            match+: {
                              path+: {
                                exact: value,
                              },
                            },
                          },
                        },
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        spec+: {
                          http_route+: {
                            match+: {
                              path+: {
                                regex: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          port: value,
                        },
                      },
                    },
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          prefix: value,
                        },
                      },
                    },
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          query_parameter:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          query_parameter+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatch(value): {
                        match: value,
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withMatchMixin(value): {
                        match+: value,
                      },
                      match+:
                        {
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            match+: {
                              exact: value,
                            },
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withScheme': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withScheme(value): {
                    spec+: {
                      http_route+: {
                        match+: {
                          scheme: value,
                        },
                      },
                    },
                  },
                },
              '#withRetryPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryPolicy(value): {
                spec+: {
                  http_route+: {
                    retry_policy: value,
                  },
                },
              },
              '#withRetryPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRetryPolicyMixin(value): {
                spec+: {
                  http_route+: {
                    retry_policy+: value,
                  },
                },
              },
              retry_policy+:
                {
                  '#withHttpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEvents(value): {
                    spec+: {
                      http_route+: {
                        retry_policy+: {
                          http_retry_events:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withHttpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEventsMixin(value): {
                    spec+: {
                      http_route+: {
                        retry_policy+: {
                          http_retry_events+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxRetries(value): {
                    spec+: {
                      http_route+: {
                        retry_policy+: {
                          max_retries: value,
                        },
                      },
                    },
                  },
                  '#withPerRetryTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRetryTimeout(value): {
                    spec+: {
                      http_route+: {
                        retry_policy+: {
                          per_retry_timeout: value,
                        },
                      },
                    },
                  },
                  '#withPerRetryTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRetryTimeoutMixin(value): {
                    spec+: {
                      http_route+: {
                        retry_policy+: {
                          per_retry_timeout+: value,
                        },
                      },
                    },
                  },
                  per_retry_timeout+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          http_route+: {
                            retry_policy+: {
                              per_retry_timeout+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          http_route+: {
                            retry_policy+: {
                              per_retry_timeout+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withTcpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEvents(value): {
                    spec+: {
                      http_route+: {
                        retry_policy+: {
                          tcp_retry_events:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withTcpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEventsMixin(value): {
                    spec+: {
                      http_route+: {
                        retry_policy+: {
                          tcp_retry_events+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeout(value): {
                spec+: {
                  http_route+: {
                    timeout: value,
                  },
                },
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeoutMixin(value): {
                spec+: {
                  http_route+: {
                    timeout+: value,
                  },
                },
              },
              timeout+:
                {
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdle(value): {
                    spec+: {
                      http_route+: {
                        timeout+: {
                          idle: value,
                        },
                      },
                    },
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleMixin(value): {
                    spec+: {
                      http_route+: {
                        timeout+: {
                          idle+: value,
                        },
                      },
                    },
                  },
                  idle+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          http_route+: {
                            timeout+: {
                              idle+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          http_route+: {
                            timeout+: {
                              idle+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRequest(value): {
                    spec+: {
                      http_route+: {
                        timeout+: {
                          per_request: value,
                        },
                      },
                    },
                  },
                  '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withPerRequestMixin(value): {
                    spec+: {
                      http_route+: {
                        timeout+: {
                          per_request+: value,
                        },
                      },
                    },
                  },
                  per_request+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          http_route+: {
                            timeout+: {
                              per_request+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          http_route+: {
                            timeout+: {
                              per_request+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
            },
          '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPriority(value): {
            spec+: {
              priority: value,
            },
          },
          '#withTcpRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTcpRoute(value): {
            spec+: {
              tcp_route: value,
            },
          },
          '#withTcpRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTcpRouteMixin(value): {
            spec+: {
              tcp_route+: value,
            },
          },
          tcp_route+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAction(value): {
                spec+: {
                  tcp_route+: {
                    action: value,
                  },
                },
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withActionMixin(value): {
                spec+: {
                  tcp_route+: {
                    action+: value,
                  },
                },
              },
              action+:
                {
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    spec+: {
                      tcp_route+: {
                        action+: {
                          weighted_target:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    spec+: {
                      tcp_route+: {
                        action+: {
                          weighted_target+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatch(value): {
                spec+: {
                  tcp_route+: {
                    match: value,
                  },
                },
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMatchMixin(value): {
                spec+: {
                  tcp_route+: {
                    match+: value,
                  },
                },
              },
              match+:
                {
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    spec+: {
                      tcp_route+: {
                        match+: {
                          port: value,
                        },
                      },
                    },
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeout(value): {
                spec+: {
                  tcp_route+: {
                    timeout: value,
                  },
                },
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeoutMixin(value): {
                spec+: {
                  tcp_route+: {
                    timeout+: value,
                  },
                },
              },
              timeout+:
                {
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdle(value): {
                    spec+: {
                      tcp_route+: {
                        timeout+: {
                          idle: value,
                        },
                      },
                    },
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleMixin(value): {
                    spec+: {
                      tcp_route+: {
                        timeout+: {
                          idle+: value,
                        },
                      },
                    },
                  },
                  idle+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        spec+: {
                          tcp_route+: {
                            timeout+: {
                              idle+: {
                                unit: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        spec+: {
                          tcp_route+: {
                            timeout+: {
                              idle+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withVirtualRouterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVirtualRouterName(value): {
        virtual_router_name: value,
      },
    },
  aws_appmesh_virtual_gateway:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'spec', type: 'object' }], help: '' } },
      new(tf_resource_key, mesh_name, name, spec):
        self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withSpec(spec),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_appmesh_virtual_gateway: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        created_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        last_updated_date: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        mesh_name: value,
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        mesh_owner: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        resource_owner: value,
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpec(value): {
        spec: value,
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpecMixin(value): {
        spec+: value,
      },
      spec+:
        {
          '#withBackendDefaults': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBackendDefaults(value): {
            spec+: {
              backend_defaults: value,
            },
          },
          '#withBackendDefaultsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBackendDefaultsMixin(value): {
            spec+: {
              backend_defaults+: value,
            },
          },
          backend_defaults+:
            {
              '#withClientPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withClientPolicy(value): {
                spec+: {
                  backend_defaults+: {
                    client_policy: value,
                  },
                },
              },
              '#withClientPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withClientPolicyMixin(value): {
                spec+: {
                  backend_defaults+: {
                    client_policy+: value,
                  },
                },
              },
              client_policy+:
                {
                  '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTls(value): {
                    spec+: {
                      backend_defaults+: {
                        client_policy+: {
                          tls: value,
                        },
                      },
                    },
                  },
                  '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTlsMixin(value): {
                    spec+: {
                      backend_defaults+: {
                        client_policy+: {
                          tls+: value,
                        },
                      },
                    },
                  },
                  tls+:
                    {
                      '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCertificate(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                certificate: value,
                              },
                            },
                          },
                        },
                      },
                      '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCertificateMixin(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                certificate+: value,
                              },
                            },
                          },
                        },
                      },
                      certificate+:
                        {
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFile(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      file: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFileMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      file+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          file+:
                            {
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        certificate+: {
                                          file+: {
                                            certificate_chain: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withPrivateKey(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        certificate+: {
                                          file+: {
                                            private_key: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSds(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      sds: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSdsMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      sds+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          sds+:
                            {
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        certificate+: {
                                          sds+: {
                                            secret_name: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                        },
                      '#withEnforce': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withEnforce(value=true): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                enforce: value,
                              },
                            },
                          },
                        },
                      },
                      '#withPorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPorts(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                ports:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                      '#withPortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPortsMixin(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                ports+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                      '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withValidation(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                validation: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withValidationMixin(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                validation+: value,
                              },
                            },
                          },
                        },
                      },
                      validation+:
                        {
                          '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSubjectAlternativeNames(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      subject_alternative_names: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSubjectAlternativeNamesMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      subject_alternative_names+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          subject_alternative_names+:
                            {
                              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withMatch(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          subject_alternative_names+: {
                                            match: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withMatchMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          subject_alternative_names+: {
                                            match+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              match+:
                                {
                                  '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExact(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              subject_alternative_names+: {
                                                match+: {
                                                  exact:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExactMixin(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              subject_alternative_names+: {
                                                match+: {
                                                  exact+:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                            },
                          '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withTrust(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      trust: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withTrustMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      trust+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          trust+:
                            {
                              '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withAcm(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            acm: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withAcmMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            acm+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              acm+:
                                {
                                  '#withCertificateAuthorityArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArns(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                acm+: {
                                                  certificate_authority_arns:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withCertificateAuthorityArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArnsMixin(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                acm+: {
                                                  certificate_authority_arns+:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withFile(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            file: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withFileMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            file+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              file+:
                                {
                                  '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withCertificateChain(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                file+: {
                                                  certificate_chain: value,
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSds(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            sds: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSdsMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            sds+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              sds+:
                                {
                                  '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSecretName(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                sds+: {
                                                  secret_name: value,
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListener(value): {
            spec+: {
              listener:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListenerMixin(value): {
            spec+: {
              listener+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          listener+:
            {
              '#': { help: '', name: 'listener' },
              '#withConnectionPool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConnectionPool(value): {
                connection_pool: value,
              },
              '#withConnectionPoolMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConnectionPoolMixin(value): {
                connection_pool+: value,
              },
              connection_pool+:
                {
                  '#withGrpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withGrpc(value): {
                    connection_pool+: {
                      grpc: value,
                    },
                  },
                  '#withGrpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withGrpcMixin(value): {
                    connection_pool+: {
                      grpc+: value,
                    },
                  },
                  grpc+:
                    {
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        connection_pool+: {
                          grpc+: {
                            max_requests: value,
                          },
                        },
                      },
                    },
                  '#withHttp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttp(value): {
                    connection_pool+: {
                      http: value,
                    },
                  },
                  '#withHttpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttpMixin(value): {
                    connection_pool+: {
                      http+: value,
                    },
                  },
                  http+:
                    {
                      '#withMaxConnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxConnections(value): {
                        connection_pool+: {
                          http+: {
                            max_connections: value,
                          },
                        },
                      },
                      '#withMaxPendingRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxPendingRequests(value): {
                        connection_pool+: {
                          http+: {
                            max_pending_requests: value,
                          },
                        },
                      },
                    },
                  '#withHttp2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttp2(value): {
                    connection_pool+: {
                      http2: value,
                    },
                  },
                  '#withHttp2Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttp2Mixin(value): {
                    connection_pool+: {
                      http2+: value,
                    },
                  },
                  http2+:
                    {
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        connection_pool+: {
                          http2+: {
                            max_requests: value,
                          },
                        },
                      },
                    },
                },
              '#withHealthCheck': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHealthCheck(value): {
                health_check: value,
              },
              '#withHealthCheckMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHealthCheckMixin(value): {
                health_check+: value,
              },
              health_check+:
                {
                  '#withHealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withHealthyThreshold(value): {
                    health_check+: {
                      healthy_threshold: value,
                    },
                  },
                  '#withIntervalMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withIntervalMillis(value): {
                    health_check+: {
                      interval_millis: value,
                    },
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPath(value): {
                    health_check+: {
                      path: value,
                    },
                  },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    health_check+: {
                      port: value,
                    },
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    health_check+: {
                      protocol: value,
                    },
                  },
                  '#withTimeoutMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTimeoutMillis(value): {
                    health_check+: {
                      timeout_millis: value,
                    },
                  },
                  '#withUnhealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withUnhealthyThreshold(value): {
                    health_check+: {
                      unhealthy_threshold: value,
                    },
                  },
                },
              '#withPortMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPortMapping(value): {
                port_mapping: value,
              },
              '#withPortMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPortMappingMixin(value): {
                port_mapping+: value,
              },
              port_mapping+:
                {
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port_mapping+: {
                      port: value,
                    },
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    port_mapping+: {
                      protocol: value,
                    },
                  },
                },
              '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTls(value): {
                tls: value,
              },
              '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTlsMixin(value): {
                tls+: value,
              },
              tls+:
                {
                  '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCertificate(value): {
                    tls+: {
                      certificate: value,
                    },
                  },
                  '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCertificateMixin(value): {
                    tls+: {
                      certificate+: value,
                    },
                  },
                  certificate+:
                    {
                      '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withAcm(value): {
                        tls+: {
                          certificate+: {
                            acm: value,
                          },
                        },
                      },
                      '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withAcmMixin(value): {
                        tls+: {
                          certificate+: {
                            acm+: value,
                          },
                        },
                      },
                      acm+:
                        {
                          '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateArn(value): {
                            tls+: {
                              certificate+: {
                                acm+: {
                                  certificate_arn: value,
                                },
                              },
                            },
                          },
                        },
                      '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFile(value): {
                        tls+: {
                          certificate+: {
                            file: value,
                          },
                        },
                      },
                      '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFileMixin(value): {
                        tls+: {
                          certificate+: {
                            file+: value,
                          },
                        },
                      },
                      file+:
                        {
                          '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateChain(value): {
                            tls+: {
                              certificate+: {
                                file+: {
                                  certificate_chain: value,
                                },
                              },
                            },
                          },
                          '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrivateKey(value): {
                            tls+: {
                              certificate+: {
                                file+: {
                                  private_key: value,
                                },
                              },
                            },
                          },
                        },
                      '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSds(value): {
                        tls+: {
                          certificate+: {
                            sds: value,
                          },
                        },
                      },
                      '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSdsMixin(value): {
                        tls+: {
                          certificate+: {
                            sds+: value,
                          },
                        },
                      },
                      sds+:
                        {
                          '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSecretName(value): {
                            tls+: {
                              certificate+: {
                                sds+: {
                                  secret_name: value,
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMode(value): {
                    tls+: {
                      mode: value,
                    },
                  },
                  '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withValidation(value): {
                    tls+: {
                      validation: value,
                    },
                  },
                  '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withValidationMixin(value): {
                    tls+: {
                      validation+: value,
                    },
                  },
                  validation+:
                    {
                      '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSubjectAlternativeNames(value): {
                        tls+: {
                          validation+: {
                            subject_alternative_names: value,
                          },
                        },
                      },
                      '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSubjectAlternativeNamesMixin(value): {
                        tls+: {
                          validation+: {
                            subject_alternative_names+: value,
                          },
                        },
                      },
                      subject_alternative_names+:
                        {
                          '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withMatch(value): {
                            tls+: {
                              validation+: {
                                subject_alternative_names+: {
                                  match: value,
                                },
                              },
                            },
                          },
                          '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withMatchMixin(value): {
                            tls+: {
                              validation+: {
                                subject_alternative_names+: {
                                  match+: value,
                                },
                              },
                            },
                          },
                          match+:
                            {
                              '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExact(value): {
                                tls+: {
                                  validation+: {
                                    subject_alternative_names+: {
                                      match+: {
                                        exact:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                    },
                                  },
                                },
                              },
                              '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExactMixin(value): {
                                tls+: {
                                  validation+: {
                                    subject_alternative_names+: {
                                      match+: {
                                        exact+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                    },
                                  },
                                },
                              },
                            },
                        },
                      '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTrust(value): {
                        tls+: {
                          validation+: {
                            trust: value,
                          },
                        },
                      },
                      '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTrustMixin(value): {
                        tls+: {
                          validation+: {
                            trust+: value,
                          },
                        },
                      },
                      trust+:
                        {
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFile(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  file: value,
                                },
                              },
                            },
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFileMixin(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  file+: value,
                                },
                              },
                            },
                          },
                          file+:
                            {
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                tls+: {
                                  validation+: {
                                    trust+: {
                                      file+: {
                                        certificate_chain: value,
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSds(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  sds: value,
                                },
                              },
                            },
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSdsMixin(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  sds+: value,
                                },
                              },
                            },
                          },
                          sds+:
                            {
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                tls+: {
                                  validation+: {
                                    trust+: {
                                      sds+: {
                                        secret_name: value,
                                      },
                                    },
                                  },
                                },
                              },
                            },
                        },
                    },
                },
            },
          '#withLogging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLogging(value): {
            spec+: {
              logging: value,
            },
          },
          '#withLoggingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLoggingMixin(value): {
            spec+: {
              logging+: value,
            },
          },
          logging+:
            {
              '#withAccessLog': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAccessLog(value): {
                spec+: {
                  logging+: {
                    access_log: value,
                  },
                },
              },
              '#withAccessLogMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAccessLogMixin(value): {
                spec+: {
                  logging+: {
                    access_log+: value,
                  },
                },
              },
              access_log+:
                {
                  '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withFile(value): {
                    spec+: {
                      logging+: {
                        access_log+: {
                          file: value,
                        },
                      },
                    },
                  },
                  '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withFileMixin(value): {
                    spec+: {
                      logging+: {
                        access_log+: {
                          file+: value,
                        },
                      },
                    },
                  },
                  file+:
                    {
                      '#withFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFormat(value): {
                        spec+: {
                          logging+: {
                            access_log+: {
                              file+: {
                                format: value,
                              },
                            },
                          },
                        },
                      },
                      '#withFormatMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFormatMixin(value): {
                        spec+: {
                          logging+: {
                            access_log+: {
                              file+: {
                                format+: value,
                              },
                            },
                          },
                        },
                      },
                      format+:
                        {
                          '#withJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJson(value): {
                            spec+: {
                              logging+: {
                                access_log+: {
                                  file+: {
                                    format+: {
                                      json:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withJsonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJsonMixin(value): {
                            spec+: {
                              logging+: {
                                access_log+: {
                                  file+: {
                                    format+: {
                                      json+:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                          json+:
                            {
                              '#': { help: '', name: 'json' },
                              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withKey(value): {
                                key: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withText(value): {
                            spec+: {
                              logging+: {
                                access_log+: {
                                  file+: {
                                    format+: {
                                      text: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withPath(value): {
                        spec+: {
                          logging+: {
                            access_log+: {
                              file+: {
                                path: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_appmesh_virtual_node:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'spec', type: 'object' }], help: '' } },
      new(tf_resource_key, mesh_name, name, spec):
        self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withSpec(spec),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_appmesh_virtual_node: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        created_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        last_updated_date: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        mesh_name: value,
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        mesh_owner: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        resource_owner: value,
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpec(value): {
        spec: value,
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpecMixin(value): {
        spec+: value,
      },
      spec+:
        {
          '#withBackend': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackend(value): {
            spec+: {
              backend:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withBackendMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackendMixin(value): {
            spec+: {
              backend+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          backend+:
            {
              '#': { help: '', name: 'backend' },
              '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVirtualService(value): {
                virtual_service: value,
              },
              '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVirtualServiceMixin(value): {
                virtual_service+: value,
              },
              virtual_service+:
                {
                  '#withClientPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withClientPolicy(value): {
                    virtual_service+: {
                      client_policy: value,
                    },
                  },
                  '#withClientPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withClientPolicyMixin(value): {
                    virtual_service+: {
                      client_policy+: value,
                    },
                  },
                  client_policy+:
                    {
                      '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTls(value): {
                        virtual_service+: {
                          client_policy+: {
                            tls: value,
                          },
                        },
                      },
                      '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTlsMixin(value): {
                        virtual_service+: {
                          client_policy+: {
                            tls+: value,
                          },
                        },
                      },
                      tls+:
                        {
                          '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withCertificate(value): {
                            virtual_service+: {
                              client_policy+: {
                                tls+: {
                                  certificate: value,
                                },
                              },
                            },
                          },
                          '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withCertificateMixin(value): {
                            virtual_service+: {
                              client_policy+: {
                                tls+: {
                                  certificate+: value,
                                },
                              },
                            },
                          },
                          certificate+:
                            {
                              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withFile(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      certificate+: {
                                        file: value,
                                      },
                                    },
                                  },
                                },
                              },
                              '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withFileMixin(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      certificate+: {
                                        file+: value,
                                      },
                                    },
                                  },
                                },
                              },
                              file+:
                                {
                                  '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withCertificateChain(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          certificate+: {
                                            file+: {
                                              certificate_chain: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withPrivateKey(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          certificate+: {
                                            file+: {
                                              private_key: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSds(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      certificate+: {
                                        sds: value,
                                      },
                                    },
                                  },
                                },
                              },
                              '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSdsMixin(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      certificate+: {
                                        sds+: value,
                                      },
                                    },
                                  },
                                },
                              },
                              sds+:
                                {
                                  '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSecretName(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          certificate+: {
                                            sds+: {
                                              secret_name: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                            },
                          '#withEnforce': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withEnforce(value=true): {
                            virtual_service+: {
                              client_policy+: {
                                tls+: {
                                  enforce: value,
                                },
                              },
                            },
                          },
                          '#withPorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPorts(value): {
                            virtual_service+: {
                              client_policy+: {
                                tls+: {
                                  ports:
                                    (if std.isArray(value)
                                     then value
                                     else [value]),
                                },
                              },
                            },
                          },
                          '#withPortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPortsMixin(value): {
                            virtual_service+: {
                              client_policy+: {
                                tls+: {
                                  ports+:
                                    (if std.isArray(value)
                                     then value
                                     else [value]),
                                },
                              },
                            },
                          },
                          '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withValidation(value): {
                            virtual_service+: {
                              client_policy+: {
                                tls+: {
                                  validation: value,
                                },
                              },
                            },
                          },
                          '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withValidationMixin(value): {
                            virtual_service+: {
                              client_policy+: {
                                tls+: {
                                  validation+: value,
                                },
                              },
                            },
                          },
                          validation+:
                            {
                              '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSubjectAlternativeNames(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      validation+: {
                                        subject_alternative_names: value,
                                      },
                                    },
                                  },
                                },
                              },
                              '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSubjectAlternativeNamesMixin(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      validation+: {
                                        subject_alternative_names+: value,
                                      },
                                    },
                                  },
                                },
                              },
                              subject_alternative_names+:
                                {
                                  '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withMatch(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            subject_alternative_names+: {
                                              match: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withMatchMixin(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            subject_alternative_names+: {
                                              match+: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  match+:
                                    {
                                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withExact(value): {
                                        virtual_service+: {
                                          client_policy+: {
                                            tls+: {
                                              validation+: {
                                                subject_alternative_names+: {
                                                  match+: {
                                                    exact:
                                                      (if std.isArray(value)
                                                       then value
                                                       else [value]),
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                      '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withExactMixin(value): {
                                        virtual_service+: {
                                          client_policy+: {
                                            tls+: {
                                              validation+: {
                                                subject_alternative_names+: {
                                                  match+: {
                                                    exact+:
                                                      (if std.isArray(value)
                                                       then value
                                                       else [value]),
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                },
                              '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withTrust(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      validation+: {
                                        trust: value,
                                      },
                                    },
                                  },
                                },
                              },
                              '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withTrustMixin(value): {
                                virtual_service+: {
                                  client_policy+: {
                                    tls+: {
                                      validation+: {
                                        trust+: value,
                                      },
                                    },
                                  },
                                },
                              },
                              trust+:
                                {
                                  '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withAcm(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            trust+: {
                                              acm: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withAcmMixin(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            trust+: {
                                              acm+: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  acm+:
                                    {
                                      '#withCertificateAuthorityArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCertificateAuthorityArns(value): {
                                        virtual_service+: {
                                          client_policy+: {
                                            tls+: {
                                              validation+: {
                                                trust+: {
                                                  acm+: {
                                                    certificate_authority_arns:
                                                      (if std.isArray(value)
                                                       then value
                                                       else [value]),
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                      '#withCertificateAuthorityArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCertificateAuthorityArnsMixin(value): {
                                        virtual_service+: {
                                          client_policy+: {
                                            tls+: {
                                              validation+: {
                                                trust+: {
                                                  acm+: {
                                                    certificate_authority_arns+:
                                                      (if std.isArray(value)
                                                       then value
                                                       else [value]),
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withFile(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            trust+: {
                                              file: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withFileMixin(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            trust+: {
                                              file+: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  file+:
                                    {
                                      '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withCertificateChain(value): {
                                        virtual_service+: {
                                          client_policy+: {
                                            tls+: {
                                              validation+: {
                                                trust+: {
                                                  file+: {
                                                    certificate_chain: value,
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withSds(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            trust+: {
                                              sds: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                                  withSdsMixin(value): {
                                    virtual_service+: {
                                      client_policy+: {
                                        tls+: {
                                          validation+: {
                                            trust+: {
                                              sds+: value,
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  sds+:
                                    {
                                      '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSecretName(value): {
                                        virtual_service+: {
                                          client_policy+: {
                                            tls+: {
                                              validation+: {
                                                trust+: {
                                                  sds+: {
                                                    secret_name: value,
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                },
                            },
                        },
                    },
                  '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVirtualServiceName(value): {
                    virtual_service+: {
                      virtual_service_name: value,
                    },
                  },
                },
            },
          '#withBackendDefaults': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBackendDefaults(value): {
            spec+: {
              backend_defaults: value,
            },
          },
          '#withBackendDefaultsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBackendDefaultsMixin(value): {
            spec+: {
              backend_defaults+: value,
            },
          },
          backend_defaults+:
            {
              '#withClientPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withClientPolicy(value): {
                spec+: {
                  backend_defaults+: {
                    client_policy: value,
                  },
                },
              },
              '#withClientPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withClientPolicyMixin(value): {
                spec+: {
                  backend_defaults+: {
                    client_policy+: value,
                  },
                },
              },
              client_policy+:
                {
                  '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTls(value): {
                    spec+: {
                      backend_defaults+: {
                        client_policy+: {
                          tls: value,
                        },
                      },
                    },
                  },
                  '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTlsMixin(value): {
                    spec+: {
                      backend_defaults+: {
                        client_policy+: {
                          tls+: value,
                        },
                      },
                    },
                  },
                  tls+:
                    {
                      '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCertificate(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                certificate: value,
                              },
                            },
                          },
                        },
                      },
                      '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCertificateMixin(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                certificate+: value,
                              },
                            },
                          },
                        },
                      },
                      certificate+:
                        {
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFile(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      file: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFileMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      file+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          file+:
                            {
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        certificate+: {
                                          file+: {
                                            certificate_chain: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withPrivateKey(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        certificate+: {
                                          file+: {
                                            private_key: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSds(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      sds: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSdsMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    certificate+: {
                                      sds+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          sds+:
                            {
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        certificate+: {
                                          sds+: {
                                            secret_name: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                        },
                      '#withEnforce': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withEnforce(value=true): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                enforce: value,
                              },
                            },
                          },
                        },
                      },
                      '#withPorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPorts(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                ports:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                      '#withPortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPortsMixin(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                ports+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      },
                      '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withValidation(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                validation: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withValidationMixin(value): {
                        spec+: {
                          backend_defaults+: {
                            client_policy+: {
                              tls+: {
                                validation+: value,
                              },
                            },
                          },
                        },
                      },
                      validation+:
                        {
                          '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSubjectAlternativeNames(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      subject_alternative_names: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSubjectAlternativeNamesMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      subject_alternative_names+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          subject_alternative_names+:
                            {
                              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withMatch(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          subject_alternative_names+: {
                                            match: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withMatchMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          subject_alternative_names+: {
                                            match+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              match+:
                                {
                                  '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExact(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              subject_alternative_names+: {
                                                match+: {
                                                  exact:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExactMixin(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              subject_alternative_names+: {
                                                match+: {
                                                  exact+:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                            },
                          '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withTrust(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      trust: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withTrustMixin(value): {
                            spec+: {
                              backend_defaults+: {
                                client_policy+: {
                                  tls+: {
                                    validation+: {
                                      trust+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          trust+:
                            {
                              '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withAcm(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            acm: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withAcmMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            acm+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              acm+:
                                {
                                  '#withCertificateAuthorityArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArns(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                acm+: {
                                                  certificate_authority_arns:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                  '#withCertificateAuthorityArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArnsMixin(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                acm+: {
                                                  certificate_authority_arns+:
                                                    (if std.isArray(value)
                                                     then value
                                                     else [value]),
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withFile(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            file: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withFileMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            file+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              file+:
                                {
                                  '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withCertificateChain(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                file+: {
                                                  certificate_chain: value,
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSds(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            sds: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSdsMixin(value): {
                                spec+: {
                                  backend_defaults+: {
                                    client_policy+: {
                                      tls+: {
                                        validation+: {
                                          trust+: {
                                            sds+: value,
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              sds+:
                                {
                                  '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSecretName(value): {
                                    spec+: {
                                      backend_defaults+: {
                                        client_policy+: {
                                          tls+: {
                                            validation+: {
                                              trust+: {
                                                sds+: {
                                                  secret_name: value,
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListener(value): {
            spec+: {
              listener:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListenerMixin(value): {
            spec+: {
              listener+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          listener+:
            {
              '#': { help: '', name: 'listener' },
              '#withConnectionPool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConnectionPool(value): {
                connection_pool: value,
              },
              '#withConnectionPoolMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConnectionPoolMixin(value): {
                connection_pool+: value,
              },
              connection_pool+:
                {
                  '#withGrpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withGrpc(value): {
                    connection_pool+: {
                      grpc: value,
                    },
                  },
                  '#withGrpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withGrpcMixin(value): {
                    connection_pool+: {
                      grpc+: value,
                    },
                  },
                  grpc+:
                    {
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        connection_pool+: {
                          grpc+: {
                            max_requests: value,
                          },
                        },
                      },
                    },
                  '#withHttp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp(value): {
                    connection_pool+: {
                      http:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withHttpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpMixin(value): {
                    connection_pool+: {
                      http+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  http+:
                    {
                      '#': { help: '', name: 'http' },
                      '#withMaxConnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxConnections(value): {
                        max_connections: value,
                      },
                      '#withMaxPendingRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxPendingRequests(value): {
                        max_pending_requests: value,
                      },
                    },
                  '#withHttp2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2(value): {
                    connection_pool+: {
                      http2:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withHttp2Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2Mixin(value): {
                    connection_pool+: {
                      http2+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  http2+:
                    {
                      '#': { help: '', name: 'http2' },
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        max_requests: value,
                      },
                    },
                  '#withTcp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcp(value): {
                    connection_pool+: {
                      tcp:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withTcpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpMixin(value): {
                    connection_pool+: {
                      tcp+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  tcp+:
                    {
                      '#': { help: '', name: 'tcp' },
                      '#withMaxConnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxConnections(value): {
                        max_connections: value,
                      },
                    },
                },
              '#withHealthCheck': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHealthCheck(value): {
                health_check: value,
              },
              '#withHealthCheckMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withHealthCheckMixin(value): {
                health_check+: value,
              },
              health_check+:
                {
                  '#withHealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withHealthyThreshold(value): {
                    health_check+: {
                      healthy_threshold: value,
                    },
                  },
                  '#withIntervalMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withIntervalMillis(value): {
                    health_check+: {
                      interval_millis: value,
                    },
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPath(value): {
                    health_check+: {
                      path: value,
                    },
                  },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    health_check+: {
                      port: value,
                    },
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    health_check+: {
                      protocol: value,
                    },
                  },
                  '#withTimeoutMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTimeoutMillis(value): {
                    health_check+: {
                      timeout_millis: value,
                    },
                  },
                  '#withUnhealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withUnhealthyThreshold(value): {
                    health_check+: {
                      unhealthy_threshold: value,
                    },
                  },
                },
              '#withOutlierDetection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOutlierDetection(value): {
                outlier_detection: value,
              },
              '#withOutlierDetectionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOutlierDetectionMixin(value): {
                outlier_detection+: value,
              },
              outlier_detection+:
                {
                  '#withBaseEjectionDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withBaseEjectionDuration(value): {
                    outlier_detection+: {
                      base_ejection_duration: value,
                    },
                  },
                  '#withBaseEjectionDurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withBaseEjectionDurationMixin(value): {
                    outlier_detection+: {
                      base_ejection_duration+: value,
                    },
                  },
                  base_ejection_duration+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        outlier_detection+: {
                          base_ejection_duration+: {
                            unit: value,
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        outlier_detection+: {
                          base_ejection_duration+: {
                            value: value,
                          },
                        },
                      },
                    },
                  '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withInterval(value): {
                    outlier_detection+: {
                      interval: value,
                    },
                  },
                  '#withIntervalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIntervalMixin(value): {
                    outlier_detection+: {
                      interval+: value,
                    },
                  },
                  interval+:
                    {
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        outlier_detection+: {
                          interval+: {
                            unit: value,
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        outlier_detection+: {
                          interval+: {
                            value: value,
                          },
                        },
                      },
                    },
                  '#withMaxEjectionPercent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxEjectionPercent(value): {
                    outlier_detection+: {
                      max_ejection_percent: value,
                    },
                  },
                  '#withMaxServerErrors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxServerErrors(value): {
                    outlier_detection+: {
                      max_server_errors: value,
                    },
                  },
                },
              '#withPortMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPortMapping(value): {
                port_mapping: value,
              },
              '#withPortMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPortMappingMixin(value): {
                port_mapping+: value,
              },
              port_mapping+:
                {
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port_mapping+: {
                      port: value,
                    },
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    port_mapping+: {
                      protocol: value,
                    },
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeout(value): {
                timeout: value,
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeoutMixin(value): {
                timeout+: value,
              },
              timeout+:
                {
                  '#withGrpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withGrpc(value): {
                    timeout+: {
                      grpc: value,
                    },
                  },
                  '#withGrpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withGrpcMixin(value): {
                    timeout+: {
                      grpc+: value,
                    },
                  },
                  grpc+:
                    {
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdle(value): {
                        timeout+: {
                          grpc+: {
                            idle: value,
                          },
                        },
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdleMixin(value): {
                        timeout+: {
                          grpc+: {
                            idle+: value,
                          },
                        },
                      },
                      idle+:
                        {
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            timeout+: {
                              grpc+: {
                                idle+: {
                                  unit: value,
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            timeout+: {
                              grpc+: {
                                idle+: {
                                  value: value,
                                },
                              },
                            },
                          },
                        },
                      '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPerRequest(value): {
                        timeout+: {
                          grpc+: {
                            per_request: value,
                          },
                        },
                      },
                      '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPerRequestMixin(value): {
                        timeout+: {
                          grpc+: {
                            per_request+: value,
                          },
                        },
                      },
                      per_request+:
                        {
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            timeout+: {
                              grpc+: {
                                per_request+: {
                                  unit: value,
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            timeout+: {
                              grpc+: {
                                per_request+: {
                                  value: value,
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withHttp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttp(value): {
                    timeout+: {
                      http: value,
                    },
                  },
                  '#withHttpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttpMixin(value): {
                    timeout+: {
                      http+: value,
                    },
                  },
                  http+:
                    {
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdle(value): {
                        timeout+: {
                          http+: {
                            idle: value,
                          },
                        },
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdleMixin(value): {
                        timeout+: {
                          http+: {
                            idle+: value,
                          },
                        },
                      },
                      idle+:
                        {
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            timeout+: {
                              http+: {
                                idle+: {
                                  unit: value,
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            timeout+: {
                              http+: {
                                idle+: {
                                  value: value,
                                },
                              },
                            },
                          },
                        },
                      '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPerRequest(value): {
                        timeout+: {
                          http+: {
                            per_request: value,
                          },
                        },
                      },
                      '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPerRequestMixin(value): {
                        timeout+: {
                          http+: {
                            per_request+: value,
                          },
                        },
                      },
                      per_request+:
                        {
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            timeout+: {
                              http+: {
                                per_request+: {
                                  unit: value,
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            timeout+: {
                              http+: {
                                per_request+: {
                                  value: value,
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withHttp2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttp2(value): {
                    timeout+: {
                      http2: value,
                    },
                  },
                  '#withHttp2Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withHttp2Mixin(value): {
                    timeout+: {
                      http2+: value,
                    },
                  },
                  http2+:
                    {
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdle(value): {
                        timeout+: {
                          http2+: {
                            idle: value,
                          },
                        },
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdleMixin(value): {
                        timeout+: {
                          http2+: {
                            idle+: value,
                          },
                        },
                      },
                      idle+:
                        {
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            timeout+: {
                              http2+: {
                                idle+: {
                                  unit: value,
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            timeout+: {
                              http2+: {
                                idle+: {
                                  value: value,
                                },
                              },
                            },
                          },
                        },
                      '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPerRequest(value): {
                        timeout+: {
                          http2+: {
                            per_request: value,
                          },
                        },
                      },
                      '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withPerRequestMixin(value): {
                        timeout+: {
                          http2+: {
                            per_request+: value,
                          },
                        },
                      },
                      per_request+:
                        {
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            timeout+: {
                              http2+: {
                                per_request+: {
                                  unit: value,
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            timeout+: {
                              http2+: {
                                per_request+: {
                                  value: value,
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withTcp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTcp(value): {
                    timeout+: {
                      tcp: value,
                    },
                  },
                  '#withTcpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTcpMixin(value): {
                    timeout+: {
                      tcp+: value,
                    },
                  },
                  tcp+:
                    {
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdle(value): {
                        timeout+: {
                          tcp+: {
                            idle: value,
                          },
                        },
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withIdleMixin(value): {
                        timeout+: {
                          tcp+: {
                            idle+: value,
                          },
                        },
                      },
                      idle+:
                        {
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            timeout+: {
                              tcp+: {
                                idle+: {
                                  unit: value,
                                },
                              },
                            },
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            timeout+: {
                              tcp+: {
                                idle+: {
                                  value: value,
                                },
                              },
                            },
                          },
                        },
                    },
                },
              '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTls(value): {
                tls: value,
              },
              '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTlsMixin(value): {
                tls+: value,
              },
              tls+:
                {
                  '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCertificate(value): {
                    tls+: {
                      certificate: value,
                    },
                  },
                  '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCertificateMixin(value): {
                    tls+: {
                      certificate+: value,
                    },
                  },
                  certificate+:
                    {
                      '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withAcm(value): {
                        tls+: {
                          certificate+: {
                            acm: value,
                          },
                        },
                      },
                      '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withAcmMixin(value): {
                        tls+: {
                          certificate+: {
                            acm+: value,
                          },
                        },
                      },
                      acm+:
                        {
                          '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateArn(value): {
                            tls+: {
                              certificate+: {
                                acm+: {
                                  certificate_arn: value,
                                },
                              },
                            },
                          },
                        },
                      '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFile(value): {
                        tls+: {
                          certificate+: {
                            file: value,
                          },
                        },
                      },
                      '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFileMixin(value): {
                        tls+: {
                          certificate+: {
                            file+: value,
                          },
                        },
                      },
                      file+:
                        {
                          '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateChain(value): {
                            tls+: {
                              certificate+: {
                                file+: {
                                  certificate_chain: value,
                                },
                              },
                            },
                          },
                          '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrivateKey(value): {
                            tls+: {
                              certificate+: {
                                file+: {
                                  private_key: value,
                                },
                              },
                            },
                          },
                        },
                      '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSds(value): {
                        tls+: {
                          certificate+: {
                            sds: value,
                          },
                        },
                      },
                      '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSdsMixin(value): {
                        tls+: {
                          certificate+: {
                            sds+: value,
                          },
                        },
                      },
                      sds+:
                        {
                          '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSecretName(value): {
                            tls+: {
                              certificate+: {
                                sds+: {
                                  secret_name: value,
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMode(value): {
                    tls+: {
                      mode: value,
                    },
                  },
                  '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withValidation(value): {
                    tls+: {
                      validation: value,
                    },
                  },
                  '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withValidationMixin(value): {
                    tls+: {
                      validation+: value,
                    },
                  },
                  validation+:
                    {
                      '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSubjectAlternativeNames(value): {
                        tls+: {
                          validation+: {
                            subject_alternative_names: value,
                          },
                        },
                      },
                      '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSubjectAlternativeNamesMixin(value): {
                        tls+: {
                          validation+: {
                            subject_alternative_names+: value,
                          },
                        },
                      },
                      subject_alternative_names+:
                        {
                          '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withMatch(value): {
                            tls+: {
                              validation+: {
                                subject_alternative_names+: {
                                  match: value,
                                },
                              },
                            },
                          },
                          '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withMatchMixin(value): {
                            tls+: {
                              validation+: {
                                subject_alternative_names+: {
                                  match+: value,
                                },
                              },
                            },
                          },
                          match+:
                            {
                              '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExact(value): {
                                tls+: {
                                  validation+: {
                                    subject_alternative_names+: {
                                      match+: {
                                        exact:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                    },
                                  },
                                },
                              },
                              '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExactMixin(value): {
                                tls+: {
                                  validation+: {
                                    subject_alternative_names+: {
                                      match+: {
                                        exact+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                    },
                                  },
                                },
                              },
                            },
                        },
                      '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTrust(value): {
                        tls+: {
                          validation+: {
                            trust: value,
                          },
                        },
                      },
                      '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTrustMixin(value): {
                        tls+: {
                          validation+: {
                            trust+: value,
                          },
                        },
                      },
                      trust+:
                        {
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFile(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  file: value,
                                },
                              },
                            },
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withFileMixin(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  file+: value,
                                },
                              },
                            },
                          },
                          file+:
                            {
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                tls+: {
                                  validation+: {
                                    trust+: {
                                      file+: {
                                        certificate_chain: value,
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSds(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  sds: value,
                                },
                              },
                            },
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSdsMixin(value): {
                            tls+: {
                              validation+: {
                                trust+: {
                                  sds+: value,
                                },
                              },
                            },
                          },
                          sds+:
                            {
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                tls+: {
                                  validation+: {
                                    trust+: {
                                      sds+: {
                                        secret_name: value,
                                      },
                                    },
                                  },
                                },
                              },
                            },
                        },
                    },
                },
            },
          '#withLogging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLogging(value): {
            spec+: {
              logging: value,
            },
          },
          '#withLoggingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLoggingMixin(value): {
            spec+: {
              logging+: value,
            },
          },
          logging+:
            {
              '#withAccessLog': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAccessLog(value): {
                spec+: {
                  logging+: {
                    access_log: value,
                  },
                },
              },
              '#withAccessLogMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAccessLogMixin(value): {
                spec+: {
                  logging+: {
                    access_log+: value,
                  },
                },
              },
              access_log+:
                {
                  '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withFile(value): {
                    spec+: {
                      logging+: {
                        access_log+: {
                          file: value,
                        },
                      },
                    },
                  },
                  '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withFileMixin(value): {
                    spec+: {
                      logging+: {
                        access_log+: {
                          file+: value,
                        },
                      },
                    },
                  },
                  file+:
                    {
                      '#withFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFormat(value): {
                        spec+: {
                          logging+: {
                            access_log+: {
                              file+: {
                                format: value,
                              },
                            },
                          },
                        },
                      },
                      '#withFormatMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withFormatMixin(value): {
                        spec+: {
                          logging+: {
                            access_log+: {
                              file+: {
                                format+: value,
                              },
                            },
                          },
                        },
                      },
                      format+:
                        {
                          '#withJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJson(value): {
                            spec+: {
                              logging+: {
                                access_log+: {
                                  file+: {
                                    format+: {
                                      json:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withJsonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJsonMixin(value): {
                            spec+: {
                              logging+: {
                                access_log+: {
                                  file+: {
                                    format+: {
                                      json+:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                          json+:
                            {
                              '#': { help: '', name: 'json' },
                              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withKey(value): {
                                key: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withText(value): {
                            spec+: {
                              logging+: {
                                access_log+: {
                                  file+: {
                                    format+: {
                                      text: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withPath(value): {
                        spec+: {
                          logging+: {
                            access_log+: {
                              file+: {
                                path: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
            },
          '#withServiceDiscovery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServiceDiscovery(value): {
            spec+: {
              service_discovery: value,
            },
          },
          '#withServiceDiscoveryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServiceDiscoveryMixin(value): {
            spec+: {
              service_discovery+: value,
            },
          },
          service_discovery+:
            {
              '#withAwsCloudMap': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAwsCloudMap(value): {
                spec+: {
                  service_discovery+: {
                    aws_cloud_map: value,
                  },
                },
              },
              '#withAwsCloudMapMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAwsCloudMapMixin(value): {
                spec+: {
                  service_discovery+: {
                    aws_cloud_map+: value,
                  },
                },
              },
              aws_cloud_map+:
                {
                  '#withAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withAttributes(value): {
                    spec+: {
                      service_discovery+: {
                        aws_cloud_map+: {
                          attributes: value,
                        },
                      },
                    },
                  },
                  '#withAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withAttributesMixin(value): {
                    spec+: {
                      service_discovery+: {
                        aws_cloud_map+: {
                          attributes+: value,
                        },
                      },
                    },
                  },
                  '#withNamespaceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withNamespaceName(value): {
                    spec+: {
                      service_discovery+: {
                        aws_cloud_map+: {
                          namespace_name: value,
                        },
                      },
                    },
                  },
                  '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withServiceName(value): {
                    spec+: {
                      service_discovery+: {
                        aws_cloud_map+: {
                          service_name: value,
                        },
                      },
                    },
                  },
                },
              '#withDns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDns(value): {
                spec+: {
                  service_discovery+: {
                    dns: value,
                  },
                },
              },
              '#withDnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDnsMixin(value): {
                spec+: {
                  service_discovery+: {
                    dns+: value,
                  },
                },
              },
              dns+:
                {
                  '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withHostname(value): {
                    spec+: {
                      service_discovery+: {
                        dns+: {
                          hostname: value,
                        },
                      },
                    },
                  },
                  '#withIpPreference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withIpPreference(value): {
                    spec+: {
                      service_discovery+: {
                        dns+: {
                          ip_preference: value,
                        },
                      },
                    },
                  },
                  '#withResponseType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withResponseType(value): {
                    spec+: {
                      service_discovery+: {
                        dns+: {
                          response_type: value,
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_appmesh_virtual_router:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'spec', type: 'object' }], help: '' } },
      new(tf_resource_key, mesh_name, name, spec):
        self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withSpec(spec),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_appmesh_virtual_router: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        created_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        last_updated_date: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        mesh_name: value,
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        mesh_owner: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        resource_owner: value,
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpec(value): {
        spec: value,
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpecMixin(value): {
        spec+: value,
      },
      spec+:
        {
          '#withListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListener(value): {
            spec+: {
              listener:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListenerMixin(value): {
            spec+: {
              listener+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          listener+:
            {
              '#': { help: '', name: 'listener' },
              '#withPortMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPortMapping(value): {
                port_mapping: value,
              },
              '#withPortMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPortMappingMixin(value): {
                port_mapping+: value,
              },
              port_mapping+:
                {
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port_mapping+: {
                      port: value,
                    },
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    port_mapping+: {
                      protocol: value,
                    },
                  },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_appmesh_virtual_service:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'spec', type: 'object' }], help: '' } },
      new(tf_resource_key, mesh_name, name, spec):
        self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withSpec(spec),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_appmesh_virtual_service: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        created_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        last_updated_date: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        mesh_name: value,
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        mesh_owner: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        resource_owner: value,
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpec(value): {
        spec: value,
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpecMixin(value): {
        spec+: value,
      },
      spec+:
        {
          '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProvider(value): {
            spec+: {
              provider: value,
            },
          },
          '#withProviderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProviderMixin(value): {
            spec+: {
              provider+: value,
            },
          },
          provider+:
            {
              '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVirtualNode(value): {
                spec+: {
                  provider+: {
                    virtual_node: value,
                  },
                },
              },
              '#withVirtualNodeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVirtualNodeMixin(value): {
                spec+: {
                  provider+: {
                    virtual_node+: value,
                  },
                },
              },
              virtual_node+:
                {
                  '#withVirtualNodeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVirtualNodeName(value): {
                    spec+: {
                      provider+: {
                        virtual_node+: {
                          virtual_node_name: value,
                        },
                      },
                    },
                  },
                },
              '#withVirtualRouter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVirtualRouter(value): {
                spec+: {
                  provider+: {
                    virtual_router: value,
                  },
                },
              },
              '#withVirtualRouterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVirtualRouterMixin(value): {
                spec+: {
                  provider+: {
                    virtual_router+: value,
                  },
                },
              },
              virtual_router+:
                {
                  '#withVirtualRouterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVirtualRouterName(value): {
                    spec+: {
                      provider+: {
                        virtual_router+: {
                          virtual_router_name: value,
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
}
