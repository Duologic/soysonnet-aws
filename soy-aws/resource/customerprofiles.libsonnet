// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'customerprofiles',
  },
  aws_customerprofiles_domain:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'default_expiration_days', type: 'number' }, { default: null, enums: null, name: 'domain_name', type: 'string' }], help: '' } },
      new(tf_resource_key, default_expiration_days, domain_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDefaultExpirationDays(default_expiration_days)
        + self.withDomainName(domain_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_customerprofiles_domain+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDeadLetterQueueUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeadLetterQueueUrl(value): {
        dead_letter_queue_url: value,
      },
      '#withDefaultEncryptionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultEncryptionKey(value): {
        default_encryption_key: value,
      },
      '#withDefaultExpirationDays': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultExpirationDays(value): {
        default_expiration_days: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomainName(value): {
        domain_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMatching': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMatching(value): {
        matching: value,
      },
      '#withMatchingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMatchingMixin(value): {
        matching+: value,
      },
      matching+:
        {
          '#withAutoMerging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAutoMerging(value): {
            matching+: {
              auto_merging: value,
            },
          },
          '#withAutoMergingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAutoMergingMixin(value): {
            matching+: {
              auto_merging+: value,
            },
          },
          auto_merging+:
            {
              '#withConflictResolution': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConflictResolution(value): {
                matching+: {
                  auto_merging+: {
                    conflict_resolution: value,
                  },
                },
              },
              '#withConflictResolutionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConflictResolutionMixin(value): {
                matching+: {
                  auto_merging+: {
                    conflict_resolution+: value,
                  },
                },
              },
              conflict_resolution+:
                {
                  '#withConflictResolvingModel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withConflictResolvingModel(value): {
                    matching+: {
                      auto_merging+: {
                        conflict_resolution+: {
                          conflict_resolving_model: value,
                        },
                      },
                    },
                  },
                  '#withSourceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSourceName(value): {
                    matching+: {
                      auto_merging+: {
                        conflict_resolution+: {
                          source_name: value,
                        },
                      },
                    },
                  },
                },
              '#withConsolidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConsolidation(value): {
                matching+: {
                  auto_merging+: {
                    consolidation: value,
                  },
                },
              },
              '#withConsolidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withConsolidationMixin(value): {
                matching+: {
                  auto_merging+: {
                    consolidation+: value,
                  },
                },
              },
              consolidation+:
                {
                  '#withMatchingAttributesList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchingAttributesList(value): {
                    matching+: {
                      auto_merging+: {
                        consolidation+: {
                          matching_attributes_list:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMatchingAttributesListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchingAttributesListMixin(value): {
                    matching+: {
                      auto_merging+: {
                        consolidation+: {
                          matching_attributes_list+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                matching+: {
                  auto_merging+: {
                    enabled: value,
                  },
                },
              },
              '#withMinAllowedConfidenceScoreForMerging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMinAllowedConfidenceScoreForMerging(value): {
                matching+: {
                  auto_merging+: {
                    min_allowed_confidence_score_for_merging: value,
                  },
                },
              },
            },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            matching+: {
              enabled: value,
            },
          },
          '#withExportingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExportingConfig(value): {
            matching+: {
              exporting_config: value,
            },
          },
          '#withExportingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExportingConfigMixin(value): {
            matching+: {
              exporting_config+: value,
            },
          },
          exporting_config+:
            {
              '#withS3Exporting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withS3Exporting(value): {
                matching+: {
                  exporting_config+: {
                    s3_exporting: value,
                  },
                },
              },
              '#withS3ExportingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withS3ExportingMixin(value): {
                matching+: {
                  exporting_config+: {
                    s3_exporting+: value,
                  },
                },
              },
              s3_exporting+:
                {
                  '#withS3BucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3BucketName(value): {
                    matching+: {
                      exporting_config+: {
                        s3_exporting+: {
                          s3_bucket_name: value,
                        },
                      },
                    },
                  },
                  '#withS3KeyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3KeyName(value): {
                    matching+: {
                      exporting_config+: {
                        s3_exporting+: {
                          s3_key_name: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withJobSchedule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJobSchedule(value): {
            matching+: {
              job_schedule: value,
            },
          },
          '#withJobScheduleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJobScheduleMixin(value): {
            matching+: {
              job_schedule+: value,
            },
          },
          job_schedule+:
            {
              '#withDayOfTheWeek': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDayOfTheWeek(value): {
                matching+: {
                  job_schedule+: {
                    day_of_the_week: value,
                  },
                },
              },
              '#withTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTime(value): {
                matching+: {
                  job_schedule+: {
                    time: value,
                  },
                },
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRuleBasedMatching': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRuleBasedMatching(value): {
        rule_based_matching: value,
      },
      '#withRuleBasedMatchingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRuleBasedMatchingMixin(value): {
        rule_based_matching+: value,
      },
      rule_based_matching+:
        {
          '#withAttributeTypesSelector': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAttributeTypesSelector(value): {
            rule_based_matching+: {
              attribute_types_selector: value,
            },
          },
          '#withAttributeTypesSelectorMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAttributeTypesSelectorMixin(value): {
            rule_based_matching+: {
              attribute_types_selector+: value,
            },
          },
          attribute_types_selector+:
            {
              '#withAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAddress(value): {
                rule_based_matching+: {
                  attribute_types_selector+: {
                    address:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAddressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAddressMixin(value): {
                rule_based_matching+: {
                  attribute_types_selector+: {
                    address+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAttributeMatchingModel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttributeMatchingModel(value): {
                rule_based_matching+: {
                  attribute_types_selector+: {
                    attribute_matching_model: value,
                  },
                },
              },
              '#withEmailAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEmailAddress(value): {
                rule_based_matching+: {
                  attribute_types_selector+: {
                    email_address:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withEmailAddressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEmailAddressMixin(value): {
                rule_based_matching+: {
                  attribute_types_selector+: {
                    email_address+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPhoneNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPhoneNumber(value): {
                rule_based_matching+: {
                  attribute_types_selector+: {
                    phone_number:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withPhoneNumberMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPhoneNumberMixin(value): {
                rule_based_matching+: {
                  attribute_types_selector+: {
                    phone_number+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withConflictResolution': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withConflictResolution(value): {
            rule_based_matching+: {
              conflict_resolution: value,
            },
          },
          '#withConflictResolutionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withConflictResolutionMixin(value): {
            rule_based_matching+: {
              conflict_resolution+: value,
            },
          },
          conflict_resolution+:
            {
              '#withConflictResolvingModel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withConflictResolvingModel(value): {
                rule_based_matching+: {
                  conflict_resolution+: {
                    conflict_resolving_model: value,
                  },
                },
              },
              '#withSourceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSourceName(value): {
                rule_based_matching+: {
                  conflict_resolution+: {
                    source_name: value,
                  },
                },
              },
            },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            rule_based_matching+: {
              enabled: value,
            },
          },
          '#withExportingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExportingConfig(value): {
            rule_based_matching+: {
              exporting_config: value,
            },
          },
          '#withExportingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExportingConfigMixin(value): {
            rule_based_matching+: {
              exporting_config+: value,
            },
          },
          exporting_config+:
            {
              '#withS3Exporting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withS3Exporting(value): {
                rule_based_matching+: {
                  exporting_config+: {
                    s3_exporting: value,
                  },
                },
              },
              '#withS3ExportingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withS3ExportingMixin(value): {
                rule_based_matching+: {
                  exporting_config+: {
                    s3_exporting+: value,
                  },
                },
              },
              s3_exporting+:
                {
                  '#withS3BucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3BucketName(value): {
                    rule_based_matching+: {
                      exporting_config+: {
                        s3_exporting+: {
                          s3_bucket_name: value,
                        },
                      },
                    },
                  },
                  '#withS3KeyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3KeyName(value): {
                    rule_based_matching+: {
                      exporting_config+: {
                        s3_exporting+: {
                          s3_key_name: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withMatchingRules': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMatchingRules(value): {
            rule_based_matching+: {
              matching_rules:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withMatchingRulesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMatchingRulesMixin(value): {
            rule_based_matching+: {
              matching_rules+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          matching_rules+:
            {
              '#': { help: '', name: 'matching_rules' },
              '#withRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRule(value): {
                rule:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRuleMixin(value): {
                rule+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withMaxAllowedRuleLevelForMatching': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxAllowedRuleLevelForMatching(value): {
            rule_based_matching+: {
              max_allowed_rule_level_for_matching: value,
            },
          },
          '#withMaxAllowedRuleLevelForMerging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxAllowedRuleLevelForMerging(value): {
            rule_based_matching+: {
              max_allowed_rule_level_for_merging: value,
            },
          },
          '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatus(value): {
            rule_based_matching+: {
              status: value,
            },
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_customerprofiles_profile:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'domain_name', type: 'string' }], help: '' } },
      new(tf_resource_key, domain_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDomainName(domain_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_customerprofiles_profile+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAccountNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAccountNumber(value): {
        account_number: value,
      },
      '#withAdditionalInformation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAdditionalInformation(value): {
        additional_information: value,
      },
      '#withAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAddress(value): {
        address: value,
      },
      '#withAddressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAddressMixin(value): {
        address+: value,
      },
      address+:
        {
          '#withAddress1': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress1(value): {
            address+: {
              address_1: value,
            },
          },
          '#withAddress2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress2(value): {
            address+: {
              address_2: value,
            },
          },
          '#withAddress3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress3(value): {
            address+: {
              address_3: value,
            },
          },
          '#withAddress4': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress4(value): {
            address+: {
              address_4: value,
            },
          },
          '#withCity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCity(value): {
            address+: {
              city: value,
            },
          },
          '#withCountry': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCountry(value): {
            address+: {
              country: value,
            },
          },
          '#withCounty': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCounty(value): {
            address+: {
              county: value,
            },
          },
          '#withPostalCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostalCode(value): {
            address+: {
              postal_code: value,
            },
          },
          '#withProvince': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProvince(value): {
            address+: {
              province: value,
            },
          },
          '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withState(value): {
            address+: {
              state: value,
            },
          },
        },
      '#withAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAttributes(value): {
        attributes: value,
      },
      '#withAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAttributesMixin(value): {
        attributes+: value,
      },
      '#withBillingAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withBillingAddress(value): {
        billing_address: value,
      },
      '#withBillingAddressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withBillingAddressMixin(value): {
        billing_address+: value,
      },
      billing_address+:
        {
          '#withAddress1': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress1(value): {
            billing_address+: {
              address_1: value,
            },
          },
          '#withAddress2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress2(value): {
            billing_address+: {
              address_2: value,
            },
          },
          '#withAddress3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress3(value): {
            billing_address+: {
              address_3: value,
            },
          },
          '#withAddress4': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress4(value): {
            billing_address+: {
              address_4: value,
            },
          },
          '#withCity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCity(value): {
            billing_address+: {
              city: value,
            },
          },
          '#withCountry': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCountry(value): {
            billing_address+: {
              country: value,
            },
          },
          '#withCounty': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCounty(value): {
            billing_address+: {
              county: value,
            },
          },
          '#withPostalCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostalCode(value): {
            billing_address+: {
              postal_code: value,
            },
          },
          '#withProvince': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProvince(value): {
            billing_address+: {
              province: value,
            },
          },
          '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withState(value): {
            billing_address+: {
              state: value,
            },
          },
        },
      '#withBirthDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBirthDate(value): {
        birth_date: value,
      },
      '#withBusinessEmailAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBusinessEmailAddress(value): {
        business_email_address: value,
      },
      '#withBusinessName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBusinessName(value): {
        business_name: value,
      },
      '#withBusinessPhoneNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBusinessPhoneNumber(value): {
        business_phone_number: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomainName(value): {
        domain_name: value,
      },
      '#withEmailAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEmailAddress(value): {
        email_address: value,
      },
      '#withFirstName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFirstName(value): {
        first_name: value,
      },
      '#withGenderString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withGenderString(value): {
        gender_string: value,
      },
      '#withHomePhoneNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHomePhoneNumber(value): {
        home_phone_number: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastName(value): {
        last_name: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMailingAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMailingAddress(value): {
        mailing_address: value,
      },
      '#withMailingAddressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMailingAddressMixin(value): {
        mailing_address+: value,
      },
      mailing_address+:
        {
          '#withAddress1': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress1(value): {
            mailing_address+: {
              address_1: value,
            },
          },
          '#withAddress2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress2(value): {
            mailing_address+: {
              address_2: value,
            },
          },
          '#withAddress3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress3(value): {
            mailing_address+: {
              address_3: value,
            },
          },
          '#withAddress4': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress4(value): {
            mailing_address+: {
              address_4: value,
            },
          },
          '#withCity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCity(value): {
            mailing_address+: {
              city: value,
            },
          },
          '#withCountry': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCountry(value): {
            mailing_address+: {
              country: value,
            },
          },
          '#withCounty': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCounty(value): {
            mailing_address+: {
              county: value,
            },
          },
          '#withPostalCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostalCode(value): {
            mailing_address+: {
              postal_code: value,
            },
          },
          '#withProvince': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProvince(value): {
            mailing_address+: {
              province: value,
            },
          },
          '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withState(value): {
            mailing_address+: {
              state: value,
            },
          },
        },
      '#withMiddleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMiddleName(value): {
        middle_name: value,
      },
      '#withMobilePhoneNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMobilePhoneNumber(value): {
        mobile_phone_number: value,
      },
      '#withPartyTypeString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPartyTypeString(value): {
        party_type_string: value,
      },
      '#withPersonalEmailAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPersonalEmailAddress(value): {
        personal_email_address: value,
      },
      '#withPhoneNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPhoneNumber(value): {
        phone_number: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withShippingAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withShippingAddress(value): {
        shipping_address: value,
      },
      '#withShippingAddressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withShippingAddressMixin(value): {
        shipping_address+: value,
      },
      shipping_address+:
        {
          '#withAddress1': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress1(value): {
            shipping_address+: {
              address_1: value,
            },
          },
          '#withAddress2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress2(value): {
            shipping_address+: {
              address_2: value,
            },
          },
          '#withAddress3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress3(value): {
            shipping_address+: {
              address_3: value,
            },
          },
          '#withAddress4': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress4(value): {
            shipping_address+: {
              address_4: value,
            },
          },
          '#withCity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCity(value): {
            shipping_address+: {
              city: value,
            },
          },
          '#withCountry': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCountry(value): {
            shipping_address+: {
              country: value,
            },
          },
          '#withCounty': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCounty(value): {
            shipping_address+: {
              county: value,
            },
          },
          '#withPostalCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostalCode(value): {
            shipping_address+: {
              postal_code: value,
            },
          },
          '#withProvince': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProvince(value): {
            shipping_address+: {
              province: value,
            },
          },
          '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withState(value): {
            shipping_address+: {
              state: value,
            },
          },
        },
    },
}
