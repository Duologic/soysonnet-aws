// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'bedrockagent',
  },
  aws_bedrockagent_agent:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'agent_name', type: 'string' }, { default: null, enums: null, name: 'agent_resource_role_arn', type: 'string' }, { default: null, enums: null, name: 'foundation_model', type: 'string' }], help: '' } },
      new(tf_resource_key, agent_name, agent_resource_role_arn, foundation_model):
        self.withTfResourceKey(tf_resource_key)
        + self.withAgentName(agent_name)
        + self.withAgentResourceRoleArn(agent_resource_role_arn)
        + self.withFoundationModel(foundation_model),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_bedrockagent_agent+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentArn(value): {
        agent_arn: value,
      },
      '#withAgentCollaboration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentCollaboration(value): {
        agent_collaboration: value,
      },
      '#withAgentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentId(value): {
        agent_id: value,
      },
      '#withAgentName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentName(value): {
        agent_name: value,
      },
      '#withAgentResourceRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentResourceRoleArn(value): {
        agent_resource_role_arn: value,
      },
      '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentVersion(value): {
        agent_version: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomerEncryptionKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomerEncryptionKeyArn(value): {
        customer_encryption_key_arn: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withFoundationModel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFoundationModel(value): {
        foundation_model: value,
      },
      '#withGuardrailConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGuardrailConfiguration(value): {
        guardrail_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withGuardrailConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGuardrailConfigurationMixin(value): {
        guardrail_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      guardrail_configuration+:
        {
          '#': { help: '', name: 'guardrail_configuration' },
          '#withGuardrailIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGuardrailIdentifier(value): {
            guardrail_identifier: value,
          },
          '#withGuardrailVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGuardrailVersion(value): {
            guardrail_version: value,
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIdleSessionTtlInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withIdleSessionTtlInSeconds(value): {
        idle_session_ttl_in_seconds: value,
      },
      '#withInstruction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstruction(value): {
        instruction: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withPrepareAgent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPrepareAgent(value=true): {
        prepare_agent: value,
      },
      '#withPromptOverrideConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPromptOverrideConfiguration(value): {
        prompt_override_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPromptOverrideConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPromptOverrideConfigurationMixin(value): {
        prompt_override_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      prompt_override_configuration+:
        {
          '#': { help: '', name: 'prompt_override_configuration' },
          '#withOverrideLambda': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withOverrideLambda(value): {
            override_lambda: value,
          },
          '#withPromptConfigurations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPromptConfigurations(value): {
            prompt_configurations:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPromptConfigurationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPromptConfigurationsMixin(value): {
            prompt_configurations+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          prompt_configurations+:
            {
              '#': { help: '', name: 'prompt_configurations' },
              '#withBasePromptTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBasePromptTemplate(value): {
                base_prompt_template: value,
              },
              '#withInferenceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withInferenceConfiguration(value): {
                inference_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withInferenceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withInferenceConfigurationMixin(value): {
                inference_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              inference_configuration+:
                {
                  '#': { help: '', name: 'inference_configuration' },
                  '#withMaxLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxLength(value): {
                    max_length: value,
                  },
                  '#withStopSequences': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStopSequences(value): {
                    stop_sequences:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withStopSequencesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStopSequencesMixin(value): {
                    stop_sequences+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTemperature': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTemperature(value): {
                    temperature: value,
                  },
                  '#withTopK': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTopK(value): {
                    top_k: value,
                  },
                  '#withTopP': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTopP(value): {
                    top_p: value,
                  },
                },
              '#withParserMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withParserMode(value): {
                parser_mode: value,
              },
              '#withPromptCreationMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPromptCreationMode(value): {
                prompt_creation_mode: value,
              },
              '#withPromptState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPromptState(value): {
                prompt_state: value,
              },
              '#withPromptType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPromptType(value): {
                prompt_type: value,
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSkipResourceInUseCheck': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSkipResourceInUseCheck(value=true): {
        skip_resource_in_use_check: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
  aws_bedrockagent_agent_action_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'action_group_name', type: 'string' }, { default: null, enums: null, name: 'agent_id', type: 'string' }, { default: null, enums: null, name: 'agent_version', type: 'string' }], help: '' } },
      new(tf_resource_key, action_group_name, agent_id, agent_version):
        self.withTfResourceKey(tf_resource_key)
        + self.withActionGroupName(action_group_name)
        + self.withAgentId(agent_id)
        + self.withAgentVersion(agent_version),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_bedrockagent_agent_action_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withActionGroupExecutor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActionGroupExecutor(value): {
        action_group_executor:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withActionGroupExecutorMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActionGroupExecutorMixin(value): {
        action_group_executor+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      action_group_executor+:
        {
          '#': { help: '', name: 'action_group_executor' },
          '#withCustomControl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCustomControl(value): {
            custom_control: value,
          },
          '#withLambda': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLambda(value): {
            lambda: value,
          },
        },
      '#withActionGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withActionGroupId(value): {
        action_group_id: value,
      },
      '#withActionGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withActionGroupName(value): {
        action_group_name: value,
      },
      '#withActionGroupState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withActionGroupState(value): {
        action_group_state: value,
      },
      '#withAgentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentId(value): {
        agent_id: value,
      },
      '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentVersion(value): {
        agent_version: value,
      },
      '#withApiSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withApiSchema(value): {
        api_schema:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withApiSchemaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withApiSchemaMixin(value): {
        api_schema+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      api_schema+:
        {
          '#': { help: '', name: 'api_schema' },
          '#withPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPayload(value): {
            payload: value,
          },
          '#withS3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3(value): {
            s3:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withS3Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3Mixin(value): {
            s3+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          s3+:
            {
              '#': { help: '', name: 's3' },
              '#withS3BucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3BucketName(value): {
                s3_bucket_name: value,
              },
              '#withS3ObjectKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3ObjectKey(value): {
                s3_object_key: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withFunctionSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFunctionSchema(value): {
        function_schema:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFunctionSchemaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFunctionSchemaMixin(value): {
        function_schema+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      function_schema+:
        {
          '#': { help: '', name: 'function_schema' },
          '#withMemberFunctions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMemberFunctions(value): {
            member_functions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMemberFunctionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMemberFunctionsMixin(value): {
            member_functions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          member_functions+:
            {
              '#': { help: '', name: 'member_functions' },
              '#withFunctions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFunctions(value): {
                functions:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFunctionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFunctionsMixin(value): {
                functions+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              functions+:
                {
                  '#': { help: '', name: 'functions' },
                  '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDescription(value): {
                    description: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withDescription(value): {
                        description: value,
                      },
                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMapBlockKey(value): {
                        map_block_key: value,
                      },
                      '#withRequired': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withRequired(value=true): {
                        required: value,
                      },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withParentActionGroupSignature': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParentActionGroupSignature(value): {
        parent_action_group_signature: value,
      },
      '#withPrepareAgent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPrepareAgent(value=true): {
        prepare_agent: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSkipResourceInUseCheck': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSkipResourceInUseCheck(value=true): {
        skip_resource_in_use_check: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
  aws_bedrockagent_agent_alias:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'agent_alias_name', type: 'string' }, { default: null, enums: null, name: 'agent_id', type: 'string' }], help: '' } },
      new(tf_resource_key, agent_alias_name, agent_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withAgentAliasName(agent_alias_name)
        + self.withAgentId(agent_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_bedrockagent_agent_alias+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentAliasArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentAliasArn(value): {
        agent_alias_arn: value,
      },
      '#withAgentAliasId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentAliasId(value): {
        agent_alias_id: value,
      },
      '#withAgentAliasName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentAliasName(value): {
        agent_alias_name: value,
      },
      '#withAgentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentId(value): {
        agent_id: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoutingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRoutingConfiguration(value): {
        routing_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoutingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRoutingConfigurationMixin(value): {
        routing_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      routing_configuration+:
        {
          '#': { help: '', name: 'routing_configuration' },
          '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAgentVersion(value): {
            agent_version: value,
          },
          '#withProvisionedThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProvisionedThroughput(value): {
            provisioned_throughput: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
  aws_bedrockagent_agent_collaborator:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'agent_id', type: 'string' }, { default: null, enums: null, name: 'collaboration_instruction', type: 'string' }, { default: null, enums: null, name: 'collaborator_name', type: 'string' }], help: '' } },
      new(tf_resource_key, agent_id, collaboration_instruction, collaborator_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withAgentId(agent_id)
        + self.withCollaborationInstruction(collaboration_instruction)
        + self.withCollaboratorName(collaborator_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_bedrockagent_agent_collaborator+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentDescriptor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAgentDescriptor(value): {
        agent_descriptor:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAgentDescriptorMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAgentDescriptorMixin(value): {
        agent_descriptor+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      agent_descriptor+:
        {
          '#': { help: '', name: 'agent_descriptor' },
          '#withAliasArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAliasArn(value): {
            alias_arn: value,
          },
        },
      '#withAgentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentId(value): {
        agent_id: value,
      },
      '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentVersion(value): {
        agent_version: value,
      },
      '#withCollaborationInstruction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCollaborationInstruction(value): {
        collaboration_instruction: value,
      },
      '#withCollaboratorId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCollaboratorId(value): {
        collaborator_id: value,
      },
      '#withCollaboratorName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCollaboratorName(value): {
        collaborator_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withPrepareAgent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPrepareAgent(value=true): {
        prepare_agent: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRelayConversationHistory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRelayConversationHistory(value): {
        relay_conversation_history: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
  aws_bedrockagent_agent_knowledge_base_association:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'agent_id', type: 'string' }, { default: null, enums: null, name: 'description', type: 'string' }, { default: null, enums: null, name: 'knowledge_base_id', type: 'string' }, { default: null, enums: null, name: 'knowledge_base_state', type: 'string' }], help: '' } },
      new(tf_resource_key, agent_id, description, knowledge_base_id, knowledge_base_state):
        self.withTfResourceKey(tf_resource_key)
        + self.withAgentId(agent_id)
        + self.withDescription(description)
        + self.withKnowledgeBaseId(knowledge_base_id)
        + self.withKnowledgeBaseState(knowledge_base_state),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_bedrockagent_agent_knowledge_base_association+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentId(value): {
        agent_id: value,
      },
      '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentVersion(value): {
        agent_version: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKnowledgeBaseId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKnowledgeBaseId(value): {
        knowledge_base_id: value,
      },
      '#withKnowledgeBaseState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKnowledgeBaseState(value): {
        knowledge_base_state: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
  aws_bedrockagent_data_source:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'knowledge_base_id', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, knowledge_base_id, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withKnowledgeBaseId(knowledge_base_id)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_bedrockagent_data_source+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDataDeletionPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDataDeletionPolicy(value): {
        data_deletion_policy: value,
      },
      '#withDataSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDataSourceConfiguration(value): {
        data_source_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDataSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDataSourceConfigurationMixin(value): {
        data_source_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      data_source_configuration+:
        {
          '#': { help: '', name: 'data_source_configuration' },
          '#withConfluenceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfluenceConfiguration(value): {
            confluence_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConfluenceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfluenceConfigurationMixin(value): {
            confluence_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          confluence_configuration+:
            {
              '#': { help: '', name: 'confluence_configuration' },
              '#withCrawlerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfiguration(value): {
                crawler_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCrawlerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfigurationMixin(value): {
                crawler_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              crawler_configuration+:
                {
                  '#': { help: '', name: 'crawler_configuration' },
                  '#withFilterConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFilterConfiguration(value): {
                    filter_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFilterConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFilterConfigurationMixin(value): {
                    filter_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  filter_configuration+:
                    {
                      '#': { help: '', name: 'filter_configuration' },
                      '#withPatternObjectFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPatternObjectFilter(value): {
                        pattern_object_filter:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPatternObjectFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPatternObjectFilterMixin(value): {
                        pattern_object_filter+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      pattern_object_filter+:
                        {
                          '#': { help: '', name: 'pattern_object_filter' },
                          '#withFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFilters(value): {
                            filters:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFiltersMixin(value): {
                            filters+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          filters+:
                            {
                              '#': { help: '', name: 'filters' },
                              '#withExclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExclusionFilters(value): {
                                exclusion_filters:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withExclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExclusionFiltersMixin(value): {
                                exclusion_filters+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withInclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withInclusionFilters(value): {
                                inclusion_filters:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withInclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withInclusionFiltersMixin(value): {
                                inclusion_filters+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withObjectType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withObjectType(value): {
                                object_type: value,
                              },
                            },
                        },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                },
              '#withSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfiguration(value): {
                source_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfigurationMixin(value): {
                source_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_configuration+:
                {
                  '#': { help: '', name: 'source_configuration' },
                  '#withAuthType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAuthType(value): {
                    auth_type: value,
                  },
                  '#withCredentialsSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCredentialsSecretArn(value): {
                    credentials_secret_arn: value,
                  },
                  '#withHostType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withHostType(value): {
                    host_type: value,
                  },
                  '#withHostUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withHostUrl(value): {
                    host_url: value,
                  },
                },
            },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3Configuration(value): {
            s3_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            s3_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          s3_configuration+:
            {
              '#': { help: '', name: 's3_configuration' },
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                bucket_arn: value,
              },
              '#withBucketOwnerAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketOwnerAccountId(value): {
                bucket_owner_account_id: value,
              },
              '#withInclusionPrefixes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withInclusionPrefixes(value): {
                inclusion_prefixes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withInclusionPrefixesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withInclusionPrefixesMixin(value): {
                inclusion_prefixes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withSalesforceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSalesforceConfiguration(value): {
            salesforce_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSalesforceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSalesforceConfigurationMixin(value): {
            salesforce_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          salesforce_configuration+:
            {
              '#': { help: '', name: 'salesforce_configuration' },
              '#withCrawlerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfiguration(value): {
                crawler_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCrawlerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfigurationMixin(value): {
                crawler_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              crawler_configuration+:
                {
                  '#': { help: '', name: 'crawler_configuration' },
                  '#withFilterConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFilterConfiguration(value): {
                    filter_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFilterConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFilterConfigurationMixin(value): {
                    filter_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  filter_configuration+:
                    {
                      '#': { help: '', name: 'filter_configuration' },
                      '#withPatternObjectFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPatternObjectFilter(value): {
                        pattern_object_filter:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPatternObjectFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPatternObjectFilterMixin(value): {
                        pattern_object_filter+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      pattern_object_filter+:
                        {
                          '#': { help: '', name: 'pattern_object_filter' },
                          '#withFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFilters(value): {
                            filters:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFiltersMixin(value): {
                            filters+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          filters+:
                            {
                              '#': { help: '', name: 'filters' },
                              '#withExclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExclusionFilters(value): {
                                exclusion_filters:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withExclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExclusionFiltersMixin(value): {
                                exclusion_filters+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withInclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withInclusionFilters(value): {
                                inclusion_filters:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withInclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withInclusionFiltersMixin(value): {
                                inclusion_filters+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withObjectType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withObjectType(value): {
                                object_type: value,
                              },
                            },
                        },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                },
              '#withSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfiguration(value): {
                source_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfigurationMixin(value): {
                source_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_configuration+:
                {
                  '#': { help: '', name: 'source_configuration' },
                  '#withAuthType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAuthType(value): {
                    auth_type: value,
                  },
                  '#withCredentialsSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCredentialsSecretArn(value): {
                    credentials_secret_arn: value,
                  },
                  '#withHostUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withHostUrl(value): {
                    host_url: value,
                  },
                },
            },
          '#withSharePointConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSharePointConfiguration(value): {
            share_point_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSharePointConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSharePointConfigurationMixin(value): {
            share_point_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          share_point_configuration+:
            {
              '#': { help: '', name: 'share_point_configuration' },
              '#withCrawlerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfiguration(value): {
                crawler_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCrawlerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfigurationMixin(value): {
                crawler_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              crawler_configuration+:
                {
                  '#': { help: '', name: 'crawler_configuration' },
                  '#withFilterConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFilterConfiguration(value): {
                    filter_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFilterConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFilterConfigurationMixin(value): {
                    filter_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  filter_configuration+:
                    {
                      '#': { help: '', name: 'filter_configuration' },
                      '#withPatternObjectFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPatternObjectFilter(value): {
                        pattern_object_filter:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPatternObjectFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPatternObjectFilterMixin(value): {
                        pattern_object_filter+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      pattern_object_filter+:
                        {
                          '#': { help: '', name: 'pattern_object_filter' },
                          '#withFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFilters(value): {
                            filters:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFiltersMixin(value): {
                            filters+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          filters+:
                            {
                              '#': { help: '', name: 'filters' },
                              '#withExclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExclusionFilters(value): {
                                exclusion_filters:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withExclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExclusionFiltersMixin(value): {
                                exclusion_filters+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withInclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withInclusionFilters(value): {
                                inclusion_filters:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withInclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withInclusionFiltersMixin(value): {
                                inclusion_filters+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withObjectType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withObjectType(value): {
                                object_type: value,
                              },
                            },
                        },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                },
              '#withSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfiguration(value): {
                source_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfigurationMixin(value): {
                source_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_configuration+:
                {
                  '#': { help: '', name: 'source_configuration' },
                  '#withAuthType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAuthType(value): {
                    auth_type: value,
                  },
                  '#withCredentialsSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCredentialsSecretArn(value): {
                    credentials_secret_arn: value,
                  },
                  '#withDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDomain(value): {
                    domain: value,
                  },
                  '#withHostType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withHostType(value): {
                    host_type: value,
                  },
                  '#withSiteUrls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSiteUrls(value): {
                    site_urls:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSiteUrlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSiteUrlsMixin(value): {
                    site_urls+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTenantId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTenantId(value): {
                    tenant_id: value,
                  },
                },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withWebConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWebConfiguration(value): {
            web_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withWebConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWebConfigurationMixin(value): {
            web_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          web_configuration+:
            {
              '#': { help: '', name: 'web_configuration' },
              '#withCrawlerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfiguration(value): {
                crawler_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCrawlerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCrawlerConfigurationMixin(value): {
                crawler_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              crawler_configuration+:
                {
                  '#': { help: '', name: 'crawler_configuration' },
                  '#withCrawlerLimits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCrawlerLimits(value): {
                    crawler_limits:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCrawlerLimitsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCrawlerLimitsMixin(value): {
                    crawler_limits+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  crawler_limits+:
                    {
                      '#': { help: '', name: 'crawler_limits' },
                      '#withMaxPages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxPages(value): {
                        max_pages: value,
                      },
                      '#withRateLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withRateLimit(value): {
                        rate_limit: value,
                      },
                    },
                  '#withExclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExclusionFilters(value): {
                    exclusion_filters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withExclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExclusionFiltersMixin(value): {
                    exclusion_filters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withInclusionFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withInclusionFilters(value): {
                    inclusion_filters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withInclusionFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withInclusionFiltersMixin(value): {
                    inclusion_filters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withScope(value): {
                    scope: value,
                  },
                  '#withUserAgent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUserAgent(value): {
                    user_agent: value,
                  },
                },
              '#withSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfiguration(value): {
                source_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceConfigurationMixin(value): {
                source_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_configuration+:
                {
                  '#': { help: '', name: 'source_configuration' },
                  '#withUrlConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withUrlConfiguration(value): {
                    url_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withUrlConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withUrlConfigurationMixin(value): {
                    url_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  url_configuration+:
                    {
                      '#': { help: '', name: 'url_configuration' },
                      '#withSeedUrls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSeedUrls(value): {
                        seed_urls:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSeedUrlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSeedUrlsMixin(value): {
                        seed_urls+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      seed_urls+:
                        {
                          '#': { help: '', name: 'seed_urls' },
                          '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUrl(value): {
                            url: value,
                          },
                        },
                    },
                },
            },
        },
      '#withDataSourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDataSourceId(value): {
        data_source_id: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKnowledgeBaseId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKnowledgeBaseId(value): {
        knowledge_base_id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServerSideEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServerSideEncryptionConfiguration(value): {
        server_side_encryption_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServerSideEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServerSideEncryptionConfigurationMixin(value): {
        server_side_encryption_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      server_side_encryption_configuration+:
        {
          '#': { help: '', name: 'server_side_encryption_configuration' },
          '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyArn(value): {
            kms_key_arn: value,
          },
        },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
        },
      '#withVectorIngestionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVectorIngestionConfiguration(value): {
        vector_ingestion_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVectorIngestionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVectorIngestionConfigurationMixin(value): {
        vector_ingestion_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      vector_ingestion_configuration+:
        {
          '#': { help: '', name: 'vector_ingestion_configuration' },
          '#withChunkingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withChunkingConfiguration(value): {
            chunking_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withChunkingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withChunkingConfigurationMixin(value): {
            chunking_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          chunking_configuration+:
            {
              '#': { help: '', name: 'chunking_configuration' },
              '#withChunkingStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withChunkingStrategy(value): {
                chunking_strategy: value,
              },
              '#withFixedSizeChunkingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFixedSizeChunkingConfiguration(value): {
                fixed_size_chunking_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFixedSizeChunkingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFixedSizeChunkingConfigurationMixin(value): {
                fixed_size_chunking_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              fixed_size_chunking_configuration+:
                {
                  '#': { help: '', name: 'fixed_size_chunking_configuration' },
                  '#withMaxTokens': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxTokens(value): {
                    max_tokens: value,
                  },
                  '#withOverlapPercentage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withOverlapPercentage(value): {
                    overlap_percentage: value,
                  },
                },
              '#withHierarchicalChunkingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHierarchicalChunkingConfiguration(value): {
                hierarchical_chunking_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withHierarchicalChunkingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHierarchicalChunkingConfigurationMixin(value): {
                hierarchical_chunking_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              hierarchical_chunking_configuration+:
                {
                  '#': { help: '', name: 'hierarchical_chunking_configuration' },
                  '#withLevelConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLevelConfiguration(value): {
                    level_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withLevelConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLevelConfigurationMixin(value): {
                    level_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  level_configuration+:
                    {
                      '#': { help: '', name: 'level_configuration' },
                      '#withMaxTokens': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxTokens(value): {
                        max_tokens: value,
                      },
                    },
                  '#withOverlapTokens': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withOverlapTokens(value): {
                    overlap_tokens: value,
                  },
                },
              '#withSemanticChunkingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSemanticChunkingConfiguration(value): {
                semantic_chunking_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSemanticChunkingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSemanticChunkingConfigurationMixin(value): {
                semantic_chunking_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              semantic_chunking_configuration+:
                {
                  '#': { help: '', name: 'semantic_chunking_configuration' },
                  '#withBreakpointPercentileThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withBreakpointPercentileThreshold(value): {
                    breakpoint_percentile_threshold: value,
                  },
                  '#withBufferSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withBufferSize(value): {
                    buffer_size: value,
                  },
                  '#withMaxToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxToken(value): {
                    max_token: value,
                  },
                },
            },
          '#withCustomTransformationConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomTransformationConfiguration(value): {
            custom_transformation_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCustomTransformationConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomTransformationConfigurationMixin(value): {
            custom_transformation_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          custom_transformation_configuration+:
            {
              '#': { help: '', name: 'custom_transformation_configuration' },
              '#withIntermediateStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntermediateStorage(value): {
                intermediate_storage:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIntermediateStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntermediateStorageMixin(value): {
                intermediate_storage+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              intermediate_storage+:
                {
                  '#': { help: '', name: 'intermediate_storage' },
                  '#withS3Location': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withS3Location(value): {
                    s3_location:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withS3LocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withS3LocationMixin(value): {
                    s3_location+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  s3_location+:
                    {
                      '#': { help: '', name: 's3_location' },
                      '#withUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUri(value): {
                        uri: value,
                      },
                    },
                },
              '#withTransformation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTransformation(value): {
                transformation:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTransformationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTransformationMixin(value): {
                transformation+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              transformation+:
                {
                  '#': { help: '', name: 'transformation' },
                  '#withStepToApply': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStepToApply(value): {
                    step_to_apply: value,
                  },
                  '#withTransformationFunction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTransformationFunction(value): {
                    transformation_function:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTransformationFunctionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTransformationFunctionMixin(value): {
                    transformation_function+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  transformation_function+:
                    {
                      '#': { help: '', name: 'transformation_function' },
                      '#withTransformationLambdaConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTransformationLambdaConfiguration(value): {
                        transformation_lambda_configuration:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTransformationLambdaConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTransformationLambdaConfigurationMixin(value): {
                        transformation_lambda_configuration+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      transformation_lambda_configuration+:
                        {
                          '#': { help: '', name: 'transformation_lambda_configuration' },
                          '#withLambdaArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withLambdaArn(value): {
                            lambda_arn: value,
                          },
                        },
                    },
                },
            },
          '#withParsingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withParsingConfiguration(value): {
            parsing_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withParsingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withParsingConfigurationMixin(value): {
            parsing_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          parsing_configuration+:
            {
              '#': { help: '', name: 'parsing_configuration' },
              '#withBedrockFoundationModelConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withBedrockFoundationModelConfiguration(value): {
                bedrock_foundation_model_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withBedrockFoundationModelConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withBedrockFoundationModelConfigurationMixin(value): {
                bedrock_foundation_model_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              bedrock_foundation_model_configuration+:
                {
                  '#': { help: '', name: 'bedrock_foundation_model_configuration' },
                  '#withModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withModelArn(value): {
                    model_arn: value,
                  },
                  '#withParsingPrompt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParsingPrompt(value): {
                    parsing_prompt:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParsingPromptMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParsingPromptMixin(value): {
                    parsing_prompt+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parsing_prompt+:
                    {
                      '#': { help: '', name: 'parsing_prompt' },
                      '#withParsingPromptString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParsingPromptString(value): {
                        parsing_prompt_string: value,
                      },
                    },
                },
              '#withParsingStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withParsingStrategy(value): {
                parsing_strategy: value,
              },
            },
        },
    },
  aws_bedrockagent_knowledge_base:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, name, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_bedrockagent_knowledge_base+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withFailureReasons': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFailureReasons(value): {
        failure_reasons:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFailureReasonsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFailureReasonsMixin(value): {
        failure_reasons+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKnowledgeBaseConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKnowledgeBaseConfiguration(value): {
        knowledge_base_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKnowledgeBaseConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKnowledgeBaseConfigurationMixin(value): {
        knowledge_base_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      knowledge_base_configuration+:
        {
          '#': { help: '', name: 'knowledge_base_configuration' },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withVectorKnowledgeBaseConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVectorKnowledgeBaseConfiguration(value): {
            vector_knowledge_base_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVectorKnowledgeBaseConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVectorKnowledgeBaseConfigurationMixin(value): {
            vector_knowledge_base_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vector_knowledge_base_configuration+:
            {
              '#': { help: '', name: 'vector_knowledge_base_configuration' },
              '#withEmbeddingModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEmbeddingModelArn(value): {
                embedding_model_arn: value,
              },
              '#withEmbeddingModelConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEmbeddingModelConfiguration(value): {
                embedding_model_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withEmbeddingModelConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEmbeddingModelConfigurationMixin(value): {
                embedding_model_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              embedding_model_configuration+:
                {
                  '#': { help: '', name: 'embedding_model_configuration' },
                  '#withBedrockEmbeddingModelConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withBedrockEmbeddingModelConfiguration(value): {
                    bedrock_embedding_model_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withBedrockEmbeddingModelConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withBedrockEmbeddingModelConfigurationMixin(value): {
                    bedrock_embedding_model_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  bedrock_embedding_model_configuration+:
                    {
                      '#': { help: '', name: 'bedrock_embedding_model_configuration' },
                      '#withDimensions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withDimensions(value): {
                        dimensions: value,
                      },
                      '#withEmbeddingDataType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withEmbeddingDataType(value): {
                        embedding_data_type: value,
                      },
                    },
                },
              '#withSupplementalDataStorageConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSupplementalDataStorageConfiguration(value): {
                supplemental_data_storage_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSupplementalDataStorageConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSupplementalDataStorageConfigurationMixin(value): {
                supplemental_data_storage_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              supplemental_data_storage_configuration+:
                {
                  '#': { help: '', name: 'supplemental_data_storage_configuration' },
                  '#withStorageLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStorageLocation(value): {
                    storage_location:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withStorageLocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStorageLocationMixin(value): {
                    storage_location+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  storage_location+:
                    {
                      '#': { help: '', name: 'storage_location' },
                      '#withS3Location': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withS3Location(value): {
                        s3_location:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withS3LocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withS3LocationMixin(value): {
                        s3_location+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      s3_location+:
                        {
                          '#': { help: '', name: 's3_location' },
                          '#withUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUri(value): {
                            uri: value,
                          },
                        },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                },
            },
        },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withStorageConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStorageConfiguration(value): {
        storage_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStorageConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStorageConfigurationMixin(value): {
        storage_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      storage_configuration+:
        {
          '#': { help: '', name: 'storage_configuration' },
          '#withOpensearchServerlessConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOpensearchServerlessConfiguration(value): {
            opensearch_serverless_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withOpensearchServerlessConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOpensearchServerlessConfigurationMixin(value): {
            opensearch_serverless_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          opensearch_serverless_configuration+:
            {
              '#': { help: '', name: 'opensearch_serverless_configuration' },
              '#withCollectionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCollectionArn(value): {
                collection_arn: value,
              },
              '#withFieldMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMapping(value): {
                field_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFieldMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMappingMixin(value): {
                field_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              field_mapping+:
                {
                  '#': { help: '', name: 'field_mapping' },
                  '#withMetadataField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMetadataField(value): {
                    metadata_field: value,
                  },
                  '#withTextField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTextField(value): {
                    text_field: value,
                  },
                  '#withVectorField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVectorField(value): {
                    vector_field: value,
                  },
                },
              '#withVectorIndexName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVectorIndexName(value): {
                vector_index_name: value,
              },
            },
          '#withPineconeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPineconeConfiguration(value): {
            pinecone_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPineconeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPineconeConfigurationMixin(value): {
            pinecone_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          pinecone_configuration+:
            {
              '#': { help: '', name: 'pinecone_configuration' },
              '#withConnectionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withConnectionString(value): {
                connection_string: value,
              },
              '#withCredentialsSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCredentialsSecretArn(value): {
                credentials_secret_arn: value,
              },
              '#withFieldMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMapping(value): {
                field_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFieldMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMappingMixin(value): {
                field_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              field_mapping+:
                {
                  '#': { help: '', name: 'field_mapping' },
                  '#withMetadataField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMetadataField(value): {
                    metadata_field: value,
                  },
                  '#withTextField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTextField(value): {
                    text_field: value,
                  },
                },
              '#withNamespace': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNamespace(value): {
                namespace: value,
              },
            },
          '#withRdsConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRdsConfiguration(value): {
            rds_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRdsConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRdsConfigurationMixin(value): {
            rds_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          rds_configuration+:
            {
              '#': { help: '', name: 'rds_configuration' },
              '#withCredentialsSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCredentialsSecretArn(value): {
                credentials_secret_arn: value,
              },
              '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatabaseName(value): {
                database_name: value,
              },
              '#withFieldMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMapping(value): {
                field_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFieldMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMappingMixin(value): {
                field_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              field_mapping+:
                {
                  '#': { help: '', name: 'field_mapping' },
                  '#withMetadataField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMetadataField(value): {
                    metadata_field: value,
                  },
                  '#withPrimaryKeyField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrimaryKeyField(value): {
                    primary_key_field: value,
                  },
                  '#withTextField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTextField(value): {
                    text_field: value,
                  },
                  '#withVectorField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVectorField(value): {
                    vector_field: value,
                  },
                },
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                resource_arn: value,
              },
              '#withTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTableName(value): {
                table_name: value,
              },
            },
          '#withRedisEnterpriseCloudConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRedisEnterpriseCloudConfiguration(value): {
            redis_enterprise_cloud_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRedisEnterpriseCloudConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRedisEnterpriseCloudConfigurationMixin(value): {
            redis_enterprise_cloud_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          redis_enterprise_cloud_configuration+:
            {
              '#': { help: '', name: 'redis_enterprise_cloud_configuration' },
              '#withCredentialsSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCredentialsSecretArn(value): {
                credentials_secret_arn: value,
              },
              '#withEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEndpoint(value): {
                endpoint: value,
              },
              '#withFieldMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMapping(value): {
                field_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFieldMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFieldMappingMixin(value): {
                field_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              field_mapping+:
                {
                  '#': { help: '', name: 'field_mapping' },
                  '#withMetadataField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMetadataField(value): {
                    metadata_field: value,
                  },
                  '#withTextField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTextField(value): {
                    text_field: value,
                  },
                  '#withVectorField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVectorField(value): {
                    vector_field: value,
                  },
                },
              '#withVectorIndexName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVectorIndexName(value): {
                vector_index_name: value,
              },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
    },
}
