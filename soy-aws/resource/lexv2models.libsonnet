// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'lexv2models',
  },
  aws_lexv2models_bot:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'idle_session_ttl_in_seconds', type: 'number' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, idle_session_ttl_in_seconds, name, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withIdleSessionTtlInSeconds(idle_session_ttl_in_seconds)
        + self.withName(name)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_lexv2models_bot: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDataPrivacy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDataPrivacy(value): {
        data_privacy:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDataPrivacyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDataPrivacyMixin(value): {
        data_privacy+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      data_privacy+:
        {
          '#': { help: '', name: 'data_privacy' },
          '#withChildDirected': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withChildDirected(value=true): {
            child_directed: value,
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIdleSessionTtlInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withIdleSessionTtlInSeconds(value): {
        idle_session_ttl_in_seconds: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMembers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembers(value): {
        members:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMembersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembersMixin(value): {
        members+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      members+:
        {
          '#': { help: '', name: 'members' },
          '#withAliasId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAliasId(value): {
            alias_id: value,
          },
          '#withAliasName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAliasName(value): {
            alias_name: value,
          },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVersion(value): {
            version: value,
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTestBotAliasTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTestBotAliasTags(value): {
        test_bot_alias_tags: value,
      },
      '#withTestBotAliasTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTestBotAliasTagsMixin(value): {
        test_bot_alias_tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        type: value,
      },
    },
  aws_lexv2models_bot_locale:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bot_id', type: 'string' }, { default: null, enums: null, name: 'bot_version', type: 'string' }, { default: null, enums: null, name: 'locale_id', type: 'string' }, { default: null, enums: null, name: 'n_lu_intent_confidence_threshold', type: 'number' }], help: '' } },
      new(tf_resource_key, bot_id, bot_version, locale_id, n_lu_intent_confidence_threshold):
        self.withTfResourceKey(tf_resource_key)
        + self.withBotId(bot_id)
        + self.withBotVersion(bot_version)
        + self.withLocaleId(locale_id)
        + self.withNLuIntentConfidenceThreshold(n_lu_intent_confidence_threshold),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_lexv2models_bot_locale: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotId(value): {
        bot_id: value,
      },
      '#withBotVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotVersion(value): {
        bot_version: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLocaleId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocaleId(value): {
        locale_id: value,
      },
      '#withNLuIntentConfidenceThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withNLuIntentConfidenceThreshold(value): {
        n_lu_intent_confidence_threshold: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withVoiceSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVoiceSettings(value): {
        voice_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVoiceSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVoiceSettingsMixin(value): {
        voice_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      voice_settings+:
        {
          '#': { help: '', name: 'voice_settings' },
          '#withEngine': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEngine(value): {
            engine: value,
          },
          '#withVoiceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVoiceId(value): {
            voice_id: value,
          },
        },
    },
  aws_lexv2models_bot_version:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bot_id', type: 'string' }, { default: null, enums: null, name: 'locale_specification', type: 'object' }], help: '' } },
      new(tf_resource_key, bot_id, locale_specification):
        self.withTfResourceKey(tf_resource_key)
        + self.withBotId(bot_id)
        + self.withLocaleSpecification(locale_specification),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_lexv2models_bot_version: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotId(value): {
        bot_id: value,
      },
      '#withBotVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotVersion(value): {
        bot_version: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLocaleSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLocaleSpecification(value): {
        locale_specification: value,
      },
      '#withLocaleSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLocaleSpecificationMixin(value): {
        locale_specification+: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
        },
    },
  aws_lexv2models_intent:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bot_id', type: 'string' }, { default: null, enums: null, name: 'bot_version', type: 'string' }, { default: null, enums: null, name: 'locale_id', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, bot_id, bot_version, locale_id, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withBotId(bot_id)
        + self.withBotVersion(bot_version)
        + self.withLocaleId(locale_id)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_lexv2models_intent: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotId(value): {
        bot_id: value,
      },
      '#withBotVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotVersion(value): {
        bot_version: value,
      },
      '#withClosingSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClosingSetting(value): {
        closing_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClosingSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClosingSettingMixin(value): {
        closing_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      closing_setting+:
        {
          '#': { help: '', name: 'closing_setting' },
          '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withActive(value=true): {
            active: value,
          },
          '#withClosingResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withClosingResponse(value): {
            closing_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withClosingResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withClosingResponseMixin(value): {
            closing_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          closing_response+:
            {
              '#': { help: '', name: 'closing_response' },
              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAllowInterrupt(value=true): {
                allow_interrupt: value,
              },
              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroup(value): {
                message_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroupMixin(value): {
                message_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              message_group+:
                {
                  '#': { help: '', name: 'message_group' },
                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessage(value): {
                    message:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageMixin(value): {
                    message+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message+:
                    {
                      '#': { help: '', name: 'message' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariation(value): {
                    variation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariationMixin(value): {
                    variation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  variation+:
                    {
                      '#': { help: '', name: 'variation' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
            },
          '#withConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConditional(value): {
            conditional:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConditionalMixin(value): {
            conditional+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          conditional+:
            {
              '#': { help: '', name: 'conditional' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranch(value): {
                conditional_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranchMixin(value): {
                conditional_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              conditional_branch+:
                {
                  '#': { help: '', name: 'conditional_branch' },
                  '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCondition(value): {
                    condition:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionMixin(value): {
                    condition+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  condition+:
                    {
                      '#': { help: '', name: 'condition' },
                      '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExpressionString(value): {
                        expression_string: value,
                      },
                    },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
              '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranch(value): {
                default_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranchMixin(value): {
                default_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              default_branch+:
                {
                  '#': { help: '', name: 'default_branch' },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNextStep(value): {
            next_step:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNextStepMixin(value): {
            next_step+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          next_step+:
            {
              '#': { help: '', name: 'next_step' },
              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogAction(value): {
                dialog_action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogActionMixin(value): {
                dialog_action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dialog_action+:
                {
                  '#': { help: '', name: 'dialog_action' },
                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSlotToElicit(value): {
                    slot_to_elicit: value,
                  },
                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withSuppressNextMessage(value=true): {
                    suppress_next_message: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntent(value): {
                intent:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntentMixin(value): {
                intent+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              intent+:
                {
                  '#': { help: '', name: 'intent' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlot(value): {
                    slot:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlotMixin(value): {
                    slot+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  slot+:
                    {
                      '#': { help: '', name: 'slot' },
                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMapBlockKey(value): {
                        map_block_key: value,
                      },
                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withShape(value): {
                        shape: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValue(value): {
                        value:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValueMixin(value): {
                        value+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      value+:
                        {
                          '#': { help: '', name: 'value' },
                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withInterpretedValue(value): {
                            interpreted_value: value,
                          },
                        },
                    },
                },
              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributes(value): {
                session_attributes: value,
              },
              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributesMixin(value): {
                session_attributes+: value,
              },
            },
        },
      '#withConfirmationSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConfirmationSetting(value): {
        confirmation_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withConfirmationSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConfirmationSettingMixin(value): {
        confirmation_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      confirmation_setting+:
        {
          '#': { help: '', name: 'confirmation_setting' },
          '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withActive(value=true): {
            active: value,
          },
          '#withCodeHook': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCodeHook(value): {
            code_hook:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCodeHookMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCodeHookMixin(value): {
            code_hook+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          code_hook+:
            {
              '#': { help: '', name: 'code_hook' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withEnableCodeHookInvocation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnableCodeHookInvocation(value=true): {
                enable_code_hook_invocation: value,
              },
              '#withInvocationLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInvocationLabel(value): {
                invocation_label: value,
              },
              '#withPostCodeHookSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPostCodeHookSpecification(value): {
                post_code_hook_specification:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPostCodeHookSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPostCodeHookSpecificationMixin(value): {
                post_code_hook_specification+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              post_code_hook_specification+:
                {
                  '#': { help: '', name: 'post_code_hook_specification' },
                  '#withFailureConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureConditional(value): {
                    failure_conditional:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFailureConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureConditionalMixin(value): {
                    failure_conditional+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  failure_conditional+:
                    {
                      '#': { help: '', name: 'failure_conditional' },
                      '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withActive(value=true): {
                        active: value,
                      },
                      '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranch(value): {
                        conditional_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranchMixin(value): {
                        conditional_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      conditional_branch+:
                        {
                          '#': { help: '', name: 'conditional_branch' },
                          '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCondition(value): {
                            condition:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withConditionMixin(value): {
                            condition+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          condition+:
                            {
                              '#': { help: '', name: 'condition' },
                              '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withExpressionString(value): {
                                expression_string: value,
                              },
                            },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                      '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranch(value): {
                        default_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranchMixin(value): {
                        default_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      default_branch+:
                        {
                          '#': { help: '', name: 'default_branch' },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  '#withFailureNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureNextStep(value): {
                    failure_next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFailureNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureNextStepMixin(value): {
                    failure_next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  failure_next_step+:
                    {
                      '#': { help: '', name: 'failure_next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withFailureResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureResponse(value): {
                    failure_response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFailureResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureResponseMixin(value): {
                    failure_response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  failure_response+:
                    {
                      '#': { help: '', name: 'failure_response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                  '#withSuccessConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessConditional(value): {
                    success_conditional:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSuccessConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessConditionalMixin(value): {
                    success_conditional+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  success_conditional+:
                    {
                      '#': { help: '', name: 'success_conditional' },
                      '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withActive(value=true): {
                        active: value,
                      },
                      '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranch(value): {
                        conditional_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranchMixin(value): {
                        conditional_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      conditional_branch+:
                        {
                          '#': { help: '', name: 'conditional_branch' },
                          '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCondition(value): {
                            condition:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withConditionMixin(value): {
                            condition+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          condition+:
                            {
                              '#': { help: '', name: 'condition' },
                              '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withExpressionString(value): {
                                expression_string: value,
                              },
                            },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                      '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranch(value): {
                        default_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranchMixin(value): {
                        default_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      default_branch+:
                        {
                          '#': { help: '', name: 'default_branch' },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  '#withSuccessNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessNextStep(value): {
                    success_next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSuccessNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessNextStepMixin(value): {
                    success_next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  success_next_step+:
                    {
                      '#': { help: '', name: 'success_next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withSuccessResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessResponse(value): {
                    success_response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSuccessResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessResponseMixin(value): {
                    success_response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  success_response+:
                    {
                      '#': { help: '', name: 'success_response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                  '#withTimeoutConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutConditional(value): {
                    timeout_conditional:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTimeoutConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutConditionalMixin(value): {
                    timeout_conditional+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  timeout_conditional+:
                    {
                      '#': { help: '', name: 'timeout_conditional' },
                      '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withActive(value=true): {
                        active: value,
                      },
                      '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranch(value): {
                        conditional_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranchMixin(value): {
                        conditional_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      conditional_branch+:
                        {
                          '#': { help: '', name: 'conditional_branch' },
                          '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCondition(value): {
                            condition:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withConditionMixin(value): {
                            condition+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          condition+:
                            {
                              '#': { help: '', name: 'condition' },
                              '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withExpressionString(value): {
                                expression_string: value,
                              },
                            },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                      '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranch(value): {
                        default_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranchMixin(value): {
                        default_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      default_branch+:
                        {
                          '#': { help: '', name: 'default_branch' },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  '#withTimeoutNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutNextStep(value): {
                    timeout_next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTimeoutNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutNextStepMixin(value): {
                    timeout_next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  timeout_next_step+:
                    {
                      '#': { help: '', name: 'timeout_next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withTimeoutResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutResponse(value): {
                    timeout_response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTimeoutResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutResponseMixin(value): {
                    timeout_response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  timeout_response+:
                    {
                      '#': { help: '', name: 'timeout_response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withConfirmationConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfirmationConditional(value): {
            confirmation_conditional:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConfirmationConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfirmationConditionalMixin(value): {
            confirmation_conditional+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          confirmation_conditional+:
            {
              '#': { help: '', name: 'confirmation_conditional' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranch(value): {
                conditional_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranchMixin(value): {
                conditional_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              conditional_branch+:
                {
                  '#': { help: '', name: 'conditional_branch' },
                  '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCondition(value): {
                    condition:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionMixin(value): {
                    condition+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  condition+:
                    {
                      '#': { help: '', name: 'condition' },
                      '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExpressionString(value): {
                        expression_string: value,
                      },
                    },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
              '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranch(value): {
                default_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranchMixin(value): {
                default_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              default_branch+:
                {
                  '#': { help: '', name: 'default_branch' },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withConfirmationNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfirmationNextStep(value): {
            confirmation_next_step:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConfirmationNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfirmationNextStepMixin(value): {
            confirmation_next_step+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          confirmation_next_step+:
            {
              '#': { help: '', name: 'confirmation_next_step' },
              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogAction(value): {
                dialog_action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogActionMixin(value): {
                dialog_action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dialog_action+:
                {
                  '#': { help: '', name: 'dialog_action' },
                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSlotToElicit(value): {
                    slot_to_elicit: value,
                  },
                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withSuppressNextMessage(value=true): {
                    suppress_next_message: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntent(value): {
                intent:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntentMixin(value): {
                intent+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              intent+:
                {
                  '#': { help: '', name: 'intent' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlot(value): {
                    slot:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlotMixin(value): {
                    slot+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  slot+:
                    {
                      '#': { help: '', name: 'slot' },
                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMapBlockKey(value): {
                        map_block_key: value,
                      },
                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withShape(value): {
                        shape: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValue(value): {
                        value:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValueMixin(value): {
                        value+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      value+:
                        {
                          '#': { help: '', name: 'value' },
                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withInterpretedValue(value): {
                            interpreted_value: value,
                          },
                        },
                    },
                },
              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributes(value): {
                session_attributes: value,
              },
              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributesMixin(value): {
                session_attributes+: value,
              },
            },
          '#withConfirmationResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfirmationResponse(value): {
            confirmation_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConfirmationResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConfirmationResponseMixin(value): {
            confirmation_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          confirmation_response+:
            {
              '#': { help: '', name: 'confirmation_response' },
              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAllowInterrupt(value=true): {
                allow_interrupt: value,
              },
              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroup(value): {
                message_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroupMixin(value): {
                message_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              message_group+:
                {
                  '#': { help: '', name: 'message_group' },
                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessage(value): {
                    message:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageMixin(value): {
                    message+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message+:
                    {
                      '#': { help: '', name: 'message' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariation(value): {
                    variation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariationMixin(value): {
                    variation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  variation+:
                    {
                      '#': { help: '', name: 'variation' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
            },
          '#withDeclinationConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDeclinationConditional(value): {
            declination_conditional:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDeclinationConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDeclinationConditionalMixin(value): {
            declination_conditional+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          declination_conditional+:
            {
              '#': { help: '', name: 'declination_conditional' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranch(value): {
                conditional_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranchMixin(value): {
                conditional_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              conditional_branch+:
                {
                  '#': { help: '', name: 'conditional_branch' },
                  '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCondition(value): {
                    condition:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionMixin(value): {
                    condition+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  condition+:
                    {
                      '#': { help: '', name: 'condition' },
                      '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExpressionString(value): {
                        expression_string: value,
                      },
                    },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
              '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranch(value): {
                default_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranchMixin(value): {
                default_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              default_branch+:
                {
                  '#': { help: '', name: 'default_branch' },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withDeclinationNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDeclinationNextStep(value): {
            declination_next_step:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDeclinationNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDeclinationNextStepMixin(value): {
            declination_next_step+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          declination_next_step+:
            {
              '#': { help: '', name: 'declination_next_step' },
              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogAction(value): {
                dialog_action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogActionMixin(value): {
                dialog_action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dialog_action+:
                {
                  '#': { help: '', name: 'dialog_action' },
                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSlotToElicit(value): {
                    slot_to_elicit: value,
                  },
                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withSuppressNextMessage(value=true): {
                    suppress_next_message: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntent(value): {
                intent:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntentMixin(value): {
                intent+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              intent+:
                {
                  '#': { help: '', name: 'intent' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlot(value): {
                    slot:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlotMixin(value): {
                    slot+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  slot+:
                    {
                      '#': { help: '', name: 'slot' },
                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMapBlockKey(value): {
                        map_block_key: value,
                      },
                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withShape(value): {
                        shape: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValue(value): {
                        value:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValueMixin(value): {
                        value+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      value+:
                        {
                          '#': { help: '', name: 'value' },
                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withInterpretedValue(value): {
                            interpreted_value: value,
                          },
                        },
                    },
                },
              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributes(value): {
                session_attributes: value,
              },
              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributesMixin(value): {
                session_attributes+: value,
              },
            },
          '#withDeclinationResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDeclinationResponse(value): {
            declination_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDeclinationResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDeclinationResponseMixin(value): {
            declination_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          declination_response+:
            {
              '#': { help: '', name: 'declination_response' },
              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAllowInterrupt(value=true): {
                allow_interrupt: value,
              },
              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroup(value): {
                message_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroupMixin(value): {
                message_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              message_group+:
                {
                  '#': { help: '', name: 'message_group' },
                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessage(value): {
                    message:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageMixin(value): {
                    message+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message+:
                    {
                      '#': { help: '', name: 'message' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariation(value): {
                    variation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariationMixin(value): {
                    variation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  variation+:
                    {
                      '#': { help: '', name: 'variation' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
            },
          '#withElicitationCodeHook': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElicitationCodeHook(value): {
            elicitation_code_hook:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withElicitationCodeHookMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElicitationCodeHookMixin(value): {
            elicitation_code_hook+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          elicitation_code_hook+:
            {
              '#': { help: '', name: 'elicitation_code_hook' },
              '#withEnableCodeHookInvocation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnableCodeHookInvocation(value=true): {
                enable_code_hook_invocation: value,
              },
              '#withInvocationLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInvocationLabel(value): {
                invocation_label: value,
              },
            },
          '#withFailureConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFailureConditional(value): {
            failure_conditional:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFailureConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFailureConditionalMixin(value): {
            failure_conditional+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          failure_conditional+:
            {
              '#': { help: '', name: 'failure_conditional' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranch(value): {
                conditional_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranchMixin(value): {
                conditional_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              conditional_branch+:
                {
                  '#': { help: '', name: 'conditional_branch' },
                  '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCondition(value): {
                    condition:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionMixin(value): {
                    condition+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  condition+:
                    {
                      '#': { help: '', name: 'condition' },
                      '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExpressionString(value): {
                        expression_string: value,
                      },
                    },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
              '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranch(value): {
                default_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranchMixin(value): {
                default_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              default_branch+:
                {
                  '#': { help: '', name: 'default_branch' },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withFailureNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFailureNextStep(value): {
            failure_next_step:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFailureNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFailureNextStepMixin(value): {
            failure_next_step+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          failure_next_step+:
            {
              '#': { help: '', name: 'failure_next_step' },
              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogAction(value): {
                dialog_action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogActionMixin(value): {
                dialog_action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dialog_action+:
                {
                  '#': { help: '', name: 'dialog_action' },
                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSlotToElicit(value): {
                    slot_to_elicit: value,
                  },
                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withSuppressNextMessage(value=true): {
                    suppress_next_message: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntent(value): {
                intent:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntentMixin(value): {
                intent+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              intent+:
                {
                  '#': { help: '', name: 'intent' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlot(value): {
                    slot:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlotMixin(value): {
                    slot+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  slot+:
                    {
                      '#': { help: '', name: 'slot' },
                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMapBlockKey(value): {
                        map_block_key: value,
                      },
                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withShape(value): {
                        shape: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValue(value): {
                        value:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValueMixin(value): {
                        value+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      value+:
                        {
                          '#': { help: '', name: 'value' },
                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withInterpretedValue(value): {
                            interpreted_value: value,
                          },
                        },
                    },
                },
              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributes(value): {
                session_attributes: value,
              },
              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributesMixin(value): {
                session_attributes+: value,
              },
            },
          '#withFailureResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFailureResponse(value): {
            failure_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFailureResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFailureResponseMixin(value): {
            failure_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          failure_response+:
            {
              '#': { help: '', name: 'failure_response' },
              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAllowInterrupt(value=true): {
                allow_interrupt: value,
              },
              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroup(value): {
                message_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroupMixin(value): {
                message_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              message_group+:
                {
                  '#': { help: '', name: 'message_group' },
                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessage(value): {
                    message:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageMixin(value): {
                    message+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message+:
                    {
                      '#': { help: '', name: 'message' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariation(value): {
                    variation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariationMixin(value): {
                    variation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  variation+:
                    {
                      '#': { help: '', name: 'variation' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
            },
          '#withPromptSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPromptSpecification(value): {
            prompt_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPromptSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPromptSpecificationMixin(value): {
            prompt_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          prompt_specification+:
            {
              '#': { help: '', name: 'prompt_specification' },
              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAllowInterrupt(value=true): {
                allow_interrupt: value,
              },
              '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaxRetries(value): {
                max_retries: value,
              },
              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroup(value): {
                message_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroupMixin(value): {
                message_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              message_group+:
                {
                  '#': { help: '', name: 'message_group' },
                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessage(value): {
                    message:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageMixin(value): {
                    message+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message+:
                    {
                      '#': { help: '', name: 'message' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariation(value): {
                    variation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariationMixin(value): {
                    variation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  variation+:
                    {
                      '#': { help: '', name: 'variation' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
              '#withMessageSelectionStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMessageSelectionStrategy(value): {
                message_selection_strategy: value,
              },
              '#withPromptAttemptsSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPromptAttemptsSpecification(value): {
                prompt_attempts_specification:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPromptAttemptsSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPromptAttemptsSpecificationMixin(value): {
                prompt_attempts_specification+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              prompt_attempts_specification+:
                {
                  '#': { help: '', name: 'prompt_attempts_specification' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withAllowedInputTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAllowedInputTypes(value): {
                    allowed_input_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAllowedInputTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAllowedInputTypesMixin(value): {
                    allowed_input_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  allowed_input_types+:
                    {
                      '#': { help: '', name: 'allowed_input_types' },
                      '#withAllowAudioInput': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowAudioInput(value=true): {
                        allow_audio_input: value,
                      },
                      '#withAllowDtmfInput': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowDtmfInput(value=true): {
                        allow_dtmf_input: value,
                      },
                    },
                  '#withAudioAndDtmfInputSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAudioAndDtmfInputSpecification(value): {
                    audio_and_dtmf_input_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAudioAndDtmfInputSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAudioAndDtmfInputSpecificationMixin(value): {
                    audio_and_dtmf_input_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  audio_and_dtmf_input_specification+:
                    {
                      '#': { help: '', name: 'audio_and_dtmf_input_specification' },
                      '#withAudioSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAudioSpecification(value): {
                        audio_specification:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAudioSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAudioSpecificationMixin(value): {
                        audio_specification+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      audio_specification+:
                        {
                          '#': { help: '', name: 'audio_specification' },
                          '#withEndTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withEndTimeoutMs(value): {
                            end_timeout_ms: value,
                          },
                          '#withMaxLengthMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMaxLengthMs(value): {
                            max_length_ms: value,
                          },
                        },
                      '#withDtmfSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDtmfSpecification(value): {
                        dtmf_specification:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDtmfSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDtmfSpecificationMixin(value): {
                        dtmf_specification+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dtmf_specification+:
                        {
                          '#': { help: '', name: 'dtmf_specification' },
                          '#withDeletionCharacter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDeletionCharacter(value): {
                            deletion_character: value,
                          },
                          '#withEndCharacter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withEndCharacter(value): {
                            end_character: value,
                          },
                          '#withEndTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withEndTimeoutMs(value): {
                            end_timeout_ms: value,
                          },
                          '#withMaxLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMaxLength(value): {
                            max_length: value,
                          },
                        },
                      '#withStartTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withStartTimeoutMs(value): {
                        start_timeout_ms: value,
                      },
                    },
                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMapBlockKey(value): {
                    map_block_key: value,
                  },
                  '#withTextInputSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTextInputSpecification(value): {
                    text_input_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTextInputSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTextInputSpecificationMixin(value): {
                    text_input_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  text_input_specification+:
                    {
                      '#': { help: '', name: 'text_input_specification' },
                      '#withStartTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withStartTimeoutMs(value): {
                        start_timeout_ms: value,
                      },
                    },
                },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreationDateTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationDateTime(value): {
        creation_date_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDialogCodeHook': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDialogCodeHook(value): {
        dialog_code_hook:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDialogCodeHookMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDialogCodeHookMixin(value): {
        dialog_code_hook+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      dialog_code_hook+:
        {
          '#': { help: '', name: 'dialog_code_hook' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
        },
      '#withFulfillmentCodeHook': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFulfillmentCodeHook(value): {
        fulfillment_code_hook:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFulfillmentCodeHookMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFulfillmentCodeHookMixin(value): {
        fulfillment_code_hook+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      fulfillment_code_hook+:
        {
          '#': { help: '', name: 'fulfillment_code_hook' },
          '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withActive(value=true): {
            active: value,
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withFulfillmentUpdatesSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFulfillmentUpdatesSpecification(value): {
            fulfillment_updates_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFulfillmentUpdatesSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFulfillmentUpdatesSpecificationMixin(value): {
            fulfillment_updates_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          fulfillment_updates_specification+:
            {
              '#': { help: '', name: 'fulfillment_updates_specification' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withStartResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStartResponse(value): {
                start_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withStartResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStartResponseMixin(value): {
                start_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              start_response+:
                {
                  '#': { help: '', name: 'start_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withDelayInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDelayInSeconds(value): {
                    delay_in_seconds: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                },
              '#withTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withTimeoutInSeconds(value): {
                timeout_in_seconds: value,
              },
              '#withUpdateResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withUpdateResponse(value): {
                update_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withUpdateResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withUpdateResponseMixin(value): {
                update_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              update_response+:
                {
                  '#': { help: '', name: 'update_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withFrequencyInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrequencyInSeconds(value): {
                    frequency_in_seconds: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                },
            },
          '#withPostFulfillmentStatusSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPostFulfillmentStatusSpecification(value): {
            post_fulfillment_status_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPostFulfillmentStatusSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPostFulfillmentStatusSpecificationMixin(value): {
            post_fulfillment_status_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          post_fulfillment_status_specification+:
            {
              '#': { help: '', name: 'post_fulfillment_status_specification' },
              '#withFailureConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFailureConditional(value): {
                failure_conditional:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFailureConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFailureConditionalMixin(value): {
                failure_conditional+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              failure_conditional+:
                {
                  '#': { help: '', name: 'failure_conditional' },
                  '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withActive(value=true): {
                    active: value,
                  },
                  '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionalBranch(value): {
                    conditional_branch:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionalBranchMixin(value): {
                    conditional_branch+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  conditional_branch+:
                    {
                      '#': { help: '', name: 'conditional_branch' },
                      '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCondition(value): {
                        condition:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionMixin(value): {
                        condition+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      condition+:
                        {
                          '#': { help: '', name: 'condition' },
                          '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExpressionString(value): {
                            expression_string: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStep(value): {
                        next_step:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStepMixin(value): {
                        next_step+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      next_step+:
                        {
                          '#': { help: '', name: 'next_step' },
                          '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogAction(value): {
                            dialog_action:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogActionMixin(value): {
                            dialog_action+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          dialog_action+:
                            {
                              '#': { help: '', name: 'dialog_action' },
                              '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSlotToElicit(value): {
                                slot_to_elicit: value,
                              },
                              '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withSuppressNextMessage(value=true): {
                                suppress_next_message: value,
                              },
                              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withType(value): {
                                type: value,
                              },
                            },
                          '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntent(value): {
                            intent:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntentMixin(value): {
                            intent+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          intent+:
                            {
                              '#': { help: '', name: 'intent' },
                              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withName(value): {
                                name: value,
                              },
                              '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlot(value): {
                                slot:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlotMixin(value): {
                                slot+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              slot+:
                                {
                                  '#': { help: '', name: 'slot' },
                                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withMapBlockKey(value): {
                                    map_block_key: value,
                                  },
                                  '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withShape(value): {
                                    shape: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValue(value): {
                                    value:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValueMixin(value): {
                                    value+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  value+:
                                    {
                                      '#': { help: '', name: 'value' },
                                      '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withInterpretedValue(value): {
                                        interpreted_value: value,
                                      },
                                    },
                                },
                            },
                          '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributes(value): {
                            session_attributes: value,
                          },
                          '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributesMixin(value): {
                            session_attributes+: value,
                          },
                        },
                      '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponse(value): {
                        response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponseMixin(value): {
                        response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      response+:
                        {
                          '#': { help: '', name: 'response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                  '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultBranch(value): {
                    default_branch:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultBranchMixin(value): {
                    default_branch+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  default_branch+:
                    {
                      '#': { help: '', name: 'default_branch' },
                      '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStep(value): {
                        next_step:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStepMixin(value): {
                        next_step+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      next_step+:
                        {
                          '#': { help: '', name: 'next_step' },
                          '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogAction(value): {
                            dialog_action:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogActionMixin(value): {
                            dialog_action+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          dialog_action+:
                            {
                              '#': { help: '', name: 'dialog_action' },
                              '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSlotToElicit(value): {
                                slot_to_elicit: value,
                              },
                              '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withSuppressNextMessage(value=true): {
                                suppress_next_message: value,
                              },
                              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withType(value): {
                                type: value,
                              },
                            },
                          '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntent(value): {
                            intent:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntentMixin(value): {
                            intent+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          intent+:
                            {
                              '#': { help: '', name: 'intent' },
                              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withName(value): {
                                name: value,
                              },
                              '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlot(value): {
                                slot:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlotMixin(value): {
                                slot+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              slot+:
                                {
                                  '#': { help: '', name: 'slot' },
                                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withMapBlockKey(value): {
                                    map_block_key: value,
                                  },
                                  '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withShape(value): {
                                    shape: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValue(value): {
                                    value:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValueMixin(value): {
                                    value+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  value+:
                                    {
                                      '#': { help: '', name: 'value' },
                                      '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withInterpretedValue(value): {
                                        interpreted_value: value,
                                      },
                                    },
                                },
                            },
                          '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributes(value): {
                            session_attributes: value,
                          },
                          '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributesMixin(value): {
                            session_attributes+: value,
                          },
                        },
                      '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponse(value): {
                        response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponseMixin(value): {
                        response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      response+:
                        {
                          '#': { help: '', name: 'response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                },
              '#withFailureNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFailureNextStep(value): {
                failure_next_step:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFailureNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFailureNextStepMixin(value): {
                failure_next_step+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              failure_next_step+:
                {
                  '#': { help: '', name: 'failure_next_step' },
                  '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDialogAction(value): {
                    dialog_action:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDialogActionMixin(value): {
                    dialog_action+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  dialog_action+:
                    {
                      '#': { help: '', name: 'dialog_action' },
                      '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSlotToElicit(value): {
                        slot_to_elicit: value,
                      },
                      '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withSuppressNextMessage(value=true): {
                        suppress_next_message: value,
                      },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                  '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIntent(value): {
                    intent:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIntentMixin(value): {
                    intent+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  intent+:
                    {
                      '#': { help: '', name: 'intent' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSlot(value): {
                        slot:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSlotMixin(value): {
                        slot+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      slot+:
                        {
                          '#': { help: '', name: 'slot' },
                          '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withMapBlockKey(value): {
                            map_block_key: value,
                          },
                          '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withShape(value): {
                            shape: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValue(value): {
                            value:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValueMixin(value): {
                            value+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          value+:
                            {
                              '#': { help: '', name: 'value' },
                              '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withInterpretedValue(value): {
                                interpreted_value: value,
                              },
                            },
                        },
                    },
                  '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSessionAttributes(value): {
                    session_attributes: value,
                  },
                  '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSessionAttributesMixin(value): {
                    session_attributes+: value,
                  },
                },
              '#withFailureResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFailureResponse(value): {
                failure_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFailureResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFailureResponseMixin(value): {
                failure_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              failure_response+:
                {
                  '#': { help: '', name: 'failure_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                },
              '#withSuccessConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSuccessConditional(value): {
                success_conditional:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSuccessConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSuccessConditionalMixin(value): {
                success_conditional+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              success_conditional+:
                {
                  '#': { help: '', name: 'success_conditional' },
                  '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withActive(value=true): {
                    active: value,
                  },
                  '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionalBranch(value): {
                    conditional_branch:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionalBranchMixin(value): {
                    conditional_branch+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  conditional_branch+:
                    {
                      '#': { help: '', name: 'conditional_branch' },
                      '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCondition(value): {
                        condition:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionMixin(value): {
                        condition+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      condition+:
                        {
                          '#': { help: '', name: 'condition' },
                          '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExpressionString(value): {
                            expression_string: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStep(value): {
                        next_step:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStepMixin(value): {
                        next_step+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      next_step+:
                        {
                          '#': { help: '', name: 'next_step' },
                          '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogAction(value): {
                            dialog_action:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogActionMixin(value): {
                            dialog_action+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          dialog_action+:
                            {
                              '#': { help: '', name: 'dialog_action' },
                              '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSlotToElicit(value): {
                                slot_to_elicit: value,
                              },
                              '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withSuppressNextMessage(value=true): {
                                suppress_next_message: value,
                              },
                              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withType(value): {
                                type: value,
                              },
                            },
                          '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntent(value): {
                            intent:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntentMixin(value): {
                            intent+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          intent+:
                            {
                              '#': { help: '', name: 'intent' },
                              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withName(value): {
                                name: value,
                              },
                              '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlot(value): {
                                slot:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlotMixin(value): {
                                slot+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              slot+:
                                {
                                  '#': { help: '', name: 'slot' },
                                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withMapBlockKey(value): {
                                    map_block_key: value,
                                  },
                                  '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withShape(value): {
                                    shape: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValue(value): {
                                    value:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValueMixin(value): {
                                    value+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  value+:
                                    {
                                      '#': { help: '', name: 'value' },
                                      '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withInterpretedValue(value): {
                                        interpreted_value: value,
                                      },
                                    },
                                },
                            },
                          '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributes(value): {
                            session_attributes: value,
                          },
                          '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributesMixin(value): {
                            session_attributes+: value,
                          },
                        },
                      '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponse(value): {
                        response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponseMixin(value): {
                        response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      response+:
                        {
                          '#': { help: '', name: 'response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                  '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultBranch(value): {
                    default_branch:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultBranchMixin(value): {
                    default_branch+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  default_branch+:
                    {
                      '#': { help: '', name: 'default_branch' },
                      '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStep(value): {
                        next_step:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStepMixin(value): {
                        next_step+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      next_step+:
                        {
                          '#': { help: '', name: 'next_step' },
                          '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogAction(value): {
                            dialog_action:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogActionMixin(value): {
                            dialog_action+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          dialog_action+:
                            {
                              '#': { help: '', name: 'dialog_action' },
                              '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSlotToElicit(value): {
                                slot_to_elicit: value,
                              },
                              '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withSuppressNextMessage(value=true): {
                                suppress_next_message: value,
                              },
                              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withType(value): {
                                type: value,
                              },
                            },
                          '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntent(value): {
                            intent:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntentMixin(value): {
                            intent+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          intent+:
                            {
                              '#': { help: '', name: 'intent' },
                              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withName(value): {
                                name: value,
                              },
                              '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlot(value): {
                                slot:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlotMixin(value): {
                                slot+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              slot+:
                                {
                                  '#': { help: '', name: 'slot' },
                                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withMapBlockKey(value): {
                                    map_block_key: value,
                                  },
                                  '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withShape(value): {
                                    shape: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValue(value): {
                                    value:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValueMixin(value): {
                                    value+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  value+:
                                    {
                                      '#': { help: '', name: 'value' },
                                      '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withInterpretedValue(value): {
                                        interpreted_value: value,
                                      },
                                    },
                                },
                            },
                          '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributes(value): {
                            session_attributes: value,
                          },
                          '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributesMixin(value): {
                            session_attributes+: value,
                          },
                        },
                      '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponse(value): {
                        response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponseMixin(value): {
                        response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      response+:
                        {
                          '#': { help: '', name: 'response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                },
              '#withSuccessNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSuccessNextStep(value): {
                success_next_step:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSuccessNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSuccessNextStepMixin(value): {
                success_next_step+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              success_next_step+:
                {
                  '#': { help: '', name: 'success_next_step' },
                  '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDialogAction(value): {
                    dialog_action:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDialogActionMixin(value): {
                    dialog_action+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  dialog_action+:
                    {
                      '#': { help: '', name: 'dialog_action' },
                      '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSlotToElicit(value): {
                        slot_to_elicit: value,
                      },
                      '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withSuppressNextMessage(value=true): {
                        suppress_next_message: value,
                      },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                  '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIntent(value): {
                    intent:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIntentMixin(value): {
                    intent+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  intent+:
                    {
                      '#': { help: '', name: 'intent' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSlot(value): {
                        slot:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSlotMixin(value): {
                        slot+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      slot+:
                        {
                          '#': { help: '', name: 'slot' },
                          '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withMapBlockKey(value): {
                            map_block_key: value,
                          },
                          '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withShape(value): {
                            shape: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValue(value): {
                            value:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValueMixin(value): {
                            value+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          value+:
                            {
                              '#': { help: '', name: 'value' },
                              '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withInterpretedValue(value): {
                                interpreted_value: value,
                              },
                            },
                        },
                    },
                  '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSessionAttributes(value): {
                    session_attributes: value,
                  },
                  '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSessionAttributesMixin(value): {
                    session_attributes+: value,
                  },
                },
              '#withSuccessResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSuccessResponse(value): {
                success_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSuccessResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSuccessResponseMixin(value): {
                success_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              success_response+:
                {
                  '#': { help: '', name: 'success_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                },
              '#withTimeoutConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutConditional(value): {
                timeout_conditional:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutConditionalMixin(value): {
                timeout_conditional+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout_conditional+:
                {
                  '#': { help: '', name: 'timeout_conditional' },
                  '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withActive(value=true): {
                    active: value,
                  },
                  '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionalBranch(value): {
                    conditional_branch:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionalBranchMixin(value): {
                    conditional_branch+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  conditional_branch+:
                    {
                      '#': { help: '', name: 'conditional_branch' },
                      '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCondition(value): {
                        condition:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionMixin(value): {
                        condition+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      condition+:
                        {
                          '#': { help: '', name: 'condition' },
                          '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExpressionString(value): {
                            expression_string: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStep(value): {
                        next_step:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStepMixin(value): {
                        next_step+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      next_step+:
                        {
                          '#': { help: '', name: 'next_step' },
                          '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogAction(value): {
                            dialog_action:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogActionMixin(value): {
                            dialog_action+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          dialog_action+:
                            {
                              '#': { help: '', name: 'dialog_action' },
                              '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSlotToElicit(value): {
                                slot_to_elicit: value,
                              },
                              '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withSuppressNextMessage(value=true): {
                                suppress_next_message: value,
                              },
                              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withType(value): {
                                type: value,
                              },
                            },
                          '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntent(value): {
                            intent:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntentMixin(value): {
                            intent+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          intent+:
                            {
                              '#': { help: '', name: 'intent' },
                              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withName(value): {
                                name: value,
                              },
                              '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlot(value): {
                                slot:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlotMixin(value): {
                                slot+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              slot+:
                                {
                                  '#': { help: '', name: 'slot' },
                                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withMapBlockKey(value): {
                                    map_block_key: value,
                                  },
                                  '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withShape(value): {
                                    shape: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValue(value): {
                                    value:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValueMixin(value): {
                                    value+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  value+:
                                    {
                                      '#': { help: '', name: 'value' },
                                      '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withInterpretedValue(value): {
                                        interpreted_value: value,
                                      },
                                    },
                                },
                            },
                          '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributes(value): {
                            session_attributes: value,
                          },
                          '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributesMixin(value): {
                            session_attributes+: value,
                          },
                        },
                      '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponse(value): {
                        response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponseMixin(value): {
                        response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      response+:
                        {
                          '#': { help: '', name: 'response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                  '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultBranch(value): {
                    default_branch:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultBranchMixin(value): {
                    default_branch+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  default_branch+:
                    {
                      '#': { help: '', name: 'default_branch' },
                      '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStep(value): {
                        next_step:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNextStepMixin(value): {
                        next_step+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      next_step+:
                        {
                          '#': { help: '', name: 'next_step' },
                          '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogAction(value): {
                            dialog_action:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withDialogActionMixin(value): {
                            dialog_action+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          dialog_action+:
                            {
                              '#': { help: '', name: 'dialog_action' },
                              '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSlotToElicit(value): {
                                slot_to_elicit: value,
                              },
                              '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withSuppressNextMessage(value=true): {
                                suppress_next_message: value,
                              },
                              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withType(value): {
                                type: value,
                              },
                            },
                          '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntent(value): {
                            intent:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withIntentMixin(value): {
                            intent+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          intent+:
                            {
                              '#': { help: '', name: 'intent' },
                              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withName(value): {
                                name: value,
                              },
                              '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlot(value): {
                                slot:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSlotMixin(value): {
                                slot+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              slot+:
                                {
                                  '#': { help: '', name: 'slot' },
                                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withMapBlockKey(value): {
                                    map_block_key: value,
                                  },
                                  '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withShape(value): {
                                    shape: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValue(value): {
                                    value:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withValueMixin(value): {
                                    value+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  value+:
                                    {
                                      '#': { help: '', name: 'value' },
                                      '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withInterpretedValue(value): {
                                        interpreted_value: value,
                                      },
                                    },
                                },
                            },
                          '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributes(value): {
                            session_attributes: value,
                          },
                          '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withSessionAttributesMixin(value): {
                            session_attributes+: value,
                          },
                        },
                      '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponse(value): {
                        response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withResponseMixin(value): {
                        response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      response+:
                        {
                          '#': { help: '', name: 'response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                },
              '#withTimeoutNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutNextStep(value): {
                timeout_next_step:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutNextStepMixin(value): {
                timeout_next_step+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout_next_step+:
                {
                  '#': { help: '', name: 'timeout_next_step' },
                  '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDialogAction(value): {
                    dialog_action:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDialogActionMixin(value): {
                    dialog_action+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  dialog_action+:
                    {
                      '#': { help: '', name: 'dialog_action' },
                      '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSlotToElicit(value): {
                        slot_to_elicit: value,
                      },
                      '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withSuppressNextMessage(value=true): {
                        suppress_next_message: value,
                      },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                    },
                  '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIntent(value): {
                    intent:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIntentMixin(value): {
                    intent+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  intent+:
                    {
                      '#': { help: '', name: 'intent' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSlot(value): {
                        slot:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSlotMixin(value): {
                        slot+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      slot+:
                        {
                          '#': { help: '', name: 'slot' },
                          '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withMapBlockKey(value): {
                            map_block_key: value,
                          },
                          '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withShape(value): {
                            shape: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValue(value): {
                            value:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValueMixin(value): {
                            value+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          value+:
                            {
                              '#': { help: '', name: 'value' },
                              '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withInterpretedValue(value): {
                                interpreted_value: value,
                              },
                            },
                        },
                    },
                  '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSessionAttributes(value): {
                    session_attributes: value,
                  },
                  '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSessionAttributesMixin(value): {
                    session_attributes+: value,
                  },
                },
              '#withTimeoutResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutResponse(value): {
                timeout_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutResponseMixin(value): {
                timeout_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout_response+:
                {
                  '#': { help: '', name: 'timeout_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInitialResponseSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInitialResponseSetting(value): {
        initial_response_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInitialResponseSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInitialResponseSettingMixin(value): {
        initial_response_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      initial_response_setting+:
        {
          '#': { help: '', name: 'initial_response_setting' },
          '#withCodeHook': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCodeHook(value): {
            code_hook:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCodeHookMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCodeHookMixin(value): {
            code_hook+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          code_hook+:
            {
              '#': { help: '', name: 'code_hook' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withEnableCodeHookInvocation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnableCodeHookInvocation(value=true): {
                enable_code_hook_invocation: value,
              },
              '#withInvocationLabel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInvocationLabel(value): {
                invocation_label: value,
              },
              '#withPostCodeHookSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPostCodeHookSpecification(value): {
                post_code_hook_specification:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPostCodeHookSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPostCodeHookSpecificationMixin(value): {
                post_code_hook_specification+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              post_code_hook_specification+:
                {
                  '#': { help: '', name: 'post_code_hook_specification' },
                  '#withFailureConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureConditional(value): {
                    failure_conditional:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFailureConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureConditionalMixin(value): {
                    failure_conditional+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  failure_conditional+:
                    {
                      '#': { help: '', name: 'failure_conditional' },
                      '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withActive(value=true): {
                        active: value,
                      },
                      '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranch(value): {
                        conditional_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranchMixin(value): {
                        conditional_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      conditional_branch+:
                        {
                          '#': { help: '', name: 'conditional_branch' },
                          '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCondition(value): {
                            condition:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withConditionMixin(value): {
                            condition+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          condition+:
                            {
                              '#': { help: '', name: 'condition' },
                              '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withExpressionString(value): {
                                expression_string: value,
                              },
                            },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                      '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranch(value): {
                        default_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranchMixin(value): {
                        default_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      default_branch+:
                        {
                          '#': { help: '', name: 'default_branch' },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  '#withFailureNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureNextStep(value): {
                    failure_next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFailureNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureNextStepMixin(value): {
                    failure_next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  failure_next_step+:
                    {
                      '#': { help: '', name: 'failure_next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withFailureResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureResponse(value): {
                    failure_response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFailureResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFailureResponseMixin(value): {
                    failure_response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  failure_response+:
                    {
                      '#': { help: '', name: 'failure_response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                  '#withSuccessConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessConditional(value): {
                    success_conditional:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSuccessConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessConditionalMixin(value): {
                    success_conditional+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  success_conditional+:
                    {
                      '#': { help: '', name: 'success_conditional' },
                      '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withActive(value=true): {
                        active: value,
                      },
                      '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranch(value): {
                        conditional_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranchMixin(value): {
                        conditional_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      conditional_branch+:
                        {
                          '#': { help: '', name: 'conditional_branch' },
                          '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCondition(value): {
                            condition:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withConditionMixin(value): {
                            condition+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          condition+:
                            {
                              '#': { help: '', name: 'condition' },
                              '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withExpressionString(value): {
                                expression_string: value,
                              },
                            },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                      '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranch(value): {
                        default_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranchMixin(value): {
                        default_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      default_branch+:
                        {
                          '#': { help: '', name: 'default_branch' },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  '#withSuccessNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessNextStep(value): {
                    success_next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSuccessNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessNextStepMixin(value): {
                    success_next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  success_next_step+:
                    {
                      '#': { help: '', name: 'success_next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withSuccessResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessResponse(value): {
                    success_response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSuccessResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSuccessResponseMixin(value): {
                    success_response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  success_response+:
                    {
                      '#': { help: '', name: 'success_response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                  '#withTimeoutConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutConditional(value): {
                    timeout_conditional:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTimeoutConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutConditionalMixin(value): {
                    timeout_conditional+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  timeout_conditional+:
                    {
                      '#': { help: '', name: 'timeout_conditional' },
                      '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withActive(value=true): {
                        active: value,
                      },
                      '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranch(value): {
                        conditional_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withConditionalBranchMixin(value): {
                        conditional_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      conditional_branch+:
                        {
                          '#': { help: '', name: 'conditional_branch' },
                          '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCondition(value): {
                            condition:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withConditionMixin(value): {
                            condition+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          condition+:
                            {
                              '#': { help: '', name: 'condition' },
                              '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withExpressionString(value): {
                                expression_string: value,
                              },
                            },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                      '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranch(value): {
                        default_branch:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultBranchMixin(value): {
                        default_branch+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      default_branch+:
                        {
                          '#': { help: '', name: 'default_branch' },
                          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStep(value): {
                            next_step:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withNextStepMixin(value): {
                            next_step+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          next_step+:
                            {
                              '#': { help: '', name: 'next_step' },
                              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogAction(value): {
                                dialog_action:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDialogActionMixin(value): {
                                dialog_action+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dialog_action+:
                                {
                                  '#': { help: '', name: 'dialog_action' },
                                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSlotToElicit(value): {
                                    slot_to_elicit: value,
                                  },
                                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                                  withSuppressNextMessage(value=true): {
                                    suppress_next_message: value,
                                  },
                                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withType(value): {
                                    type: value,
                                  },
                                },
                              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntent(value): {
                                intent:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withIntentMixin(value): {
                                intent+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              intent+:
                                {
                                  '#': { help: '', name: 'intent' },
                                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withName(value): {
                                    name: value,
                                  },
                                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlot(value): {
                                    slot:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSlotMixin(value): {
                                    slot+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  slot+:
                                    {
                                      '#': { help: '', name: 'slot' },
                                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withMapBlockKey(value): {
                                        map_block_key: value,
                                      },
                                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withShape(value): {
                                        shape: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValue(value): {
                                        value:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withValueMixin(value): {
                                        value+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      value+:
                                        {
                                          '#': { help: '', name: 'value' },
                                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withInterpretedValue(value): {
                                            interpreted_value: value,
                                          },
                                        },
                                    },
                                },
                              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributes(value): {
                                session_attributes: value,
                              },
                              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                              withSessionAttributesMixin(value): {
                                session_attributes+: value,
                              },
                            },
                          '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponse(value): {
                            response:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withResponseMixin(value): {
                            response+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          response+:
                            {
                              '#': { help: '', name: 'response' },
                              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowInterrupt(value=true): {
                                allow_interrupt: value,
                              },
                              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroup(value): {
                                message_group:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageGroupMixin(value): {
                                message_group+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message_group+:
                                {
                                  '#': { help: '', name: 'message_group' },
                                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessage(value): {
                                    message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMessageMixin(value): {
                                    message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  message+:
                                    {
                                      '#': { help: '', name: 'message' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariation(value): {
                                    variation:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withVariationMixin(value): {
                                    variation+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  variation+:
                                    {
                                      '#': { help: '', name: 'variation' },
                                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayload(value): {
                                        custom_payload:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCustomPayloadMixin(value): {
                                        custom_payload+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      custom_payload+:
                                        {
                                          '#': { help: '', name: 'custom_payload' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCard(value): {
                                        image_response_card:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withImageResponseCardMixin(value): {
                                        image_response_card+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      image_response_card+:
                                        {
                                          '#': { help: '', name: 'image_response_card' },
                                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButton(value): {
                                            button:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                          withButtonMixin(value): {
                                            button+:
                                              (if std.isArray(value)
                                               then value
                                               else [value]),
                                          },
                                          button+:
                                            {
                                              '#': { help: '', name: 'button' },
                                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withText(value): {
                                                text: value,
                                              },
                                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                              withValue(value): {
                                                value: value,
                                              },
                                            },
                                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withImageUrl(value): {
                                            image_url: value,
                                          },
                                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withSubtitle(value): {
                                            subtitle: value,
                                          },
                                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withTitle(value): {
                                            title: value,
                                          },
                                        },
                                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessage(value): {
                                        plain_text_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withPlainTextMessageMixin(value): {
                                        plain_text_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      plain_text_message+:
                                        {
                                          '#': { help: '', name: 'plain_text_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessage(value): {
                                        ssml_message:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withSsmlMessageMixin(value): {
                                        ssml_message+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      ssml_message+:
                                        {
                                          '#': { help: '', name: 'ssml_message' },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                    },
                                },
                            },
                        },
                    },
                  '#withTimeoutNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutNextStep(value): {
                    timeout_next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTimeoutNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutNextStepMixin(value): {
                    timeout_next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  timeout_next_step+:
                    {
                      '#': { help: '', name: 'timeout_next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withTimeoutResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutResponse(value): {
                    timeout_response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTimeoutResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTimeoutResponseMixin(value): {
                    timeout_response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  timeout_response+:
                    {
                      '#': { help: '', name: 'timeout_response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withConditional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConditional(value): {
            conditional:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConditionalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConditionalMixin(value): {
            conditional+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          conditional+:
            {
              '#': { help: '', name: 'conditional' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withConditionalBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranch(value): {
                conditional_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withConditionalBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConditionalBranchMixin(value): {
                conditional_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              conditional_branch+:
                {
                  '#': { help: '', name: 'conditional_branch' },
                  '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCondition(value): {
                    condition:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withConditionMixin(value): {
                    condition+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  condition+:
                    {
                      '#': { help: '', name: 'condition' },
                      '#withExpressionString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExpressionString(value): {
                        expression_string: value,
                      },
                    },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
              '#withDefaultBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranch(value): {
                default_branch:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDefaultBranchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultBranchMixin(value): {
                default_branch+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              default_branch+:
                {
                  '#': { help: '', name: 'default_branch' },
                  '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStep(value): {
                    next_step:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNextStepMixin(value): {
                    next_step+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  next_step+:
                    {
                      '#': { help: '', name: 'next_step' },
                      '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogAction(value): {
                        dialog_action:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDialogActionMixin(value): {
                        dialog_action+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dialog_action+:
                        {
                          '#': { help: '', name: 'dialog_action' },
                          '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSlotToElicit(value): {
                            slot_to_elicit: value,
                          },
                          '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withSuppressNextMessage(value=true): {
                            suppress_next_message: value,
                          },
                          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withType(value): {
                            type: value,
                          },
                        },
                      '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntent(value): {
                        intent:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIntentMixin(value): {
                        intent+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      intent+:
                        {
                          '#': { help: '', name: 'intent' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlot(value): {
                            slot:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSlotMixin(value): {
                            slot+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          slot+:
                            {
                              '#': { help: '', name: 'slot' },
                              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withMapBlockKey(value): {
                                map_block_key: value,
                              },
                              '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withShape(value): {
                                shape: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValue(value): {
                                value:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withValueMixin(value): {
                                value+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              value+:
                                {
                                  '#': { help: '', name: 'value' },
                                  '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withInterpretedValue(value): {
                                    interpreted_value: value,
                                  },
                                },
                            },
                        },
                      '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributes(value): {
                        session_attributes: value,
                      },
                      '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withSessionAttributesMixin(value): {
                        session_attributes+: value,
                      },
                    },
                  '#withResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponse(value): {
                    response:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResponseMixin(value): {
                    response+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  response+:
                    {
                      '#': { help: '', name: 'response' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withInitialResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInitialResponse(value): {
            initial_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInitialResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInitialResponseMixin(value): {
            initial_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          initial_response+:
            {
              '#': { help: '', name: 'initial_response' },
              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAllowInterrupt(value=true): {
                allow_interrupt: value,
              },
              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroup(value): {
                message_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroupMixin(value): {
                message_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              message_group+:
                {
                  '#': { help: '', name: 'message_group' },
                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessage(value): {
                    message:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageMixin(value): {
                    message+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message+:
                    {
                      '#': { help: '', name: 'message' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariation(value): {
                    variation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariationMixin(value): {
                    variation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  variation+:
                    {
                      '#': { help: '', name: 'variation' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
            },
          '#withNextStep': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNextStep(value): {
            next_step:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNextStepMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNextStepMixin(value): {
            next_step+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          next_step+:
            {
              '#': { help: '', name: 'next_step' },
              '#withDialogAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogAction(value): {
                dialog_action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDialogActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDialogActionMixin(value): {
                dialog_action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dialog_action+:
                {
                  '#': { help: '', name: 'dialog_action' },
                  '#withSlotToElicit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSlotToElicit(value): {
                    slot_to_elicit: value,
                  },
                  '#withSuppressNextMessage': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withSuppressNextMessage(value=true): {
                    suppress_next_message: value,
                  },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withIntent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntent(value): {
                intent:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIntentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIntentMixin(value): {
                intent+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              intent+:
                {
                  '#': { help: '', name: 'intent' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSlot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlot(value): {
                    slot:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSlotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSlotMixin(value): {
                    slot+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  slot+:
                    {
                      '#': { help: '', name: 'slot' },
                      '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMapBlockKey(value): {
                        map_block_key: value,
                      },
                      '#withShape': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withShape(value): {
                        shape: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValue(value): {
                        value:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValueMixin(value): {
                        value+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      value+:
                        {
                          '#': { help: '', name: 'value' },
                          '#withInterpretedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withInterpretedValue(value): {
                            interpreted_value: value,
                          },
                        },
                    },
                },
              '#withSessionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributes(value): {
                session_attributes: value,
              },
              '#withSessionAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSessionAttributesMixin(value): {
                session_attributes+: value,
              },
            },
        },
      '#withInputContext': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInputContext(value): {
        input_context:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInputContextMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInputContextMixin(value): {
        input_context+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      input_context+:
        {
          '#': { help: '', name: 'input_context' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withIntentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIntentId(value): {
        intent_id: value,
      },
      '#withKendraConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKendraConfiguration(value): {
        kendra_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKendraConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKendraConfigurationMixin(value): {
        kendra_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      kendra_configuration+:
        {
          '#': { help: '', name: 'kendra_configuration' },
          '#withKendraIndex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKendraIndex(value): {
            kendra_index: value,
          },
          '#withQueryFilterString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withQueryFilterString(value): {
            query_filter_string: value,
          },
          '#withQueryFilterStringEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withQueryFilterStringEnabled(value=true): {
            query_filter_string_enabled: value,
          },
        },
      '#withLastUpdatedDateTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDateTime(value): {
        last_updated_date_time: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLocaleId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocaleId(value): {
        locale_id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOutputContext': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputContext(value): {
        output_context:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOutputContextMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputContextMixin(value): {
        output_context+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      output_context+:
        {
          '#': { help: '', name: 'output_context' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withTimeToLiveInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTimeToLiveInSeconds(value): {
            time_to_live_in_seconds: value,
          },
          '#withTurnsToLive': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTurnsToLive(value): {
            turns_to_live: value,
          },
        },
      '#withParentIntentSignature': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParentIntentSignature(value): {
        parent_intent_signature: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSampleUtterance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSampleUtterance(value): {
        sample_utterance:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSampleUtteranceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSampleUtteranceMixin(value): {
        sample_utterance+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      sample_utterance+:
        {
          '#': { help: '', name: 'sample_utterance' },
          '#withUtterance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUtterance(value): {
            utterance: value,
          },
        },
      '#withSlotPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSlotPriority(value): {
        slot_priority:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSlotPriorityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSlotPriorityMixin(value): {
        slot_priority+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      slot_priority+:
        {
          '#': { help: '', name: 'slot_priority' },
          '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPriority(value): {
            priority: value,
          },
          '#withSlotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSlotId(value): {
            slot_id: value,
          },
        },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
  aws_lexv2models_slot:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bot_id', type: 'string' }, { default: null, enums: null, name: 'bot_version', type: 'string' }, { default: null, enums: null, name: 'intent_id', type: 'string' }, { default: null, enums: null, name: 'locale_id', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, bot_id, bot_version, intent_id, locale_id, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withBotId(bot_id)
        + self.withBotVersion(bot_version)
        + self.withIntentId(intent_id)
        + self.withLocaleId(locale_id)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_lexv2models_slot: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotId(value): {
        bot_id: value,
      },
      '#withBotVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotVersion(value): {
        bot_version: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIntentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIntentId(value): {
        intent_id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLocaleId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocaleId(value): {
        locale_id: value,
      },
      '#withMultipleValuesSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMultipleValuesSetting(value): {
        multiple_values_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMultipleValuesSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMultipleValuesSettingMixin(value): {
        multiple_values_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      multiple_values_setting+:
        {
          '#': { help: '', name: 'multiple_values_setting' },
          '#withAllowMultipleValues': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAllowMultipleValues(value=true): {
            allow_multiple_values: value,
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withObfuscationSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withObfuscationSetting(value): {
        obfuscation_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withObfuscationSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withObfuscationSettingMixin(value): {
        obfuscation_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      obfuscation_setting+:
        {
          '#': { help: '', name: 'obfuscation_setting' },
          '#withObfuscationSettingType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withObfuscationSettingType(value): {
            obfuscation_setting_type: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSlotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSlotId(value): {
        slot_id: value,
      },
      '#withSlotTypeId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSlotTypeId(value): {
        slot_type_id: value,
      },
      '#withSubSlotSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubSlotSetting(value): {
        sub_slot_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubSlotSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubSlotSettingMixin(value): {
        sub_slot_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      sub_slot_setting+:
        {
          '#': { help: '', name: 'sub_slot_setting' },
          '#withExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExpression(value): {
            expression: value,
          },
          '#withSlotSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSlotSpecification(value): {
            slot_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSlotSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSlotSpecificationMixin(value): {
            slot_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          slot_specification+:
            {
              '#': { help: '', name: 'slot_specification' },
              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMapBlockKey(value): {
                map_block_key: value,
              },
              '#withSlotTypeId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSlotTypeId(value): {
                slot_type_id: value,
              },
              '#withValueElicitationSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValueElicitationSetting(value): {
                value_elicitation_setting:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withValueElicitationSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValueElicitationSettingMixin(value): {
                value_elicitation_setting+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              value_elicitation_setting+:
                {
                  '#': { help: '', name: 'value_elicitation_setting' },
                  '#withDefaultValueSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultValueSpecification(value): {
                    default_value_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDefaultValueSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDefaultValueSpecificationMixin(value): {
                    default_value_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  default_value_specification+:
                    {
                      '#': { help: '', name: 'default_value_specification' },
                      '#withDefaultValueList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultValueList(value): {
                        default_value_list:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDefaultValueListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDefaultValueListMixin(value): {
                        default_value_list+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      default_value_list+:
                        {
                          '#': { help: '', name: 'default_value_list' },
                          '#withDefaultValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultValue(value): {
                            default_value: value,
                          },
                        },
                    },
                  '#withPromptSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPromptSpecification(value): {
                    prompt_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPromptSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPromptSpecificationMixin(value): {
                    prompt_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  prompt_specification+:
                    {
                      '#': { help: '', name: 'prompt_specification' },
                      '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowInterrupt(value=true): {
                        allow_interrupt: value,
                      },
                      '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRetries(value): {
                        max_retries: value,
                      },
                      '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroup(value): {
                        message_group:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageGroupMixin(value): {
                        message_group+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message_group+:
                        {
                          '#': { help: '', name: 'message_group' },
                          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessage(value): {
                            message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageMixin(value): {
                            message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message+:
                            {
                              '#': { help: '', name: 'message' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                          '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariation(value): {
                            variation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withVariationMixin(value): {
                            variation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          variation+:
                            {
                              '#': { help: '', name: 'variation' },
                              '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayload(value): {
                                custom_payload:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withCustomPayloadMixin(value): {
                                custom_payload+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              custom_payload+:
                                {
                                  '#': { help: '', name: 'custom_payload' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCard(value): {
                                image_response_card:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withImageResponseCardMixin(value): {
                                image_response_card+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              image_response_card+:
                                {
                                  '#': { help: '', name: 'image_response_card' },
                                  '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButton(value): {
                                    button:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withButtonMixin(value): {
                                    button+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  button+:
                                    {
                                      '#': { help: '', name: 'button' },
                                      '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withText(value): {
                                        text: value,
                                      },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withImageUrl(value): {
                                    image_url: value,
                                  },
                                  '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSubtitle(value): {
                                    subtitle: value,
                                  },
                                  '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withTitle(value): {
                                    title: value,
                                  },
                                },
                              '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessage(value): {
                                plain_text_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withPlainTextMessageMixin(value): {
                                plain_text_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              plain_text_message+:
                                {
                                  '#': { help: '', name: 'plain_text_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessage(value): {
                                ssml_message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSsmlMessageMixin(value): {
                                ssml_message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              ssml_message+:
                                {
                                  '#': { help: '', name: 'ssml_message' },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                            },
                        },
                      '#withMessageSelectionStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMessageSelectionStrategy(value): {
                        message_selection_strategy: value,
                      },
                      '#withPromptAttemptsSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPromptAttemptsSpecification(value): {
                        prompt_attempts_specification:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPromptAttemptsSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPromptAttemptsSpecificationMixin(value): {
                        prompt_attempts_specification+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      prompt_attempts_specification+:
                        {
                          '#': { help: '', name: 'prompt_attempts_specification' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withAllowedInputTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withAllowedInputTypes(value): {
                            allowed_input_types:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withAllowedInputTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withAllowedInputTypesMixin(value): {
                            allowed_input_types+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          allowed_input_types+:
                            {
                              '#': { help: '', name: 'allowed_input_types' },
                              '#withAllowAudioInput': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowAudioInput(value=true): {
                                allow_audio_input: value,
                              },
                              '#withAllowDtmfInput': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                              withAllowDtmfInput(value=true): {
                                allow_dtmf_input: value,
                              },
                            },
                          '#withAudioAndDtmfInputSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withAudioAndDtmfInputSpecification(value): {
                            audio_and_dtmf_input_specification:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withAudioAndDtmfInputSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withAudioAndDtmfInputSpecificationMixin(value): {
                            audio_and_dtmf_input_specification+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          audio_and_dtmf_input_specification+:
                            {
                              '#': { help: '', name: 'audio_and_dtmf_input_specification' },
                              '#withAudioSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withAudioSpecification(value): {
                                audio_specification:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withAudioSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withAudioSpecificationMixin(value): {
                                audio_specification+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              audio_specification+:
                                {
                                  '#': { help: '', name: 'audio_specification' },
                                  '#withEndTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withEndTimeoutMs(value): {
                                    end_timeout_ms: value,
                                  },
                                  '#withMaxLengthMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withMaxLengthMs(value): {
                                    max_length_ms: value,
                                  },
                                },
                              '#withDtmfSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDtmfSpecification(value): {
                                dtmf_specification:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withDtmfSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withDtmfSpecificationMixin(value): {
                                dtmf_specification+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              dtmf_specification+:
                                {
                                  '#': { help: '', name: 'dtmf_specification' },
                                  '#withDeletionCharacter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withDeletionCharacter(value): {
                                    deletion_character: value,
                                  },
                                  '#withEndCharacter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withEndCharacter(value): {
                                    end_character: value,
                                  },
                                  '#withEndTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withEndTimeoutMs(value): {
                                    end_timeout_ms: value,
                                  },
                                  '#withMaxLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                                  withMaxLength(value): {
                                    max_length: value,
                                  },
                                },
                              '#withStartTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStartTimeoutMs(value): {
                                start_timeout_ms: value,
                              },
                            },
                          '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withMapBlockKey(value): {
                            map_block_key: value,
                          },
                          '#withTextInputSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTextInputSpecification(value): {
                            text_input_specification:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withTextInputSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTextInputSpecificationMixin(value): {
                            text_input_specification+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          text_input_specification+:
                            {
                              '#': { help: '', name: 'text_input_specification' },
                              '#withStartTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStartTimeoutMs(value): {
                                start_timeout_ms: value,
                              },
                            },
                        },
                    },
                  '#withSampleUtterance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSampleUtterance(value): {
                    sample_utterance:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSampleUtteranceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSampleUtteranceMixin(value): {
                    sample_utterance+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  sample_utterance+:
                    {
                      '#': { help: '', name: 'sample_utterance' },
                      '#withUtterance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUtterance(value): {
                        utterance: value,
                      },
                    },
                  '#withWaitAndContinueSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWaitAndContinueSpecification(value): {
                    wait_and_continue_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withWaitAndContinueSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWaitAndContinueSpecificationMixin(value): {
                    wait_and_continue_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  wait_and_continue_specification+:
                    {
                      '#': { help: '', name: 'wait_and_continue_specification' },
                      '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withActive(value=true): {
                        active: value,
                      },
                      '#withContinueResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withContinueResponse(value): {
                        continue_response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withContinueResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withContinueResponseMixin(value): {
                        continue_response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      continue_response+:
                        {
                          '#': { help: '', name: 'continue_response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                      '#withStillWaitingResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withStillWaitingResponse(value): {
                        still_waiting_response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withStillWaitingResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withStillWaitingResponseMixin(value): {
                        still_waiting_response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      still_waiting_response+:
                        {
                          '#': { help: '', name: 'still_waiting_response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withFrequencyInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withFrequencyInSeconds(value): {
                            frequency_in_seconds: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                          '#withTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withTimeoutInSeconds(value): {
                            timeout_in_seconds: value,
                          },
                        },
                      '#withWaitingResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withWaitingResponse(value): {
                        waiting_response:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withWaitingResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withWaitingResponseMixin(value): {
                        waiting_response+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      waiting_response+:
                        {
                          '#': { help: '', name: 'waiting_response' },
                          '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withAllowInterrupt(value=true): {
                            allow_interrupt: value,
                          },
                          '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroup(value): {
                            message_group:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMessageGroupMixin(value): {
                            message_group+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          message_group+:
                            {
                              '#': { help: '', name: 'message_group' },
                              '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessage(value): {
                                message:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMessageMixin(value): {
                                message+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              message+:
                                {
                                  '#': { help: '', name: 'message' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                              '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariation(value): {
                                variation:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withVariationMixin(value): {
                                variation+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              variation+:
                                {
                                  '#': { help: '', name: 'variation' },
                                  '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayload(value): {
                                    custom_payload:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCustomPayloadMixin(value): {
                                    custom_payload+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  custom_payload+:
                                    {
                                      '#': { help: '', name: 'custom_payload' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCard(value): {
                                    image_response_card:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withImageResponseCardMixin(value): {
                                    image_response_card+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  image_response_card+:
                                    {
                                      '#': { help: '', name: 'image_response_card' },
                                      '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButton(value): {
                                        button:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withButtonMixin(value): {
                                        button+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      button+:
                                        {
                                          '#': { help: '', name: 'button' },
                                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withText(value): {
                                            text: value,
                                          },
                                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                          withValue(value): {
                                            value: value,
                                          },
                                        },
                                      '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withImageUrl(value): {
                                        image_url: value,
                                      },
                                      '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSubtitle(value): {
                                        subtitle: value,
                                      },
                                      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withTitle(value): {
                                        title: value,
                                      },
                                    },
                                  '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessage(value): {
                                    plain_text_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withPlainTextMessageMixin(value): {
                                    plain_text_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  plain_text_message+:
                                    {
                                      '#': { help: '', name: 'plain_text_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                  '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessage(value): {
                                    ssml_message:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSsmlMessageMixin(value): {
                                    ssml_message+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  ssml_message+:
                                    {
                                      '#': { help: '', name: 'ssml_message' },
                                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withValue(value): {
                                        value: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withValueElicitationSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValueElicitationSetting(value): {
        value_elicitation_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValueElicitationSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValueElicitationSettingMixin(value): {
        value_elicitation_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      value_elicitation_setting+:
        {
          '#': { help: '', name: 'value_elicitation_setting' },
          '#withDefaultValueSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDefaultValueSpecification(value): {
            default_value_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDefaultValueSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDefaultValueSpecificationMixin(value): {
            default_value_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          default_value_specification+:
            {
              '#': { help: '', name: 'default_value_specification' },
              '#withDefaultValueList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultValueList(value): {
                default_value_list:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDefaultValueListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDefaultValueListMixin(value): {
                default_value_list+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              default_value_list+:
                {
                  '#': { help: '', name: 'default_value_list' },
                  '#withDefaultValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDefaultValue(value): {
                    default_value: value,
                  },
                },
            },
          '#withPromptSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPromptSpecification(value): {
            prompt_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPromptSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPromptSpecificationMixin(value): {
            prompt_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          prompt_specification+:
            {
              '#': { help: '', name: 'prompt_specification' },
              '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAllowInterrupt(value=true): {
                allow_interrupt: value,
              },
              '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaxRetries(value): {
                max_retries: value,
              },
              '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroup(value): {
                message_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMessageGroupMixin(value): {
                message_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              message_group+:
                {
                  '#': { help: '', name: 'message_group' },
                  '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessage(value): {
                    message:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageMixin(value): {
                    message+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message+:
                    {
                      '#': { help: '', name: 'message' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariation(value): {
                    variation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVariationMixin(value): {
                    variation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  variation+:
                    {
                      '#': { help: '', name: 'variation' },
                      '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayload(value): {
                        custom_payload:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCustomPayloadMixin(value): {
                        custom_payload+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      custom_payload+:
                        {
                          '#': { help: '', name: 'custom_payload' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCard(value): {
                        image_response_card:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withImageResponseCardMixin(value): {
                        image_response_card+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      image_response_card+:
                        {
                          '#': { help: '', name: 'image_response_card' },
                          '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButton(value): {
                            button:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withButtonMixin(value): {
                            button+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          button+:
                            {
                              '#': { help: '', name: 'button' },
                              '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withText(value): {
                                text: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withImageUrl(value): {
                            image_url: value,
                          },
                          '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSubtitle(value): {
                            subtitle: value,
                          },
                          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTitle(value): {
                            title: value,
                          },
                        },
                      '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessage(value): {
                        plain_text_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPlainTextMessageMixin(value): {
                        plain_text_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      plain_text_message+:
                        {
                          '#': { help: '', name: 'plain_text_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessage(value): {
                        ssml_message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSsmlMessageMixin(value): {
                        ssml_message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      ssml_message+:
                        {
                          '#': { help: '', name: 'ssml_message' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
              '#withMessageSelectionStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMessageSelectionStrategy(value): {
                message_selection_strategy: value,
              },
              '#withPromptAttemptsSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPromptAttemptsSpecification(value): {
                prompt_attempts_specification:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPromptAttemptsSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPromptAttemptsSpecificationMixin(value): {
                prompt_attempts_specification+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              prompt_attempts_specification+:
                {
                  '#': { help: '', name: 'prompt_attempts_specification' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withAllowedInputTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAllowedInputTypes(value): {
                    allowed_input_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAllowedInputTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAllowedInputTypesMixin(value): {
                    allowed_input_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  allowed_input_types+:
                    {
                      '#': { help: '', name: 'allowed_input_types' },
                      '#withAllowAudioInput': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowAudioInput(value=true): {
                        allow_audio_input: value,
                      },
                      '#withAllowDtmfInput': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAllowDtmfInput(value=true): {
                        allow_dtmf_input: value,
                      },
                    },
                  '#withAudioAndDtmfInputSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAudioAndDtmfInputSpecification(value): {
                    audio_and_dtmf_input_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAudioAndDtmfInputSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAudioAndDtmfInputSpecificationMixin(value): {
                    audio_and_dtmf_input_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  audio_and_dtmf_input_specification+:
                    {
                      '#': { help: '', name: 'audio_and_dtmf_input_specification' },
                      '#withAudioSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAudioSpecification(value): {
                        audio_specification:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAudioSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAudioSpecificationMixin(value): {
                        audio_specification+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      audio_specification+:
                        {
                          '#': { help: '', name: 'audio_specification' },
                          '#withEndTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withEndTimeoutMs(value): {
                            end_timeout_ms: value,
                          },
                          '#withMaxLengthMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMaxLengthMs(value): {
                            max_length_ms: value,
                          },
                        },
                      '#withDtmfSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDtmfSpecification(value): {
                        dtmf_specification:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDtmfSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDtmfSpecificationMixin(value): {
                        dtmf_specification+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dtmf_specification+:
                        {
                          '#': { help: '', name: 'dtmf_specification' },
                          '#withDeletionCharacter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDeletionCharacter(value): {
                            deletion_character: value,
                          },
                          '#withEndCharacter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withEndCharacter(value): {
                            end_character: value,
                          },
                          '#withEndTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withEndTimeoutMs(value): {
                            end_timeout_ms: value,
                          },
                          '#withMaxLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMaxLength(value): {
                            max_length: value,
                          },
                        },
                      '#withStartTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withStartTimeoutMs(value): {
                        start_timeout_ms: value,
                      },
                    },
                  '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMapBlockKey(value): {
                    map_block_key: value,
                  },
                  '#withTextInputSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTextInputSpecification(value): {
                    text_input_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTextInputSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTextInputSpecificationMixin(value): {
                    text_input_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  text_input_specification+:
                    {
                      '#': { help: '', name: 'text_input_specification' },
                      '#withStartTimeoutMs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withStartTimeoutMs(value): {
                        start_timeout_ms: value,
                      },
                    },
                },
            },
          '#withSampleUtterance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSampleUtterance(value): {
            sample_utterance:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSampleUtteranceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSampleUtteranceMixin(value): {
            sample_utterance+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          sample_utterance+:
            {
              '#': { help: '', name: 'sample_utterance' },
              '#withUtterance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUtterance(value): {
                utterance: value,
              },
            },
          '#withSlotConstraint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSlotConstraint(value): {
            slot_constraint: value,
          },
          '#withSlotResolutionSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSlotResolutionSetting(value): {
            slot_resolution_setting:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSlotResolutionSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSlotResolutionSettingMixin(value): {
            slot_resolution_setting+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          slot_resolution_setting+:
            {
              '#': { help: '', name: 'slot_resolution_setting' },
              '#withSlotResolutionStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSlotResolutionStrategy(value): {
                slot_resolution_strategy: value,
              },
            },
          '#withWaitAndContinueSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWaitAndContinueSpecification(value): {
            wait_and_continue_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withWaitAndContinueSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWaitAndContinueSpecificationMixin(value): {
            wait_and_continue_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          wait_and_continue_specification+:
            {
              '#': { help: '', name: 'wait_and_continue_specification' },
              '#withActive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withActive(value=true): {
                active: value,
              },
              '#withContinueResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContinueResponse(value): {
                continue_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withContinueResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContinueResponseMixin(value): {
                continue_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              continue_response+:
                {
                  '#': { help: '', name: 'continue_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                },
              '#withStillWaitingResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStillWaitingResponse(value): {
                still_waiting_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withStillWaitingResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStillWaitingResponseMixin(value): {
                still_waiting_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              still_waiting_response+:
                {
                  '#': { help: '', name: 'still_waiting_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withFrequencyInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrequencyInSeconds(value): {
                    frequency_in_seconds: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                  '#withTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTimeoutInSeconds(value): {
                    timeout_in_seconds: value,
                  },
                },
              '#withWaitingResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withWaitingResponse(value): {
                waiting_response:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withWaitingResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withWaitingResponseMixin(value): {
                waiting_response+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              waiting_response+:
                {
                  '#': { help: '', name: 'waiting_response' },
                  '#withAllowInterrupt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withAllowInterrupt(value=true): {
                    allow_interrupt: value,
                  },
                  '#withMessageGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroup(value): {
                    message_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMessageGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMessageGroupMixin(value): {
                    message_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  message_group+:
                    {
                      '#': { help: '', name: 'message_group' },
                      '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessage(value): {
                        message:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMessageMixin(value): {
                        message+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      message+:
                        {
                          '#': { help: '', name: 'message' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                      '#withVariation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariation(value): {
                        variation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVariationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVariationMixin(value): {
                        variation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      variation+:
                        {
                          '#': { help: '', name: 'variation' },
                          '#withCustomPayload': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayload(value): {
                            custom_payload:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCustomPayloadMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCustomPayloadMixin(value): {
                            custom_payload+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          custom_payload+:
                            {
                              '#': { help: '', name: 'custom_payload' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withImageResponseCard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCard(value): {
                            image_response_card:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withImageResponseCardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withImageResponseCardMixin(value): {
                            image_response_card+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          image_response_card+:
                            {
                              '#': { help: '', name: 'image_response_card' },
                              '#withButton': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButton(value): {
                                button:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withButtonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withButtonMixin(value): {
                                button+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              button+:
                                {
                                  '#': { help: '', name: 'button' },
                                  '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withText(value): {
                                    text: value,
                                  },
                                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withValue(value): {
                                    value: value,
                                  },
                                },
                              '#withImageUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withImageUrl(value): {
                                image_url: value,
                              },
                              '#withSubtitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSubtitle(value): {
                                subtitle: value,
                              },
                              '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withTitle(value): {
                                title: value,
                              },
                            },
                          '#withPlainTextMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessage(value): {
                            plain_text_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPlainTextMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPlainTextMessageMixin(value): {
                            plain_text_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          plain_text_message+:
                            {
                              '#': { help: '', name: 'plain_text_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withSsmlMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessage(value): {
                            ssml_message:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSsmlMessageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSsmlMessageMixin(value): {
                            ssml_message+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          ssml_message+:
                            {
                              '#': { help: '', name: 'ssml_message' },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                        },
                    },
                },
            },
        },
    },
  aws_lexv2models_slot_type:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bot_id', type: 'string' }, { default: null, enums: null, name: 'bot_version', type: 'string' }, { default: null, enums: null, name: 'locale_id', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, bot_id, bot_version, locale_id, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withBotId(bot_id)
        + self.withBotVersion(bot_version)
        + self.withLocaleId(locale_id)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_lexv2models_slot_type: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotId(value): {
        bot_id: value,
      },
      '#withBotVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBotVersion(value): {
        bot_version: value,
      },
      '#withCompositeSlotTypeSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCompositeSlotTypeSetting(value): {
        composite_slot_type_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCompositeSlotTypeSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCompositeSlotTypeSettingMixin(value): {
        composite_slot_type_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      composite_slot_type_setting+:
        {
          '#': { help: '', name: 'composite_slot_type_setting' },
          '#withSubSlots': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubSlots(value): {
            sub_slots:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubSlotsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubSlotsMixin(value): {
            sub_slots+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          sub_slots+:
            {
              '#': { help: '', name: 'sub_slots' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withSlotTypeId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSlotTypeId(value): {
                slot_type_id: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withExternalSourceSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalSourceSetting(value): {
        external_source_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExternalSourceSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalSourceSettingMixin(value): {
        external_source_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      external_source_setting+:
        {
          '#': { help: '', name: 'external_source_setting' },
          '#withGrammarSlotTypeSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGrammarSlotTypeSetting(value): {
            grammar_slot_type_setting:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withGrammarSlotTypeSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGrammarSlotTypeSettingMixin(value): {
            grammar_slot_type_setting+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          grammar_slot_type_setting+:
            {
              '#': { help: '', name: 'grammar_slot_type_setting' },
              '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSource(value): {
                source:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceMixin(value): {
                source+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source+:
                {
                  '#': { help: '', name: 'source' },
                  '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKmsKeyArn(value): {
                    kms_key_arn: value,
                  },
                  '#withS3BucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3BucketName(value): {
                    s3_bucket_name: value,
                  },
                  '#withS3ObjectKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3ObjectKey(value): {
                    s3_object_key: value,
                  },
                },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLocaleId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocaleId(value): {
        locale_id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withParentSlotTypeSignature': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParentSlotTypeSignature(value): {
        parent_slot_type_signature: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSlotTypeId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSlotTypeId(value): {
        slot_type_id: value,
      },
      '#withSlotTypeValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSlotTypeValues(value): {
        slot_type_values:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSlotTypeValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSlotTypeValuesMixin(value): {
        slot_type_values+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      slot_type_values+:
        {
          '#': { help: '', name: 'slot_type_values' },
          '#withSampleValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSampleValue(value): {
            sample_value:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSampleValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSampleValueMixin(value): {
            sample_value+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          sample_value+:
            {
              '#': { help: '', name: 'sample_value' },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withSynonyms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSynonyms(value): {
            synonyms:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSynonymsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSynonymsMixin(value): {
            synonyms+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          synonyms+:
            {
              '#': { help: '', name: 'synonyms' },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
        },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withValueSelectionSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValueSelectionSetting(value): {
        value_selection_setting:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValueSelectionSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValueSelectionSettingMixin(value): {
        value_selection_setting+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      value_selection_setting+:
        {
          '#': { help: '', name: 'value_selection_setting' },
          '#withAdvancedRecognitionSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdvancedRecognitionSetting(value): {
            advanced_recognition_setting:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAdvancedRecognitionSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdvancedRecognitionSettingMixin(value): {
            advanced_recognition_setting+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          advanced_recognition_setting+:
            {
              '#': { help: '', name: 'advanced_recognition_setting' },
              '#withAudioRecognitionStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAudioRecognitionStrategy(value): {
                audio_recognition_strategy: value,
              },
            },
          '#withRegexFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRegexFilter(value): {
            regex_filter:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRegexFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRegexFilterMixin(value): {
            regex_filter+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          regex_filter+:
            {
              '#': { help: '', name: 'regex_filter' },
              '#withPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPattern(value): {
                pattern: value,
              },
            },
          '#withResolutionStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withResolutionStrategy(value): {
            resolution_strategy: value,
          },
        },
    },
}
