// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'codedeploy',
  },
  aws_codedeploy_app:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_codedeploy_app: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withApplicationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withApplicationId(value): {
        application_id: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withComputePlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComputePlatform(value): {
        compute_platform: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withGithubAccountName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withGithubAccountName(value): {
        github_account_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLinkedToGithub': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withLinkedToGithub(value=true): {
        linked_to_github: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_codedeploy_deployment_config:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'deployment_config_name', type: 'string' }], help: '' } },
      new(tf_resource_key, deployment_config_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDeploymentConfigName(deployment_config_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_codedeploy_deployment_config: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withComputePlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComputePlatform(value): {
        compute_platform: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeploymentConfigId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentConfigId(value): {
        deployment_config_id: value,
      },
      '#withDeploymentConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentConfigName(value): {
        deployment_config_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMinimumHealthyHosts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMinimumHealthyHosts(value): {
        minimum_healthy_hosts: value,
      },
      '#withMinimumHealthyHostsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMinimumHealthyHostsMixin(value): {
        minimum_healthy_hosts+: value,
      },
      minimum_healthy_hosts+:
        {
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            minimum_healthy_hosts+: {
              type: value,
            },
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withValue(value): {
            minimum_healthy_hosts+: {
              value: value,
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTrafficRoutingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTrafficRoutingConfig(value): {
        traffic_routing_config: value,
      },
      '#withTrafficRoutingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTrafficRoutingConfigMixin(value): {
        traffic_routing_config+: value,
      },
      traffic_routing_config+:
        {
          '#withTimeBasedCanary': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTimeBasedCanary(value): {
            traffic_routing_config+: {
              time_based_canary: value,
            },
          },
          '#withTimeBasedCanaryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTimeBasedCanaryMixin(value): {
            traffic_routing_config+: {
              time_based_canary+: value,
            },
          },
          time_based_canary+:
            {
              '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInterval(value): {
                traffic_routing_config+: {
                  time_based_canary+: {
                    interval: value,
                  },
                },
              },
              '#withPercentage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withPercentage(value): {
                traffic_routing_config+: {
                  time_based_canary+: {
                    percentage: value,
                  },
                },
              },
            },
          '#withTimeBasedLinear': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTimeBasedLinear(value): {
            traffic_routing_config+: {
              time_based_linear: value,
            },
          },
          '#withTimeBasedLinearMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTimeBasedLinearMixin(value): {
            traffic_routing_config+: {
              time_based_linear+: value,
            },
          },
          time_based_linear+:
            {
              '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInterval(value): {
                traffic_routing_config+: {
                  time_based_linear+: {
                    interval: value,
                  },
                },
              },
              '#withPercentage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withPercentage(value): {
                traffic_routing_config+: {
                  time_based_linear+: {
                    percentage: value,
                  },
                },
              },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            traffic_routing_config+: {
              type: value,
            },
          },
        },
      '#withZonalConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withZonalConfig(value): {
        zonal_config: value,
      },
      '#withZonalConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withZonalConfigMixin(value): {
        zonal_config+: value,
      },
      zonal_config+:
        {
          '#withFirstZoneMonitorDurationInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withFirstZoneMonitorDurationInSeconds(value): {
            zonal_config+: {
              first_zone_monitor_duration_in_seconds: value,
            },
          },
          '#withMinimumHealthyHostsPerZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMinimumHealthyHostsPerZone(value): {
            zonal_config+: {
              minimum_healthy_hosts_per_zone: value,
            },
          },
          '#withMinimumHealthyHostsPerZoneMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMinimumHealthyHostsPerZoneMixin(value): {
            zonal_config+: {
              minimum_healthy_hosts_per_zone+: value,
            },
          },
          minimum_healthy_hosts_per_zone+:
            {
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                zonal_config+: {
                  minimum_healthy_hosts_per_zone+: {
                    type: value,
                  },
                },
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withValue(value): {
                zonal_config+: {
                  minimum_healthy_hosts_per_zone+: {
                    value: value,
                  },
                },
              },
            },
          '#withMonitorDurationInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMonitorDurationInSeconds(value): {
            zonal_config+: {
              monitor_duration_in_seconds: value,
            },
          },
        },
    },
  aws_codedeploy_deployment_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'app_name', type: 'string' }, { default: null, enums: null, name: 'deployment_group_name', type: 'string' }, { default: null, enums: null, name: 'service_role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, app_name, deployment_group_name, service_role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withAppName(app_name)
        + self.withDeploymentGroupName(deployment_group_name)
        + self.withServiceRoleArn(service_role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_codedeploy_deployment_group: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAlarmConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAlarmConfiguration(value): {
        alarm_configuration: value,
      },
      '#withAlarmConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAlarmConfigurationMixin(value): {
        alarm_configuration+: value,
      },
      alarm_configuration+:
        {
          '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAlarms(value): {
            alarm_configuration+: {
              alarms:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAlarmsMixin(value): {
            alarm_configuration+: {
              alarms+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            alarm_configuration+: {
              enabled: value,
            },
          },
          '#withIgnorePollAlarmFailure': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIgnorePollAlarmFailure(value=true): {
            alarm_configuration+: {
              ignore_poll_alarm_failure: value,
            },
          },
        },
      '#withAppName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppName(value): {
        app_name: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoRollbackConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAutoRollbackConfiguration(value): {
        auto_rollback_configuration: value,
      },
      '#withAutoRollbackConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAutoRollbackConfigurationMixin(value): {
        auto_rollback_configuration+: value,
      },
      auto_rollback_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            auto_rollback_configuration+: {
              enabled: value,
            },
          },
          '#withEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEvents(value): {
            auto_rollback_configuration+: {
              events:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEventsMixin(value): {
            auto_rollback_configuration+: {
              events+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withAutoscalingGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAutoscalingGroups(value): {
        autoscaling_groups:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAutoscalingGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAutoscalingGroupsMixin(value): {
        autoscaling_groups+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBlueGreenDeploymentConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withBlueGreenDeploymentConfig(value): {
        blue_green_deployment_config: value,
      },
      '#withBlueGreenDeploymentConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withBlueGreenDeploymentConfigMixin(value): {
        blue_green_deployment_config+: value,
      },
      blue_green_deployment_config+:
        {
          '#withDeploymentReadyOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDeploymentReadyOption(value): {
            blue_green_deployment_config+: {
              deployment_ready_option: value,
            },
          },
          '#withDeploymentReadyOptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDeploymentReadyOptionMixin(value): {
            blue_green_deployment_config+: {
              deployment_ready_option+: value,
            },
          },
          deployment_ready_option+:
            {
              '#withActionOnTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withActionOnTimeout(value): {
                blue_green_deployment_config+: {
                  deployment_ready_option+: {
                    action_on_timeout: value,
                  },
                },
              },
              '#withWaitTimeInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withWaitTimeInMinutes(value): {
                blue_green_deployment_config+: {
                  deployment_ready_option+: {
                    wait_time_in_minutes: value,
                  },
                },
              },
            },
          '#withGreenFleetProvisioningOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withGreenFleetProvisioningOption(value): {
            blue_green_deployment_config+: {
              green_fleet_provisioning_option: value,
            },
          },
          '#withGreenFleetProvisioningOptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withGreenFleetProvisioningOptionMixin(value): {
            blue_green_deployment_config+: {
              green_fleet_provisioning_option+: value,
            },
          },
          green_fleet_provisioning_option+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAction(value): {
                blue_green_deployment_config+: {
                  green_fleet_provisioning_option+: {
                    action: value,
                  },
                },
              },
            },
          '#withTerminateBlueInstancesOnDeploymentSuccess': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTerminateBlueInstancesOnDeploymentSuccess(value): {
            blue_green_deployment_config+: {
              terminate_blue_instances_on_deployment_success: value,
            },
          },
          '#withTerminateBlueInstancesOnDeploymentSuccessMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTerminateBlueInstancesOnDeploymentSuccessMixin(value): {
            blue_green_deployment_config+: {
              terminate_blue_instances_on_deployment_success+: value,
            },
          },
          terminate_blue_instances_on_deployment_success+:
            {
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAction(value): {
                blue_green_deployment_config+: {
                  terminate_blue_instances_on_deployment_success+: {
                    action: value,
                  },
                },
              },
              '#withTerminationWaitTimeInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withTerminationWaitTimeInMinutes(value): {
                blue_green_deployment_config+: {
                  terminate_blue_instances_on_deployment_success+: {
                    termination_wait_time_in_minutes: value,
                  },
                },
              },
            },
        },
      '#withComputePlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComputePlatform(value): {
        compute_platform: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeploymentConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentConfigName(value): {
        deployment_config_name: value,
      },
      '#withDeploymentGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentGroupId(value): {
        deployment_group_id: value,
      },
      '#withDeploymentGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentGroupName(value): {
        deployment_group_name: value,
      },
      '#withDeploymentStyle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDeploymentStyle(value): {
        deployment_style: value,
      },
      '#withDeploymentStyleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDeploymentStyleMixin(value): {
        deployment_style+: value,
      },
      deployment_style+:
        {
          '#withDeploymentOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeploymentOption(value): {
            deployment_style+: {
              deployment_option: value,
            },
          },
          '#withDeploymentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeploymentType(value): {
            deployment_style+: {
              deployment_type: value,
            },
          },
        },
      '#withEc2TagFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEc2TagFilter(value): {
        ec2_tag_filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEc2TagFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEc2TagFilterMixin(value): {
        ec2_tag_filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ec2_tag_filter+:
        {
          '#': { help: '', name: 'ec2_tag_filter' },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withEc2TagSet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEc2TagSet(value): {
        ec2_tag_set:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEc2TagSetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEc2TagSetMixin(value): {
        ec2_tag_set+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ec2_tag_set+:
        {
          '#': { help: '', name: 'ec2_tag_set' },
          '#withEc2TagFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEc2TagFilter(value): {
            ec2_tag_filter:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEc2TagFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEc2TagFilterMixin(value): {
            ec2_tag_filter+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          ec2_tag_filter+:
            {
              '#': { help: '', name: 'ec2_tag_filter' },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                type: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
        },
      '#withEcsService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEcsService(value): {
        ecs_service: value,
      },
      '#withEcsServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEcsServiceMixin(value): {
        ecs_service+: value,
      },
      ecs_service+:
        {
          '#withClusterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClusterName(value): {
            ecs_service+: {
              cluster_name: value,
            },
          },
          '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceName(value): {
            ecs_service+: {
              service_name: value,
            },
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBalancerInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBalancerInfo(value): {
        load_balancer_info: value,
      },
      '#withLoadBalancerInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBalancerInfoMixin(value): {
        load_balancer_info+: value,
      },
      load_balancer_info+:
        {
          '#withElbInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElbInfo(value): {
            load_balancer_info+: {
              elb_info:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withElbInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElbInfoMixin(value): {
            load_balancer_info+: {
              elb_info+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          elb_info+:
            {
              '#': { help: '', name: 'elb_info' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTargetGroupInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTargetGroupInfo(value): {
            load_balancer_info+: {
              target_group_info:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withTargetGroupInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTargetGroupInfoMixin(value): {
            load_balancer_info+: {
              target_group_info+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          target_group_info+:
            {
              '#': { help: '', name: 'target_group_info' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTargetGroupPairInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTargetGroupPairInfo(value): {
            load_balancer_info+: {
              target_group_pair_info: value,
            },
          },
          '#withTargetGroupPairInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTargetGroupPairInfoMixin(value): {
            load_balancer_info+: {
              target_group_pair_info+: value,
            },
          },
          target_group_pair_info+:
            {
              '#withProdTrafficRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withProdTrafficRoute(value): {
                load_balancer_info+: {
                  target_group_pair_info+: {
                    prod_traffic_route: value,
                  },
                },
              },
              '#withProdTrafficRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withProdTrafficRouteMixin(value): {
                load_balancer_info+: {
                  target_group_pair_info+: {
                    prod_traffic_route+: value,
                  },
                },
              },
              prod_traffic_route+:
                {
                  '#withListenerArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withListenerArns(value): {
                    load_balancer_info+: {
                      target_group_pair_info+: {
                        prod_traffic_route+: {
                          listener_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withListenerArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withListenerArnsMixin(value): {
                    load_balancer_info+: {
                      target_group_pair_info+: {
                        prod_traffic_route+: {
                          listener_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withTargetGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTargetGroup(value): {
                load_balancer_info+: {
                  target_group_pair_info+: {
                    target_group:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withTargetGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTargetGroupMixin(value): {
                load_balancer_info+: {
                  target_group_pair_info+: {
                    target_group+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              target_group+:
                {
                  '#': { help: '', name: 'target_group' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                },
              '#withTestTrafficRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTestTrafficRoute(value): {
                load_balancer_info+: {
                  target_group_pair_info+: {
                    test_traffic_route: value,
                  },
                },
              },
              '#withTestTrafficRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTestTrafficRouteMixin(value): {
                load_balancer_info+: {
                  target_group_pair_info+: {
                    test_traffic_route+: value,
                  },
                },
              },
              test_traffic_route+:
                {
                  '#withListenerArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withListenerArns(value): {
                    load_balancer_info+: {
                      target_group_pair_info+: {
                        test_traffic_route+: {
                          listener_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withListenerArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withListenerArnsMixin(value): {
                    load_balancer_info+: {
                      target_group_pair_info+: {
                        test_traffic_route+: {
                          listener_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withOnPremisesInstanceTagFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOnPremisesInstanceTagFilter(value): {
        on_premises_instance_tag_filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOnPremisesInstanceTagFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOnPremisesInstanceTagFilterMixin(value): {
        on_premises_instance_tag_filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      on_premises_instance_tag_filter+:
        {
          '#': { help: '', name: 'on_premises_instance_tag_filter' },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withOutdatedInstancesStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOutdatedInstancesStrategy(value): {
        outdated_instances_strategy: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServiceRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServiceRoleArn(value): {
        service_role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTerminationHookEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withTerminationHookEnabled(value=true): {
        termination_hook_enabled: value,
      },
      '#withTriggerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTriggerConfiguration(value): {
        trigger_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTriggerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTriggerConfigurationMixin(value): {
        trigger_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      trigger_configuration+:
        {
          '#': { help: '', name: 'trigger_configuration' },
          '#withTriggerEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTriggerEvents(value): {
            trigger_events:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTriggerEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTriggerEventsMixin(value): {
            trigger_events+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTriggerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTriggerName(value): {
            trigger_name: value,
          },
          '#withTriggerTargetArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTriggerTargetArn(value): {
            trigger_target_arn: value,
          },
        },
    },
}
