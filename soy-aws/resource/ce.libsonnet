// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'ce',
  },
  aws_ce_anomaly_monitor:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'monitor_type', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, monitor_type, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withMonitorType(monitor_type)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_ce_anomaly_monitor: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMonitorDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMonitorDimension(value): {
        monitor_dimension: value,
      },
      '#withMonitorSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMonitorSpecification(value): {
        monitor_specification: value,
      },
      '#withMonitorType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMonitorType(value): {
        monitor_type: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_ce_anomaly_subscription:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'frequency', type: 'string' }, { default: null, enums: null, name: 'monitor_arn_list', type: 'array' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'subscriber', type: 'array' }], help: '' } },
      new(tf_resource_key, frequency, monitor_arn_list, name, subscriber):
        self.withTfResourceKey(tf_resource_key)
        + self.withFrequency(frequency)
        + self.withMonitorArnList(monitor_arn_list)
        + self.withName(name)
        + self.withSubscriber(subscriber),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_ce_anomaly_subscription: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAccountId(value): {
        account_id: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFrequency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFrequency(value): {
        frequency: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMonitorArnList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMonitorArnList(value): {
        monitor_arn_list:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMonitorArnListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMonitorArnListMixin(value): {
        monitor_arn_list+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubscriber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubscriber(value): {
        subscriber:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubscriberMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubscriberMixin(value): {
        subscriber+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      subscriber+:
        {
          '#': { help: '', name: 'subscriber' },
          '#withAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress(value): {
            address: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withThresholdExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withThresholdExpression(value): {
        threshold_expression: value,
      },
      '#withThresholdExpressionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withThresholdExpressionMixin(value): {
        threshold_expression+: value,
      },
      threshold_expression+:
        {
          '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAnd(value): {
            threshold_expression+: {
              and:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAndMixin(value): {
            threshold_expression+: {
              and+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          and+:
            {
              '#': { help: '', name: 'and' },
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategory(value): {
                cost_category: value,
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategoryMixin(value): {
                cost_category+: value,
              },
              cost_category+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    cost_category+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    cost_category+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    cost_category+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    cost_category+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    cost_category+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimension(value): {
                dimension: value,
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimensionMixin(value): {
                dimension+: value,
              },
              dimension+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    dimension+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    dimension+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    dimension+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    dimension+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    dimension+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                tags: value,
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                tags+: value,
              },
              tags+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    tags+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    tags+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    tags+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    tags+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    tags+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
            },
          '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCostCategory(value): {
            threshold_expression+: {
              cost_category: value,
            },
          },
          '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCostCategoryMixin(value): {
            threshold_expression+: {
              cost_category+: value,
            },
          },
          cost_category+:
            {
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                threshold_expression+: {
                  cost_category+: {
                    key: value,
                  },
                },
              },
              '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptions(value): {
                threshold_expression+: {
                  cost_category+: {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptionsMixin(value): {
                threshold_expression+: {
                  cost_category+: {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                threshold_expression+: {
                  cost_category+: {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                threshold_expression+: {
                  cost_category+: {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDimension(value): {
            threshold_expression+: {
              dimension: value,
            },
          },
          '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDimensionMixin(value): {
            threshold_expression+: {
              dimension+: value,
            },
          },
          dimension+:
            {
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                threshold_expression+: {
                  dimension+: {
                    key: value,
                  },
                },
              },
              '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptions(value): {
                threshold_expression+: {
                  dimension+: {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptionsMixin(value): {
                threshold_expression+: {
                  dimension+: {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                threshold_expression+: {
                  dimension+: {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                threshold_expression+: {
                  dimension+: {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withNot(value): {
            threshold_expression+: {
              not: value,
            },
          },
          '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withNotMixin(value): {
            threshold_expression+: {
              not+: value,
            },
          },
          not+:
            {
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategory(value): {
                threshold_expression+: {
                  not+: {
                    cost_category: value,
                  },
                },
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategoryMixin(value): {
                threshold_expression+: {
                  not+: {
                    cost_category+: value,
                  },
                },
              },
              cost_category+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    threshold_expression+: {
                      not+: {
                        cost_category+: {
                          key: value,
                        },
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    threshold_expression+: {
                      not+: {
                        cost_category+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    threshold_expression+: {
                      not+: {
                        cost_category+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    threshold_expression+: {
                      not+: {
                        cost_category+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    threshold_expression+: {
                      not+: {
                        cost_category+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimension(value): {
                threshold_expression+: {
                  not+: {
                    dimension: value,
                  },
                },
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimensionMixin(value): {
                threshold_expression+: {
                  not+: {
                    dimension+: value,
                  },
                },
              },
              dimension+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    threshold_expression+: {
                      not+: {
                        dimension+: {
                          key: value,
                        },
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    threshold_expression+: {
                      not+: {
                        dimension+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    threshold_expression+: {
                      not+: {
                        dimension+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    threshold_expression+: {
                      not+: {
                        dimension+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    threshold_expression+: {
                      not+: {
                        dimension+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                threshold_expression+: {
                  not+: {
                    tags: value,
                  },
                },
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                threshold_expression+: {
                  not+: {
                    tags+: value,
                  },
                },
              },
              tags+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    threshold_expression+: {
                      not+: {
                        tags+: {
                          key: value,
                        },
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    threshold_expression+: {
                      not+: {
                        tags+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    threshold_expression+: {
                      not+: {
                        tags+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    threshold_expression+: {
                      not+: {
                        tags+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    threshold_expression+: {
                      not+: {
                        tags+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
            },
          '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOr(value): {
            threshold_expression+: {
              or:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOrMixin(value): {
            threshold_expression+: {
              or+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          or+:
            {
              '#': { help: '', name: 'or' },
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategory(value): {
                cost_category: value,
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategoryMixin(value): {
                cost_category+: value,
              },
              cost_category+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    cost_category+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    cost_category+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    cost_category+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    cost_category+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    cost_category+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimension(value): {
                dimension: value,
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimensionMixin(value): {
                dimension+: value,
              },
              dimension+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    dimension+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    dimension+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    dimension+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    dimension+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    dimension+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                tags: value,
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                tags+: value,
              },
              tags+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    tags+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    tags+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    tags+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    tags+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    tags+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
            },
          '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTags(value): {
            threshold_expression+: {
              tags: value,
            },
          },
          '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTagsMixin(value): {
            threshold_expression+: {
              tags+: value,
            },
          },
          tags+:
            {
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                threshold_expression+: {
                  tags+: {
                    key: value,
                  },
                },
              },
              '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptions(value): {
                threshold_expression+: {
                  tags+: {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptionsMixin(value): {
                threshold_expression+: {
                  tags+: {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                threshold_expression+: {
                  tags+: {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                threshold_expression+: {
                  tags+: {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
        },
    },
  aws_ce_cost_allocation_tag:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'status', type: 'string' }, { default: null, enums: null, name: 'tag_key', type: 'string' }], help: '' } },
      new(tf_resource_key, status, tag_key):
        self.withTfResourceKey(tf_resource_key)
        + self.withStatus(status)
        + self.withTagKey(tag_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_ce_cost_allocation_tag: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withTagKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTagKey(value): {
        tag_key: value,
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        type: value,
      },
    },
  aws_ce_cost_category:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'rule', type: 'array' }, { default: null, enums: null, name: 'rule_version', type: 'string' }], help: '' } },
      new(tf_resource_key, name, rule, rule_version):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withRule(rule)
        + self.withRuleVersion(rule_version),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_ce_cost_category: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultValue(value): {
        default_value: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEffectiveEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEffectiveEnd(value): {
        effective_end: value,
      },
      '#withEffectiveStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEffectiveStart(value): {
        effective_start: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRule(value): {
        rule:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRuleMixin(value): {
        rule+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      rule+:
        {
          '#': { help: '', name: 'rule' },
          '#withInheritedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withInheritedValue(value): {
            inherited_value: value,
          },
          '#withInheritedValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withInheritedValueMixin(value): {
            inherited_value+: value,
          },
          inherited_value+:
            {
              '#withDimensionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDimensionKey(value): {
                inherited_value+: {
                  dimension_key: value,
                },
              },
              '#withDimensionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDimensionName(value): {
                inherited_value+: {
                  dimension_name: value,
                },
              },
            },
          '#withRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRule(value): {
            rule: value,
          },
          '#withRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRuleMixin(value): {
            rule+: value,
          },
          rule+:
            {
              '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAnd(value): {
                rule+: {
                  and:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAndMixin(value): {
                rule+: {
                  and+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              and+:
                {
                  '#': { help: '', name: 'and' },
                  '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAnd(value): {
                    and:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAndMixin(value): {
                    and+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  and+:
                    {
                      '#': { help: '', name: 'and' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category: value,
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+: value,
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            cost_category+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            cost_category+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            cost_category+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            cost_category+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            cost_category+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        dimension: value,
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+: value,
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            dimension+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            dimension+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            dimension+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            dimension+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            dimension+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        tags: value,
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+: value,
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            tags+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            tags+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            tags+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            tags+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            tags+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                    },
                  '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCostCategory(value): {
                    cost_category: value,
                  },
                  '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCostCategoryMixin(value): {
                    cost_category+: value,
                  },
                  cost_category+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        cost_category+: {
                          key: value,
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        cost_category+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        cost_category+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        cost_category+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        cost_category+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDimension(value): {
                    dimension: value,
                  },
                  '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDimensionMixin(value): {
                    dimension+: value,
                  },
                  dimension+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        dimension+: {
                          key: value,
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        dimension+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        dimension+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        dimension+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        dimension+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withNot(value): {
                    not: value,
                  },
                  '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withNotMixin(value): {
                    not+: value,
                  },
                  not+:
                    {
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        not+: {
                          cost_category: value,
                        },
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        not+: {
                          cost_category+: value,
                        },
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            not+: {
                              cost_category+: {
                                key: value,
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            not+: {
                              cost_category+: {
                                match_options:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            not+: {
                              cost_category+: {
                                match_options+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            not+: {
                              cost_category+: {
                                values:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            not+: {
                              cost_category+: {
                                values+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        not+: {
                          dimension: value,
                        },
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        not+: {
                          dimension+: value,
                        },
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            not+: {
                              dimension+: {
                                key: value,
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            not+: {
                              dimension+: {
                                match_options:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            not+: {
                              dimension+: {
                                match_options+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            not+: {
                              dimension+: {
                                values:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            not+: {
                              dimension+: {
                                values+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        not+: {
                          tags: value,
                        },
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        not+: {
                          tags+: value,
                        },
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            not+: {
                              tags+: {
                                key: value,
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            not+: {
                              tags+: {
                                match_options:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            not+: {
                              tags+: {
                                match_options+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            not+: {
                              tags+: {
                                values:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            not+: {
                              tags+: {
                                values+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                    },
                  '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOr(value): {
                    or:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOrMixin(value): {
                    or+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  or+:
                    {
                      '#': { help: '', name: 'or' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category: value,
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+: value,
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            cost_category+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            cost_category+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            cost_category+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            cost_category+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            cost_category+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        dimension: value,
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+: value,
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            dimension+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            dimension+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            dimension+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            dimension+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            dimension+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        tags: value,
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+: value,
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            tags+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            tags+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            tags+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            tags+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            tags+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                    },
                  '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTags(value): {
                    tags: value,
                  },
                  '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTagsMixin(value): {
                    tags+: value,
                  },
                  tags+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        tags+: {
                          key: value,
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        tags+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        tags+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        tags+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        tags+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                },
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategory(value): {
                rule+: {
                  cost_category: value,
                },
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategoryMixin(value): {
                rule+: {
                  cost_category+: value,
                },
              },
              cost_category+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    rule+: {
                      cost_category+: {
                        key: value,
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    rule+: {
                      cost_category+: {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    rule+: {
                      cost_category+: {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    rule+: {
                      cost_category+: {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    rule+: {
                      cost_category+: {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimension(value): {
                rule+: {
                  dimension: value,
                },
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimensionMixin(value): {
                rule+: {
                  dimension+: value,
                },
              },
              dimension+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    rule+: {
                      dimension+: {
                        key: value,
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    rule+: {
                      dimension+: {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    rule+: {
                      dimension+: {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    rule+: {
                      dimension+: {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    rule+: {
                      dimension+: {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                },
              '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withNot(value): {
                rule+: {
                  not: value,
                },
              },
              '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withNotMixin(value): {
                rule+: {
                  not+: value,
                },
              },
              not+:
                {
                  '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAnd(value): {
                    rule+: {
                      not+: {
                        and:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAndMixin(value): {
                    rule+: {
                      not+: {
                        and+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  and+:
                    {
                      '#': { help: '', name: 'and' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category: value,
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+: value,
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            cost_category+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            cost_category+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            cost_category+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            cost_category+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            cost_category+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        dimension: value,
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+: value,
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            dimension+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            dimension+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            dimension+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            dimension+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            dimension+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        tags: value,
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+: value,
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            tags+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            tags+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            tags+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            tags+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            tags+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                    },
                  '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCostCategory(value): {
                    rule+: {
                      not+: {
                        cost_category: value,
                      },
                    },
                  },
                  '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCostCategoryMixin(value): {
                    rule+: {
                      not+: {
                        cost_category+: value,
                      },
                    },
                  },
                  cost_category+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        rule+: {
                          not+: {
                            cost_category+: {
                              key: value,
                            },
                          },
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        rule+: {
                          not+: {
                            cost_category+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        rule+: {
                          not+: {
                            cost_category+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        rule+: {
                          not+: {
                            cost_category+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        rule+: {
                          not+: {
                            cost_category+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                    },
                  '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDimension(value): {
                    rule+: {
                      not+: {
                        dimension: value,
                      },
                    },
                  },
                  '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDimensionMixin(value): {
                    rule+: {
                      not+: {
                        dimension+: value,
                      },
                    },
                  },
                  dimension+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        rule+: {
                          not+: {
                            dimension+: {
                              key: value,
                            },
                          },
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        rule+: {
                          not+: {
                            dimension+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        rule+: {
                          not+: {
                            dimension+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        rule+: {
                          not+: {
                            dimension+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        rule+: {
                          not+: {
                            dimension+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                    },
                  '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withNot(value): {
                    rule+: {
                      not: value,
                    },
                  },
                  '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withNotMixin(value): {
                    rule+: {
                      not+: value,
                    },
                  },
                  not+:
                    {
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        rule+: {
                          not+: {
                            not+: {
                              cost_category: value,
                            },
                          },
                        },
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        rule+: {
                          not+: {
                            not+: {
                              cost_category+: value,
                            },
                          },
                        },
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  cost_category+: {
                                    key: value,
                                  },
                                },
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  cost_category+: {
                                    match_options:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  cost_category+: {
                                    match_options+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  cost_category+: {
                                    values:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  cost_category+: {
                                    values+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        rule+: {
                          not+: {
                            not+: {
                              dimension: value,
                            },
                          },
                        },
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        rule+: {
                          not+: {
                            not+: {
                              dimension+: value,
                            },
                          },
                        },
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  dimension+: {
                                    key: value,
                                  },
                                },
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  dimension+: {
                                    match_options:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  dimension+: {
                                    match_options+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  dimension+: {
                                    values:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  dimension+: {
                                    values+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        rule+: {
                          not+: {
                            not+: {
                              tags: value,
                            },
                          },
                        },
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        rule+: {
                          not+: {
                            not+: {
                              tags+: value,
                            },
                          },
                        },
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  tags+: {
                                    key: value,
                                  },
                                },
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  tags+: {
                                    match_options:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  tags+: {
                                    match_options+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  tags+: {
                                    values:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            rule+: {
                              not+: {
                                not+: {
                                  tags+: {
                                    values+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOr(value): {
                    rule+: {
                      not+: {
                        or:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOrMixin(value): {
                    rule+: {
                      not+: {
                        or+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  or+:
                    {
                      '#': { help: '', name: 'or' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category: value,
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+: value,
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            cost_category+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            cost_category+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            cost_category+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            cost_category+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            cost_category+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        dimension: value,
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+: value,
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            dimension+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            dimension+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            dimension+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            dimension+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            dimension+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        tags: value,
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+: value,
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            tags+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            tags+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            tags+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            tags+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            tags+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                    },
                  '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTags(value): {
                    rule+: {
                      not+: {
                        tags: value,
                      },
                    },
                  },
                  '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTagsMixin(value): {
                    rule+: {
                      not+: {
                        tags+: value,
                      },
                    },
                  },
                  tags+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        rule+: {
                          not+: {
                            tags+: {
                              key: value,
                            },
                          },
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        rule+: {
                          not+: {
                            tags+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        rule+: {
                          not+: {
                            tags+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        rule+: {
                          not+: {
                            tags+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        rule+: {
                          not+: {
                            tags+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      },
                    },
                },
              '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOr(value): {
                rule+: {
                  or:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOrMixin(value): {
                rule+: {
                  or+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              or+:
                {
                  '#': { help: '', name: 'or' },
                  '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAnd(value): {
                    and:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAndMixin(value): {
                    and+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  and+:
                    {
                      '#': { help: '', name: 'and' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category: value,
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+: value,
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            cost_category+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            cost_category+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            cost_category+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            cost_category+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            cost_category+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        dimension: value,
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+: value,
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            dimension+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            dimension+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            dimension+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            dimension+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            dimension+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        tags: value,
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+: value,
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            tags+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            tags+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            tags+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            tags+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            tags+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                    },
                  '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCostCategory(value): {
                    cost_category: value,
                  },
                  '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCostCategoryMixin(value): {
                    cost_category+: value,
                  },
                  cost_category+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        cost_category+: {
                          key: value,
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        cost_category+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        cost_category+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        cost_category+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        cost_category+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDimension(value): {
                    dimension: value,
                  },
                  '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDimensionMixin(value): {
                    dimension+: value,
                  },
                  dimension+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        dimension+: {
                          key: value,
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        dimension+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        dimension+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        dimension+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        dimension+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withNot(value): {
                    not: value,
                  },
                  '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withNotMixin(value): {
                    not+: value,
                  },
                  not+:
                    {
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        not+: {
                          cost_category: value,
                        },
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        not+: {
                          cost_category+: value,
                        },
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            not+: {
                              cost_category+: {
                                key: value,
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            not+: {
                              cost_category+: {
                                match_options:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            not+: {
                              cost_category+: {
                                match_options+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            not+: {
                              cost_category+: {
                                values:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            not+: {
                              cost_category+: {
                                values+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        not+: {
                          dimension: value,
                        },
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        not+: {
                          dimension+: value,
                        },
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            not+: {
                              dimension+: {
                                key: value,
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            not+: {
                              dimension+: {
                                match_options:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            not+: {
                              dimension+: {
                                match_options+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            not+: {
                              dimension+: {
                                values:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            not+: {
                              dimension+: {
                                values+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        not+: {
                          tags: value,
                        },
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        not+: {
                          tags+: value,
                        },
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            not+: {
                              tags+: {
                                key: value,
                              },
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            not+: {
                              tags+: {
                                match_options:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            not+: {
                              tags+: {
                                match_options+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            not+: {
                              tags+: {
                                values:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            not+: {
                              tags+: {
                                values+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                          },
                        },
                    },
                  '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOr(value): {
                    or:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOrMixin(value): {
                    or+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  or+:
                    {
                      '#': { help: '', name: 'or' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category: value,
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+: value,
                      },
                      cost_category+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            cost_category+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            cost_category+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            cost_category+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            cost_category+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            cost_category+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimension(value): {
                        dimension: value,
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+: value,
                      },
                      dimension+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            dimension+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            dimension+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            dimension+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            dimension+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            dimension+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTags(value): {
                        tags: value,
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+: value,
                      },
                      tags+:
                        {
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            tags+: {
                              key: value,
                            },
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            tags+: {
                              match_options:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            tags+: {
                              match_options+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            tags+: {
                              values:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            tags+: {
                              values+:
                                (if std.isArray(value)
                                 then value
                                 else [value]),
                            },
                          },
                        },
                    },
                  '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTags(value): {
                    tags: value,
                  },
                  '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withTagsMixin(value): {
                    tags+: value,
                  },
                  tags+:
                    {
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        tags+: {
                          key: value,
                        },
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        tags+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        tags+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        tags+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        tags+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                rule+: {
                  tags: value,
                },
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                rule+: {
                  tags+: value,
                },
              },
              tags+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    rule+: {
                      tags+: {
                        key: value,
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    rule+: {
                      tags+: {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    rule+: {
                      tags+: {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    rule+: {
                      tags+: {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    rule+: {
                      tags+: {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  },
                },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withRuleVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRuleVersion(value): {
        rule_version: value,
      },
      '#withSplitChargeRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSplitChargeRule(value): {
        split_charge_rule:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSplitChargeRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSplitChargeRuleMixin(value): {
        split_charge_rule+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      split_charge_rule+:
        {
          '#': { help: '', name: 'split_charge_rule' },
          '#withMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMethod(value): {
            method: value,
          },
          '#withParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withParameter(value): {
            parameter:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withParameterMixin(value): {
            parameter+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          parameter+:
            {
              '#': { help: '', name: 'parameter' },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                type: value,
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                values:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                values+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSource(value): {
            source: value,
          },
          '#withTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTargets(value): {
            targets:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTargetsMixin(value): {
            targets+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
}
