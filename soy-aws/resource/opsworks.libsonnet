// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'opsworks',
  },
  aws_opsworks_application:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }, { default: null, enums: null, name: 'type', type: 'string' }], help: '' } },
      new(tf_resource_key, name, stack_id, type):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withStackId(stack_id)
        + self.withType(type),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_application+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAppSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAppSource(value): {
        app_source:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAppSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAppSourceMixin(value): {
        app_source+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      app_source+:
        {
          '#': { help: '', name: 'app_source' },
          '#withPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPassword(value): {
            password: value,
          },
          '#withRevision': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRevision(value): {
            revision: value,
          },
          '#withSshKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSshKey(value): {
            ssh_key: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUrl(value): {
            url: value,
          },
          '#withUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUsername(value): {
            username: value,
          },
        },
      '#withAutoBundleOnDeploy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAutoBundleOnDeploy(value): {
        auto_bundle_on_deploy: value,
      },
      '#withAwsFlowRubySettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAwsFlowRubySettings(value): {
        aws_flow_ruby_settings: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDataSourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDataSourceArn(value): {
        data_source_arn: value,
      },
      '#withDataSourceDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDataSourceDatabaseName(value): {
        data_source_database_name: value,
      },
      '#withDataSourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDataSourceType(value): {
        data_source_type: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDocumentRoot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDocumentRoot(value): {
        document_root: value,
      },
      '#withDomains': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDomains(value): {
        domains:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDomainsMixin(value): {
        domains+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnableSsl': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableSsl(value=true): {
        enable_ssl: value,
      },
      '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnvironment(value): {
        environment:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnvironmentMixin(value): {
        environment+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      environment+:
        {
          '#': { help: '', name: 'environment' },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
          '#withSecure': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withSecure(value=true): {
            secure: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRailsEnv': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRailsEnv(value): {
        rails_env: value,
      },
      '#withShortName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withShortName(value): {
        short_name: value,
      },
      '#withSslConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSslConfiguration(value): {
        ssl_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSslConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSslConfigurationMixin(value): {
        ssl_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ssl_configuration+:
        {
          '#': { help: '', name: 'ssl_configuration' },
          '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCertificate(value): {
            certificate: value,
          },
          '#withChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withChain(value): {
            chain: value,
          },
          '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrivateKey(value): {
            private_key: value,
          },
        },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        type: value,
      },
    },
  aws_opsworks_custom_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'short_name', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, name, short_name, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withShortName(short_name)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_custom_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withShortName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withShortName(value): {
        short_name: value,
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_ecs_cluster_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'ecs_cluster_arn', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, ecs_cluster_arn, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withEcsClusterArn(ecs_cluster_arn)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_ecs_cluster_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withEcsClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEcsClusterArn(value): {
        ecs_cluster_arn: value,
      },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_ganglia_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'password', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, password, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withPassword(password)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_ganglia_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPassword(value): {
        password: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUrl(value): {
        url: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
      '#withUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUsername(value): {
        username: value,
      },
    },
  aws_opsworks_haproxy_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }, { default: null, enums: null, name: 'stats_password', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id, stats_password):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id)
        + self.withStatsPassword(stats_password),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_haproxy_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withHealthcheckMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHealthcheckMethod(value): {
        healthcheck_method: value,
      },
      '#withHealthcheckUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHealthcheckUrl(value): {
        healthcheck_url: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withStatsEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withStatsEnabled(value=true): {
        stats_enabled: value,
      },
      '#withStatsPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatsPassword(value): {
        stats_password: value,
      },
      '#withStatsUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatsUrl(value): {
        stats_url: value,
      },
      '#withStatsUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatsUser(value): {
        stats_user: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_instance:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'layer_ids', type: 'array' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, layer_ids, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withLayerIds(layer_ids)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_instance+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentVersion(value): {
        agent_version: value,
      },
      '#withAmiId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAmiId(value): {
        ami_id: value,
      },
      '#withArchitecture': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArchitecture(value): {
        architecture: value,
      },
      '#withAutoScalingType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAutoScalingType(value): {
        auto_scaling_type: value,
      },
      '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAvailabilityZone(value): {
        availability_zone: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDeleteEbs': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDeleteEbs(value=true): {
        delete_ebs: value,
      },
      '#withDeleteEip': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDeleteEip(value=true): {
        delete_eip: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsBlockDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsBlockDevice(value): {
        ebs_block_device:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsBlockDeviceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsBlockDeviceMixin(value): {
        ebs_block_device+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_block_device+:
        {
          '#': { help: '', name: 'ebs_block_device' },
          '#withDeleteOnTermination': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDeleteOnTermination(value=true): {
            delete_on_termination: value,
          },
          '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceName(value): {
            device_name: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withSnapshotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSnapshotId(value): {
            snapshot_id: value,
          },
          '#withVolumeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withVolumeSize(value): {
            volume_size: value,
          },
          '#withVolumeType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVolumeType(value): {
            volume_type: value,
          },
        },
      '#withEbsOptimized': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEbsOptimized(value=true): {
        ebs_optimized: value,
      },
      '#withEc2InstanceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEc2InstanceId(value): {
        ec2_instance_id: value,
      },
      '#withEcsClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEcsClusterArn(value): {
        ecs_cluster_arn: value,
      },
      '#withElasticIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticIp(value): {
        elastic_ip: value,
      },
      '#withEphemeralBlockDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralBlockDevice(value): {
        ephemeral_block_device:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEphemeralBlockDeviceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralBlockDeviceMixin(value): {
        ephemeral_block_device+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ephemeral_block_device+:
        {
          '#': { help: '', name: 'ephemeral_block_device' },
          '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceName(value): {
            device_name: value,
          },
          '#withVirtualName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVirtualName(value): {
            virtual_name: value,
          },
        },
      '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostname(value): {
        hostname: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInfrastructureClass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInfrastructureClass(value): {
        infrastructure_class: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceProfileArn(value): {
        instance_profile_arn: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withLastServiceErrorId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastServiceErrorId(value): {
        last_service_error_id: value,
      },
      '#withLayerIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLayerIds(value): {
        layer_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLayerIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLayerIdsMixin(value): {
        layer_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withOs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOs(value): {
        os: value,
      },
      '#withPlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatform(value): {
        platform: value,
      },
      '#withPrivateDns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPrivateDns(value): {
        private_dns: value,
      },
      '#withPrivateIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPrivateIp(value): {
        private_ip: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPublicDns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPublicDns(value): {
        public_dns: value,
      },
      '#withPublicIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPublicIp(value): {
        public_ip: value,
      },
      '#withRegisteredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRegisteredBy(value): {
        registered_by: value,
      },
      '#withReportedAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReportedAgentVersion(value): {
        reported_agent_version: value,
      },
      '#withReportedOsFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReportedOsFamily(value): {
        reported_os_family: value,
      },
      '#withReportedOsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReportedOsName(value): {
        reported_os_name: value,
      },
      '#withReportedOsVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReportedOsVersion(value): {
        reported_os_version: value,
      },
      '#withRootBlockDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRootBlockDevice(value): {
        root_block_device:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRootBlockDeviceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRootBlockDeviceMixin(value): {
        root_block_device+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      root_block_device+:
        {
          '#': { help: '', name: 'root_block_device' },
          '#withDeleteOnTermination': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDeleteOnTermination(value=true): {
            delete_on_termination: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withVolumeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withVolumeSize(value): {
            volume_size: value,
          },
          '#withVolumeType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVolumeType(value): {
            volume_type: value,
          },
        },
      '#withRootDeviceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRootDeviceType(value): {
        root_device_type: value,
      },
      '#withRootDeviceVolumeId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRootDeviceVolumeId(value): {
        root_device_volume_id: value,
      },
      '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIds(value): {
        security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIdsMixin(value): {
        security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSshHostDsaKeyFingerprint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSshHostDsaKeyFingerprint(value): {
        ssh_host_dsa_key_fingerprint: value,
      },
      '#withSshHostRsaKeyFingerprint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSshHostRsaKeyFingerprint(value): {
        ssh_host_rsa_key_fingerprint: value,
      },
      '#withSshKeyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSshKeyName(value): {
        ssh_key_name: value,
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSubnetId(value): {
        subnet_id: value,
      },
      '#withTenancy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTenancy(value): {
        tenancy: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withVirtualizationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVirtualizationType(value): {
        virtualization_type: value,
      },
    },
  aws_opsworks_java_app_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_java_app_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAppServer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppServer(value): {
        app_server: value,
      },
      '#withAppServerVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppServerVersion(value): {
        app_server_version: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withJvmOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJvmOptions(value): {
        jvm_options: value,
      },
      '#withJvmType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJvmType(value): {
        jvm_type: value,
      },
      '#withJvmVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJvmVersion(value): {
        jvm_version: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_memcached_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_memcached_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAllocatedMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withAllocatedMemory(value): {
        allocated_memory: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_mysql_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_mysql_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRootPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRootPassword(value): {
        root_password: value,
      },
      '#withRootPasswordOnAllInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withRootPasswordOnAllInstances(value=true): {
        root_password_on_all_instances: value,
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_nodejs_app_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_nodejs_app_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNodejsVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNodejsVersion(value): {
        nodejs_version: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_permission:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }, { default: null, enums: null, name: 'user_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id, user_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id)
        + self.withUserArn(user_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_permission+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAllowSsh': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowSsh(value=true): {
        allow_ssh: value,
      },
      '#withAllowSudo': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowSudo(value=true): {
        allow_sudo: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLevel(value): {
        level: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withUserArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserArn(value): {
        user_arn: value,
      },
    },
  aws_opsworks_php_app_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_php_app_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_rails_app_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_rails_app_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAppServer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppServer(value): {
        app_server: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withBundlerVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBundlerVersion(value): {
        bundler_version: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withManageBundler': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withManageBundler(value=true): {
        manage_bundler: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withPassengerVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPassengerVersion(value): {
        passenger_version: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRubyVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRubyVersion(value): {
        ruby_version: value,
      },
      '#withRubygemsVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRubygemsVersion(value): {
        rubygems_version: value,
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_rds_db_instance:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'db_password', type: 'string' }, { default: null, enums: null, name: 'db_user', type: 'string' }, { default: null, enums: null, name: 'rds_db_instance_arn', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, db_password, db_user, rds_db_instance_arn, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withDbPassword(db_password)
        + self.withDbUser(db_user)
        + self.withRdsDbInstanceArn(rds_db_instance_arn)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_rds_db_instance+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDbPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbPassword(value): {
        db_password: value,
      },
      '#withDbUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbUser(value): {
        db_user: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRdsDbInstanceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRdsDbInstanceArn(value): {
        rds_db_instance_arn: value,
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
    },
  aws_opsworks_stack:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'default_instance_profile_arn', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'region', type: 'string' }, { default: null, enums: null, name: 'service_role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, default_instance_profile_arn, name, region, service_role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withDefaultInstanceProfileArn(default_instance_profile_arn)
        + self.withName(name)
        + self.withRegion(region)
        + self.withServiceRoleArn(service_role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_stack+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentVersion(value): {
        agent_version: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBerkshelfVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBerkshelfVersion(value): {
        berkshelf_version: value,
      },
      '#withColor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withColor(value): {
        color: value,
      },
      '#withConfigurationManagerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withConfigurationManagerName(value): {
        configuration_manager_name: value,
      },
      '#withConfigurationManagerVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withConfigurationManagerVersion(value): {
        configuration_manager_version: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomCookbooksSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCustomCookbooksSource(value): {
        custom_cookbooks_source: value,
      },
      '#withCustomCookbooksSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCustomCookbooksSourceMixin(value): {
        custom_cookbooks_source+: value,
      },
      custom_cookbooks_source+:
        {
          '#withPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPassword(value): {
            custom_cookbooks_source+: {
              password: value,
            },
          },
          '#withRevision': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRevision(value): {
            custom_cookbooks_source+: {
              revision: value,
            },
          },
          '#withSshKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSshKey(value): {
            custom_cookbooks_source+: {
              ssh_key: value,
            },
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            custom_cookbooks_source+: {
              type: value,
            },
          },
          '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUrl(value): {
            custom_cookbooks_source+: {
              url: value,
            },
          },
          '#withUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUsername(value): {
            custom_cookbooks_source+: {
              username: value,
            },
          },
        },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withDefaultAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultAvailabilityZone(value): {
        default_availability_zone: value,
      },
      '#withDefaultInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultInstanceProfileArn(value): {
        default_instance_profile_arn: value,
      },
      '#withDefaultOs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultOs(value): {
        default_os: value,
      },
      '#withDefaultRootDeviceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultRootDeviceType(value): {
        default_root_device_type: value,
      },
      '#withDefaultSshKeyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultSshKeyName(value): {
        default_ssh_key_name: value,
      },
      '#withDefaultSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultSubnetId(value): {
        default_subnet_id: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHostnameTheme': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostnameTheme(value): {
        hostname_theme: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withManageBerkshelf': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withManageBerkshelf(value=true): {
        manage_berkshelf: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRegion(value): {
        region: value,
      },
      '#withServiceRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServiceRoleArn(value): {
        service_role_arn: value,
      },
      '#withStackEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackEndpoint(value): {
        stack_endpoint: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
        },
      '#withUseCustomCookbooks': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseCustomCookbooks(value=true): {
        use_custom_cookbooks: value,
      },
      '#withUseOpsworksSecurityGroups': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseOpsworksSecurityGroups(value=true): {
        use_opsworks_security_groups: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
    },
  aws_opsworks_static_web_layer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'stack_id', type: 'string' }], help: '' } },
      new(tf_resource_key, stack_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withStackId(stack_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_static_web_layer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutoAssignElasticIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignElasticIps(value=true): {
        auto_assign_elastic_ips: value,
      },
      '#withAutoAssignPublicIps': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoAssignPublicIps(value=true): {
        auto_assign_public_ips: value,
      },
      '#withAutoHealing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoHealing(value=true): {
        auto_healing: value,
      },
      '#withCloudwatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfiguration(value): {
        cloudwatch_configuration: value,
      },
      '#withCloudwatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchConfigurationMixin(value): {
        cloudwatch_configuration+: value,
      },
      cloudwatch_configuration+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            cloudwatch_configuration+: {
              enabled: value,
            },
          },
          '#withLogStreams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreams(value): {
            cloudwatch_configuration+: {
              log_streams:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withLogStreamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogStreamsMixin(value): {
            cloudwatch_configuration+: {
              log_streams+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          log_streams+:
            {
              '#': { help: '', name: 'log_streams' },
              '#withBatchCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchCount(value): {
                batch_count: value,
              },
              '#withBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBatchSize(value): {
                batch_size: value,
              },
              '#withBufferDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferDuration(value): {
                buffer_duration: value,
              },
              '#withDatetimeFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatetimeFormat(value): {
                datetime_format: value,
              },
              '#withEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncoding(value): {
                encoding: value,
              },
              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFile(value): {
                file: value,
              },
              '#withFileFingerprintLines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileFingerprintLines(value): {
                file_fingerprint_lines: value,
              },
              '#withInitialPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInitialPosition(value): {
                initial_position: value,
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                log_group_name: value,
              },
              '#withMultilineStartPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMultilineStartPattern(value): {
                multiline_start_pattern: value,
              },
              '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTimeZone(value): {
                time_zone: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomConfigureRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipes(value): {
        custom_configure_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomConfigureRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomConfigureRecipesMixin(value): {
        custom_configure_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipes(value): {
        custom_deploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomDeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomDeployRecipesMixin(value): {
        custom_deploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomInstanceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomInstanceProfileArn(value): {
        custom_instance_profile_arn: value,
      },
      '#withCustomJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomJson(value): {
        custom_json: value,
      },
      '#withCustomSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIds(value): {
        custom_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSecurityGroupIdsMixin(value): {
        custom_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipes(value): {
        custom_setup_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomSetupRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomSetupRecipesMixin(value): {
        custom_setup_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipes(value): {
        custom_shutdown_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomShutdownRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomShutdownRecipesMixin(value): {
        custom_shutdown_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipes(value): {
        custom_undeploy_recipes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomUndeployRecipesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomUndeployRecipesMixin(value): {
        custom_undeploy_recipes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDrainElbOnShutdown': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDrainElbOnShutdown(value=true): {
        drain_elb_on_shutdown: value,
      },
      '#withEbsVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolume(value): {
        ebs_volume:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsVolumeMixin(value): {
        ebs_volume+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_volume+:
        {
          '#': { help: '', name: 'ebs_volume' },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMountPoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMountPoint(value): {
            mount_point: value,
          },
          '#withNumberOfDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfDisks(value): {
            number_of_disks: value,
          },
          '#withRaidLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRaidLevel(value): {
            raid_level: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticLoadBalancer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withElasticLoadBalancer(value): {
        elastic_load_balancer: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstallUpdatesOnBoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstallUpdatesOnBoot(value=true): {
        install_updates_on_boot: value,
      },
      '#withInstanceShutdownTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceShutdownTimeout(value): {
        instance_shutdown_timeout: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLoadBasedAutoScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScaling(value): {
        load_based_auto_scaling: value,
      },
      '#withLoadBasedAutoScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLoadBasedAutoScalingMixin(value): {
        load_based_auto_scaling+: value,
      },
      load_based_auto_scaling+:
        {
          '#withDownscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscaling(value): {
            load_based_auto_scaling+: {
              downscaling: value,
            },
          },
          '#withDownscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDownscalingMixin(value): {
            load_based_auto_scaling+: {
              downscaling+: value,
            },
          },
          downscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  downscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
          '#withEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnable(value=true): {
            load_based_auto_scaling+: {
              enable: value,
            },
          },
          '#withUpscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscaling(value): {
            load_based_auto_scaling+: {
              upscaling: value,
            },
          },
          '#withUpscalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUpscalingMixin(value): {
            load_based_auto_scaling+: {
              upscaling+: value,
            },
          },
          upscaling+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCpuThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpuThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    cpu_threshold: value,
                  },
                },
              },
              '#withIgnoreMetricsTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIgnoreMetricsTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    ignore_metrics_time: value,
                  },
                },
              },
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    instance_count: value,
                  },
                },
              },
              '#withLoadThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    load_threshold: value,
                  },
                },
              },
              '#withMemoryThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryThreshold(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    memory_threshold: value,
                  },
                },
              },
              '#withThresholdsWaitTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThresholdsWaitTime(value): {
                load_based_auto_scaling+: {
                  upscaling+: {
                    thresholds_wait_time: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStackId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStackId(value): {
        stack_id: value,
      },
      '#withSystemPackages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackages(value): {
        system_packages:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSystemPackagesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSystemPackagesMixin(value): {
        system_packages+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUseEbsOptimizedInstances': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUseEbsOptimizedInstances(value=true): {
        use_ebs_optimized_instances: value,
      },
    },
  aws_opsworks_user_profile:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'ssh_username', type: 'string' }, { default: null, enums: null, name: 'user_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, ssh_username, user_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withSshUsername(ssh_username)
        + self.withUserArn(user_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_opsworks_user_profile+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAllowSelfManagement': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowSelfManagement(value=true): {
        allow_self_management: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSshPublicKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSshPublicKey(value): {
        ssh_public_key: value,
      },
      '#withSshUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSshUsername(value): {
        ssh_username: value,
      },
      '#withUserArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserArn(value): {
        user_arn: value,
      },
    },
}
