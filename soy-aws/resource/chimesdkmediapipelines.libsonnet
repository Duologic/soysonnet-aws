// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'chimesdkmediapipelines',
  },
  aws_chimesdkmediapipelines_media_insights_pipeline_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'elements', type: 'array' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'resource_access_role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, elements, name, resource_access_role_arn):
        {
          local this = self,
          resource: {
            aws_chimesdkmediapipelines_media_insights_pipeline_configuration: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withElements(elements)
        + self.withName(name)
        + self.withResourceAccessRoleArn(resource_access_role_arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withElements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElements(value): {
        spec+: {
          elements:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withElementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElementsMixin(value): {
        spec+: {
          elements+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      elements+:
        {
          '#': { help: '', name: 'elements' },
          '#withAmazonTranscribeCallAnalyticsProcessorConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAmazonTranscribeCallAnalyticsProcessorConfiguration(value): {
            amazon_transcribe_call_analytics_processor_configuration: value,
          },
          '#withAmazonTranscribeCallAnalyticsProcessorConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAmazonTranscribeCallAnalyticsProcessorConfigurationMixin(value): {
            amazon_transcribe_call_analytics_processor_configuration+: value,
          },
          amazon_transcribe_call_analytics_processor_configuration+:
            {
              '#withCallAnalyticsStreamCategories': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCallAnalyticsStreamCategories(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  call_analytics_stream_categories:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withCallAnalyticsStreamCategoriesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCallAnalyticsStreamCategoriesMixin(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  call_analytics_stream_categories+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withContentIdentificationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentIdentificationType(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  content_identification_type: value,
                },
              },
              '#withContentRedactionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentRedactionType(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  content_redaction_type: value,
                },
              },
              '#withEnablePartialResultsStabilization': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnablePartialResultsStabilization(value=true): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  enable_partial_results_stabilization: value,
                },
              },
              '#withFilterPartialResults': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withFilterPartialResults(value=true): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  filter_partial_results: value,
                },
              },
              '#withLanguageCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLanguageCode(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  language_code: value,
                },
              },
              '#withLanguageModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLanguageModelName(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  language_model_name: value,
                },
              },
              '#withPartialResultsStability': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPartialResultsStability(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  partial_results_stability: value,
                },
              },
              '#withPiiEntityTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPiiEntityTypes(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  pii_entity_types: value,
                },
              },
              '#withPostCallAnalyticsSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPostCallAnalyticsSettings(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  post_call_analytics_settings: value,
                },
              },
              '#withPostCallAnalyticsSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withPostCallAnalyticsSettingsMixin(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  post_call_analytics_settings+: value,
                },
              },
              post_call_analytics_settings+:
                {
                  '#withContentRedactionOutput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withContentRedactionOutput(value): {
                    amazon_transcribe_call_analytics_processor_configuration+: {
                      post_call_analytics_settings+: {
                        content_redaction_output: value,
                      },
                    },
                  },
                  '#withDataAccessRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDataAccessRoleArn(value): {
                    amazon_transcribe_call_analytics_processor_configuration+: {
                      post_call_analytics_settings+: {
                        data_access_role_arn: value,
                      },
                    },
                  },
                  '#withOutputEncryptionKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withOutputEncryptionKmsKeyId(value): {
                    amazon_transcribe_call_analytics_processor_configuration+: {
                      post_call_analytics_settings+: {
                        output_encryption_kms_key_id: value,
                      },
                    },
                  },
                  '#withOutputLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withOutputLocation(value): {
                    amazon_transcribe_call_analytics_processor_configuration+: {
                      post_call_analytics_settings+: {
                        output_location: value,
                      },
                    },
                  },
                },
              '#withVocabularyFilterMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVocabularyFilterMethod(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  vocabulary_filter_method: value,
                },
              },
              '#withVocabularyFilterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVocabularyFilterName(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  vocabulary_filter_name: value,
                },
              },
              '#withVocabularyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVocabularyName(value): {
                amazon_transcribe_call_analytics_processor_configuration+: {
                  vocabulary_name: value,
                },
              },
            },
          '#withAmazonTranscribeProcessorConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAmazonTranscribeProcessorConfiguration(value): {
            amazon_transcribe_processor_configuration: value,
          },
          '#withAmazonTranscribeProcessorConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAmazonTranscribeProcessorConfigurationMixin(value): {
            amazon_transcribe_processor_configuration+: value,
          },
          amazon_transcribe_processor_configuration+:
            {
              '#withContentIdentificationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentIdentificationType(value): {
                amazon_transcribe_processor_configuration+: {
                  content_identification_type: value,
                },
              },
              '#withContentRedactionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentRedactionType(value): {
                amazon_transcribe_processor_configuration+: {
                  content_redaction_type: value,
                },
              },
              '#withEnablePartialResultsStabilization': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnablePartialResultsStabilization(value=true): {
                amazon_transcribe_processor_configuration+: {
                  enable_partial_results_stabilization: value,
                },
              },
              '#withFilterPartialResults': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withFilterPartialResults(value=true): {
                amazon_transcribe_processor_configuration+: {
                  filter_partial_results: value,
                },
              },
              '#withLanguageCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLanguageCode(value): {
                amazon_transcribe_processor_configuration+: {
                  language_code: value,
                },
              },
              '#withLanguageModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLanguageModelName(value): {
                amazon_transcribe_processor_configuration+: {
                  language_model_name: value,
                },
              },
              '#withPartialResultsStability': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPartialResultsStability(value): {
                amazon_transcribe_processor_configuration+: {
                  partial_results_stability: value,
                },
              },
              '#withPiiEntityTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPiiEntityTypes(value): {
                amazon_transcribe_processor_configuration+: {
                  pii_entity_types: value,
                },
              },
              '#withShowSpeakerLabel': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withShowSpeakerLabel(value=true): {
                amazon_transcribe_processor_configuration+: {
                  show_speaker_label: value,
                },
              },
              '#withVocabularyFilterMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVocabularyFilterMethod(value): {
                amazon_transcribe_processor_configuration+: {
                  vocabulary_filter_method: value,
                },
              },
              '#withVocabularyFilterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVocabularyFilterName(value): {
                amazon_transcribe_processor_configuration+: {
                  vocabulary_filter_name: value,
                },
              },
              '#withVocabularyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVocabularyName(value): {
                amazon_transcribe_processor_configuration+: {
                  vocabulary_name: value,
                },
              },
            },
          '#withKinesisDataStreamSinkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisDataStreamSinkConfiguration(value): {
            kinesis_data_stream_sink_configuration: value,
          },
          '#withKinesisDataStreamSinkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisDataStreamSinkConfigurationMixin(value): {
            kinesis_data_stream_sink_configuration+: value,
          },
          kinesis_data_stream_sink_configuration+:
            {
              '#withInsightsTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInsightsTarget(value): {
                kinesis_data_stream_sink_configuration+: {
                  insights_target: value,
                },
              },
            },
          '#withLambdaFunctionSinkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLambdaFunctionSinkConfiguration(value): {
            lambda_function_sink_configuration: value,
          },
          '#withLambdaFunctionSinkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLambdaFunctionSinkConfigurationMixin(value): {
            lambda_function_sink_configuration+: value,
          },
          lambda_function_sink_configuration+:
            {
              '#withInsightsTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInsightsTarget(value): {
                lambda_function_sink_configuration+: {
                  insights_target: value,
                },
              },
            },
          '#withS3RecordingSinkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3RecordingSinkConfiguration(value): {
            s3_recording_sink_configuration: value,
          },
          '#withS3RecordingSinkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3RecordingSinkConfigurationMixin(value): {
            s3_recording_sink_configuration+: value,
          },
          s3_recording_sink_configuration+:
            {
              '#withDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestination(value): {
                s3_recording_sink_configuration+: {
                  destination: value,
                },
              },
            },
          '#withSnsTopicSinkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSnsTopicSinkConfiguration(value): {
            sns_topic_sink_configuration: value,
          },
          '#withSnsTopicSinkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSnsTopicSinkConfigurationMixin(value): {
            sns_topic_sink_configuration+: value,
          },
          sns_topic_sink_configuration+:
            {
              '#withInsightsTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInsightsTarget(value): {
                sns_topic_sink_configuration+: {
                  insights_target: value,
                },
              },
            },
          '#withSqsQueueSinkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSqsQueueSinkConfiguration(value): {
            sqs_queue_sink_configuration: value,
          },
          '#withSqsQueueSinkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSqsQueueSinkConfigurationMixin(value): {
            sqs_queue_sink_configuration+: value,
          },
          sqs_queue_sink_configuration+:
            {
              '#withInsightsTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInsightsTarget(value): {
                sqs_queue_sink_configuration+: {
                  insights_target: value,
                },
              },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withVoiceAnalyticsProcessorConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVoiceAnalyticsProcessorConfiguration(value): {
            voice_analytics_processor_configuration: value,
          },
          '#withVoiceAnalyticsProcessorConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVoiceAnalyticsProcessorConfigurationMixin(value): {
            voice_analytics_processor_configuration+: value,
          },
          voice_analytics_processor_configuration+:
            {
              '#withSpeakerSearchStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSpeakerSearchStatus(value): {
                voice_analytics_processor_configuration+: {
                  speaker_search_status: value,
                },
              },
              '#withVoiceToneAnalysisStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVoiceToneAnalysisStatus(value): {
                voice_analytics_processor_configuration+: {
                  voice_tone_analysis_status: value,
                },
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRealTimeAlertConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRealTimeAlertConfiguration(value): {
        spec+: {
          real_time_alert_configuration: value,
        },
      },
      '#withRealTimeAlertConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRealTimeAlertConfigurationMixin(value): {
        spec+: {
          real_time_alert_configuration+: value,
        },
      },
      real_time_alert_configuration+:
        {
          '#withDisabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDisabled(value=true): {
            spec+: {
              real_time_alert_configuration+: {
                disabled: value,
              },
            },
          },
          '#withRules': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRules(value): {
            spec+: {
              real_time_alert_configuration+: {
                rules:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withRulesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRulesMixin(value): {
            spec+: {
              real_time_alert_configuration+: {
                rules+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          rules+:
            {
              '#': { help: '', name: 'rules' },
              '#withIssueDetectionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withIssueDetectionConfiguration(value): {
                issue_detection_configuration: value,
              },
              '#withIssueDetectionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withIssueDetectionConfigurationMixin(value): {
                issue_detection_configuration+: value,
              },
              issue_detection_configuration+:
                {
                  '#withRuleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRuleName(value): {
                    issue_detection_configuration+: {
                      rule_name: value,
                    },
                  },
                },
              '#withKeywordMatchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withKeywordMatchConfiguration(value): {
                keyword_match_configuration: value,
              },
              '#withKeywordMatchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withKeywordMatchConfigurationMixin(value): {
                keyword_match_configuration+: value,
              },
              keyword_match_configuration+:
                {
                  '#withKeywords': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withKeywords(value): {
                    keyword_match_configuration+: {
                      keywords:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withKeywordsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withKeywordsMixin(value): {
                    keyword_match_configuration+: {
                      keywords+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withNegate': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withNegate(value=true): {
                    keyword_match_configuration+: {
                      negate: value,
                    },
                  },
                  '#withRuleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRuleName(value): {
                    keyword_match_configuration+: {
                      rule_name: value,
                    },
                  },
                },
              '#withSentimentConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSentimentConfiguration(value): {
                sentiment_configuration: value,
              },
              '#withSentimentConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSentimentConfigurationMixin(value): {
                sentiment_configuration+: value,
              },
              sentiment_configuration+:
                {
                  '#withRuleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRuleName(value): {
                    sentiment_configuration+: {
                      rule_name: value,
                    },
                  },
                  '#withSentimentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSentimentType(value): {
                    sentiment_configuration+: {
                      sentiment_type: value,
                    },
                  },
                  '#withTimePeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTimePeriod(value): {
                    sentiment_configuration+: {
                      time_period: value,
                    },
                  },
                },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                type: value,
              },
            },
        },
      '#withResourceAccessRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceAccessRoleArn(value): {
        spec+: {
          resource_access_role_arn: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        spec+: {
          tags_all: value,
        },
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        spec+: {
          tags_all+: value,
        },
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        spec+: {
          timeouts: value,
        },
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        spec+: {
          timeouts+: value,
        },
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            spec+: {
              timeouts+: {
                create: value,
              },
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            spec+: {
              timeouts+: {
                delete: value,
              },
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            spec+: {
              timeouts+: {
                update: value,
              },
            },
          },
        },
    },
}
