// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'sagemaker',
  },
  aws_sagemaker_app:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'app_name', type: 'string' }, { default: null, enums: null, name: 'app_type', type: 'string' }, { default: null, enums: null, name: 'domain_id', type: 'string' }], help: '' } },
      new(tf_resource_key, app_name, app_type, domain_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withAppName(app_name)
        + self.withAppType(app_type)
        + self.withDomainId(domain_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_app+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAppName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppName(value): {
        app_name: value,
      },
      '#withAppType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppType(value): {
        app_type: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomainId(value): {
        domain_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withResourceSpec(value): {
        resource_spec: value,
      },
      '#withResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withResourceSpecMixin(value): {
        resource_spec+: value,
      },
      resource_spec+:
        {
          '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInstanceType(value): {
            resource_spec+: {
              instance_type: value,
            },
          },
          '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLifecycleConfigArn(value): {
            resource_spec+: {
              lifecycle_config_arn: value,
            },
          },
          '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSagemakerImageArn(value): {
            resource_spec+: {
              sagemaker_image_arn: value,
            },
          },
          '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSagemakerImageVersionAlias(value): {
            resource_spec+: {
              sagemaker_image_version_alias: value,
            },
          },
          '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSagemakerImageVersionArn(value): {
            resource_spec+: {
              sagemaker_image_version_arn: value,
            },
          },
        },
      '#withSpaceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSpaceName(value): {
        space_name: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUserProfileName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserProfileName(value): {
        user_profile_name: value,
      },
    },
  aws_sagemaker_app_image_config:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'app_image_config_name', type: 'string' }], help: '' } },
      new(tf_resource_key, app_image_config_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withAppImageConfigName(app_image_config_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_app_image_config+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppImageConfigName(value): {
        app_image_config_name: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCodeEditorAppImageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCodeEditorAppImageConfig(value): {
        code_editor_app_image_config: value,
      },
      '#withCodeEditorAppImageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCodeEditorAppImageConfigMixin(value): {
        code_editor_app_image_config+: value,
      },
      code_editor_app_image_config+:
        {
          '#withContainerConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withContainerConfig(value): {
            code_editor_app_image_config+: {
              container_config: value,
            },
          },
          '#withContainerConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withContainerConfigMixin(value): {
            code_editor_app_image_config+: {
              container_config+: value,
            },
          },
          container_config+:
            {
              '#withContainerArguments': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerArguments(value): {
                code_editor_app_image_config+: {
                  container_config+: {
                    container_arguments:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerArgumentsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerArgumentsMixin(value): {
                code_editor_app_image_config+: {
                  container_config+: {
                    container_arguments+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerEntrypoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerEntrypoint(value): {
                code_editor_app_image_config+: {
                  container_config+: {
                    container_entrypoint:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerEntrypointMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerEntrypointMixin(value): {
                code_editor_app_image_config+: {
                  container_config+: {
                    container_entrypoint+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerEnvironmentVariables': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withContainerEnvironmentVariables(value): {
                code_editor_app_image_config+: {
                  container_config+: {
                    container_environment_variables: value,
                  },
                },
              },
              '#withContainerEnvironmentVariablesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withContainerEnvironmentVariablesMixin(value): {
                code_editor_app_image_config+: {
                  container_config+: {
                    container_environment_variables+: value,
                  },
                },
              },
            },
          '#withFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFileSystemConfig(value): {
            code_editor_app_image_config+: {
              file_system_config: value,
            },
          },
          '#withFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFileSystemConfigMixin(value): {
            code_editor_app_image_config+: {
              file_system_config+: value,
            },
          },
          file_system_config+:
            {
              '#withDefaultGid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDefaultGid(value): {
                code_editor_app_image_config+: {
                  file_system_config+: {
                    default_gid: value,
                  },
                },
              },
              '#withDefaultUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDefaultUid(value): {
                code_editor_app_image_config+: {
                  file_system_config+: {
                    default_uid: value,
                  },
                },
              },
              '#withMountPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMountPath(value): {
                code_editor_app_image_config+: {
                  file_system_config+: {
                    mount_path: value,
                  },
                },
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withJupyterLabImageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withJupyterLabImageConfig(value): {
        jupyter_lab_image_config: value,
      },
      '#withJupyterLabImageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withJupyterLabImageConfigMixin(value): {
        jupyter_lab_image_config+: value,
      },
      jupyter_lab_image_config+:
        {
          '#withContainerConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withContainerConfig(value): {
            jupyter_lab_image_config+: {
              container_config: value,
            },
          },
          '#withContainerConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withContainerConfigMixin(value): {
            jupyter_lab_image_config+: {
              container_config+: value,
            },
          },
          container_config+:
            {
              '#withContainerArguments': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerArguments(value): {
                jupyter_lab_image_config+: {
                  container_config+: {
                    container_arguments:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerArgumentsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerArgumentsMixin(value): {
                jupyter_lab_image_config+: {
                  container_config+: {
                    container_arguments+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerEntrypoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerEntrypoint(value): {
                jupyter_lab_image_config+: {
                  container_config+: {
                    container_entrypoint:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerEntrypointMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerEntrypointMixin(value): {
                jupyter_lab_image_config+: {
                  container_config+: {
                    container_entrypoint+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withContainerEnvironmentVariables': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withContainerEnvironmentVariables(value): {
                jupyter_lab_image_config+: {
                  container_config+: {
                    container_environment_variables: value,
                  },
                },
              },
              '#withContainerEnvironmentVariablesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withContainerEnvironmentVariablesMixin(value): {
                jupyter_lab_image_config+: {
                  container_config+: {
                    container_environment_variables+: value,
                  },
                },
              },
            },
          '#withFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFileSystemConfig(value): {
            jupyter_lab_image_config+: {
              file_system_config: value,
            },
          },
          '#withFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFileSystemConfigMixin(value): {
            jupyter_lab_image_config+: {
              file_system_config+: value,
            },
          },
          file_system_config+:
            {
              '#withDefaultGid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDefaultGid(value): {
                jupyter_lab_image_config+: {
                  file_system_config+: {
                    default_gid: value,
                  },
                },
              },
              '#withDefaultUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDefaultUid(value): {
                jupyter_lab_image_config+: {
                  file_system_config+: {
                    default_uid: value,
                  },
                },
              },
              '#withMountPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMountPath(value): {
                jupyter_lab_image_config+: {
                  file_system_config+: {
                    mount_path: value,
                  },
                },
              },
            },
        },
      '#withKernelGatewayImageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withKernelGatewayImageConfig(value): {
        kernel_gateway_image_config: value,
      },
      '#withKernelGatewayImageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withKernelGatewayImageConfigMixin(value): {
        kernel_gateway_image_config+: value,
      },
      kernel_gateway_image_config+:
        {
          '#withFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFileSystemConfig(value): {
            kernel_gateway_image_config+: {
              file_system_config: value,
            },
          },
          '#withFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFileSystemConfigMixin(value): {
            kernel_gateway_image_config+: {
              file_system_config+: value,
            },
          },
          file_system_config+:
            {
              '#withDefaultGid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDefaultGid(value): {
                kernel_gateway_image_config+: {
                  file_system_config+: {
                    default_gid: value,
                  },
                },
              },
              '#withDefaultUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDefaultUid(value): {
                kernel_gateway_image_config+: {
                  file_system_config+: {
                    default_uid: value,
                  },
                },
              },
              '#withMountPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMountPath(value): {
                kernel_gateway_image_config+: {
                  file_system_config+: {
                    mount_path: value,
                  },
                },
              },
            },
          '#withKernelSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKernelSpec(value): {
            kernel_gateway_image_config+: {
              kernel_spec:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withKernelSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKernelSpecMixin(value): {
            kernel_gateway_image_config+: {
              kernel_spec+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          kernel_spec+:
            {
              '#': { help: '', name: 'kernel_spec' },
              '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDisplayName(value): {
                display_name: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
        },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_code_repository:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'code_repository_name', type: 'string' }, { default: null, enums: null, name: 'git_config', type: 'object' }], help: '' } },
      new(tf_resource_key, code_repository_name, git_config):
        self.withTfResourceKey(tf_resource_key)
        + self.withCodeRepositoryName(code_repository_name)
        + self.withGitConfig(git_config),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_code_repository+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCodeRepositoryName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCodeRepositoryName(value): {
        code_repository_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withGitConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withGitConfig(value): {
        git_config: value,
      },
      '#withGitConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withGitConfigMixin(value): {
        git_config+: value,
      },
      git_config+:
        {
          '#withBranch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBranch(value): {
            git_config+: {
              branch: value,
            },
          },
          '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRepositoryUrl(value): {
            git_config+: {
              repository_url: value,
            },
          },
          '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSecretArn(value): {
            git_config+: {
              secret_arn: value,
            },
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_data_quality_job_definition:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'data_quality_app_specification', type: 'object' }, { default: null, enums: null, name: 'data_quality_job_input', type: 'object' }, { default: null, enums: null, name: 'data_quality_job_output_config', type: 'object' }, { default: null, enums: null, name: 'job_resources', type: 'object' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, data_quality_app_specification, data_quality_job_input, data_quality_job_output_config, job_resources, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withDataQualityAppSpecification(data_quality_app_specification)
        + self.withDataQualityJobInput(data_quality_job_input)
        + self.withDataQualityJobOutputConfig(data_quality_job_output_config)
        + self.withJobResources(job_resources)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_data_quality_job_definition+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDataQualityAppSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityAppSpecification(value): {
        data_quality_app_specification: value,
      },
      '#withDataQualityAppSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityAppSpecificationMixin(value): {
        data_quality_app_specification+: value,
      },
      data_quality_app_specification+:
        {
          '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEnvironment(value): {
            data_quality_app_specification+: {
              environment: value,
            },
          },
          '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEnvironmentMixin(value): {
            data_quality_app_specification+: {
              environment+: value,
            },
          },
          '#withImageUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withImageUri(value): {
            data_quality_app_specification+: {
              image_uri: value,
            },
          },
          '#withPostAnalyticsProcessorSourceUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostAnalyticsProcessorSourceUri(value): {
            data_quality_app_specification+: {
              post_analytics_processor_source_uri: value,
            },
          },
          '#withRecordPreprocessorSourceUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRecordPreprocessorSourceUri(value): {
            data_quality_app_specification+: {
              record_preprocessor_source_uri: value,
            },
          },
        },
      '#withDataQualityBaselineConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityBaselineConfig(value): {
        data_quality_baseline_config: value,
      },
      '#withDataQualityBaselineConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityBaselineConfigMixin(value): {
        data_quality_baseline_config+: value,
      },
      data_quality_baseline_config+:
        {
          '#withConstraintsResource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withConstraintsResource(value): {
            data_quality_baseline_config+: {
              constraints_resource: value,
            },
          },
          '#withConstraintsResourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withConstraintsResourceMixin(value): {
            data_quality_baseline_config+: {
              constraints_resource+: value,
            },
          },
          constraints_resource+:
            {
              '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3Uri(value): {
                data_quality_baseline_config+: {
                  constraints_resource+: {
                    s3_uri: value,
                  },
                },
              },
            },
          '#withStatisticsResource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStatisticsResource(value): {
            data_quality_baseline_config+: {
              statistics_resource: value,
            },
          },
          '#withStatisticsResourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStatisticsResourceMixin(value): {
            data_quality_baseline_config+: {
              statistics_resource+: value,
            },
          },
          statistics_resource+:
            {
              '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3Uri(value): {
                data_quality_baseline_config+: {
                  statistics_resource+: {
                    s3_uri: value,
                  },
                },
              },
            },
        },
      '#withDataQualityJobInput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityJobInput(value): {
        data_quality_job_input: value,
      },
      '#withDataQualityJobInputMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityJobInputMixin(value): {
        data_quality_job_input+: value,
      },
      data_quality_job_input+:
        {
          '#withBatchTransformInput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBatchTransformInput(value): {
            data_quality_job_input+: {
              batch_transform_input: value,
            },
          },
          '#withBatchTransformInputMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBatchTransformInputMixin(value): {
            data_quality_job_input+: {
              batch_transform_input+: value,
            },
          },
          batch_transform_input+:
            {
              '#withDataCapturedDestinationS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDataCapturedDestinationS3Uri(value): {
                data_quality_job_input+: {
                  batch_transform_input+: {
                    data_captured_destination_s3_uri: value,
                  },
                },
              },
              '#withDatasetFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDatasetFormat(value): {
                data_quality_job_input+: {
                  batch_transform_input+: {
                    dataset_format: value,
                  },
                },
              },
              '#withDatasetFormatMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDatasetFormatMixin(value): {
                data_quality_job_input+: {
                  batch_transform_input+: {
                    dataset_format+: value,
                  },
                },
              },
              dataset_format+:
                {
                  '#withCsv': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCsv(value): {
                    data_quality_job_input+: {
                      batch_transform_input+: {
                        dataset_format+: {
                          csv: value,
                        },
                      },
                    },
                  },
                  '#withCsvMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCsvMixin(value): {
                    data_quality_job_input+: {
                      batch_transform_input+: {
                        dataset_format+: {
                          csv+: value,
                        },
                      },
                    },
                  },
                  csv+:
                    {
                      '#withHeader': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withHeader(value=true): {
                        data_quality_job_input+: {
                          batch_transform_input+: {
                            dataset_format+: {
                              csv+: {
                                header: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withJson(value): {
                    data_quality_job_input+: {
                      batch_transform_input+: {
                        dataset_format+: {
                          json: value,
                        },
                      },
                    },
                  },
                  '#withJsonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withJsonMixin(value): {
                    data_quality_job_input+: {
                      batch_transform_input+: {
                        dataset_format+: {
                          json+: value,
                        },
                      },
                    },
                  },
                  json+:
                    {
                      '#withLine': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withLine(value=true): {
                        data_quality_job_input+: {
                          batch_transform_input+: {
                            dataset_format+: {
                              json+: {
                                line: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withLocalPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLocalPath(value): {
                data_quality_job_input+: {
                  batch_transform_input+: {
                    local_path: value,
                  },
                },
              },
              '#withS3DataDistributionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3DataDistributionType(value): {
                data_quality_job_input+: {
                  batch_transform_input+: {
                    s3_data_distribution_type: value,
                  },
                },
              },
              '#withS3InputMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3InputMode(value): {
                data_quality_job_input+: {
                  batch_transform_input+: {
                    s3_input_mode: value,
                  },
                },
              },
            },
          '#withEndpointInput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEndpointInput(value): {
            data_quality_job_input+: {
              endpoint_input: value,
            },
          },
          '#withEndpointInputMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEndpointInputMixin(value): {
            data_quality_job_input+: {
              endpoint_input+: value,
            },
          },
          endpoint_input+:
            {
              '#withEndpointName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEndpointName(value): {
                data_quality_job_input+: {
                  endpoint_input+: {
                    endpoint_name: value,
                  },
                },
              },
              '#withLocalPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLocalPath(value): {
                data_quality_job_input+: {
                  endpoint_input+: {
                    local_path: value,
                  },
                },
              },
              '#withS3DataDistributionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3DataDistributionType(value): {
                data_quality_job_input+: {
                  endpoint_input+: {
                    s3_data_distribution_type: value,
                  },
                },
              },
              '#withS3InputMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3InputMode(value): {
                data_quality_job_input+: {
                  endpoint_input+: {
                    s3_input_mode: value,
                  },
                },
              },
            },
        },
      '#withDataQualityJobOutputConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityJobOutputConfig(value): {
        data_quality_job_output_config: value,
      },
      '#withDataQualityJobOutputConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataQualityJobOutputConfigMixin(value): {
        data_quality_job_output_config+: value,
      },
      data_quality_job_output_config+:
        {
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            data_quality_job_output_config+: {
              kms_key_id: value,
            },
          },
          '#withMonitoringOutputs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMonitoringOutputs(value): {
            data_quality_job_output_config+: {
              monitoring_outputs: value,
            },
          },
          '#withMonitoringOutputsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMonitoringOutputsMixin(value): {
            data_quality_job_output_config+: {
              monitoring_outputs+: value,
            },
          },
          monitoring_outputs+:
            {
              '#withS3Output': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withS3Output(value): {
                data_quality_job_output_config+: {
                  monitoring_outputs+: {
                    s3_output: value,
                  },
                },
              },
              '#withS3OutputMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withS3OutputMixin(value): {
                data_quality_job_output_config+: {
                  monitoring_outputs+: {
                    s3_output+: value,
                  },
                },
              },
              s3_output+:
                {
                  '#withLocalPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLocalPath(value): {
                    data_quality_job_output_config+: {
                      monitoring_outputs+: {
                        s3_output+: {
                          local_path: value,
                        },
                      },
                    },
                  },
                  '#withS3UploadMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3UploadMode(value): {
                    data_quality_job_output_config+: {
                      monitoring_outputs+: {
                        s3_output+: {
                          s3_upload_mode: value,
                        },
                      },
                    },
                  },
                  '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3Uri(value): {
                    data_quality_job_output_config+: {
                      monitoring_outputs+: {
                        s3_output+: {
                          s3_uri: value,
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withJobResources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withJobResources(value): {
        job_resources: value,
      },
      '#withJobResourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withJobResourcesMixin(value): {
        job_resources+: value,
      },
      job_resources+:
        {
          '#withClusterConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withClusterConfig(value): {
            job_resources+: {
              cluster_config: value,
            },
          },
          '#withClusterConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withClusterConfigMixin(value): {
            job_resources+: {
              cluster_config+: value,
            },
          },
          cluster_config+:
            {
              '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstanceCount(value): {
                job_resources+: {
                  cluster_config+: {
                    instance_count: value,
                  },
                },
              },
              '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInstanceType(value): {
                job_resources+: {
                  cluster_config+: {
                    instance_type: value,
                  },
                },
              },
              '#withVolumeKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVolumeKmsKeyId(value): {
                job_resources+: {
                  cluster_config+: {
                    volume_kms_key_id: value,
                  },
                },
              },
              '#withVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withVolumeSizeInGb(value): {
                job_resources+: {
                  cluster_config+: {
                    volume_size_in_gb: value,
                  },
                },
              },
            },
        },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNetworkConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withNetworkConfig(value): {
        network_config: value,
      },
      '#withNetworkConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withNetworkConfigMixin(value): {
        network_config+: value,
      },
      network_config+:
        {
          '#withEnableInterContainerTrafficEncryption': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableInterContainerTrafficEncryption(value=true): {
            network_config+: {
              enable_inter_container_traffic_encryption: value,
            },
          },
          '#withEnableNetworkIsolation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableNetworkIsolation(value=true): {
            network_config+: {
              enable_network_isolation: value,
            },
          },
          '#withVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfig(value): {
            network_config+: {
              vpc_config: value,
            },
          },
          '#withVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfigMixin(value): {
            network_config+: {
              vpc_config+: value,
            },
          },
          vpc_config+:
            {
              '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIds(value): {
                network_config+: {
                  vpc_config+: {
                    security_group_ids:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIdsMixin(value): {
                network_config+: {
                  vpc_config+: {
                    security_group_ids+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnets(value): {
                network_config+: {
                  vpc_config+: {
                    subnets:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnetsMixin(value): {
                network_config+: {
                  vpc_config+: {
                    subnets+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withStoppingCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withStoppingCondition(value): {
        stopping_condition: value,
      },
      '#withStoppingConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withStoppingConditionMixin(value): {
        stopping_condition+: value,
      },
      stopping_condition+:
        {
          '#withMaxRuntimeInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxRuntimeInSeconds(value): {
            stopping_condition+: {
              max_runtime_in_seconds: value,
            },
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_device:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'device', type: 'object' }, { default: null, enums: null, name: 'device_fleet_name', type: 'string' }], help: '' } },
      new(tf_resource_key, device, device_fleet_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDevice(device)
        + self.withDeviceFleetName(device_fleet_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_device+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentVersion(value): {
        agent_version: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDevice(value): {
        device: value,
      },
      '#withDeviceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDeviceMixin(value): {
        device+: value,
      },
      device+:
        {
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            device+: {
              description: value,
            },
          },
          '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceName(value): {
            device+: {
              device_name: value,
            },
          },
          '#withIotThingName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIotThingName(value): {
            device+: {
              iot_thing_name: value,
            },
          },
        },
      '#withDeviceFleetName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeviceFleetName(value): {
        device_fleet_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_sagemaker_device_fleet:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'device_fleet_name', type: 'string' }, { default: null, enums: null, name: 'output_config', type: 'object' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, device_fleet_name, output_config, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withDeviceFleetName(device_fleet_name)
        + self.withOutputConfig(output_config)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_device_fleet+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDeviceFleetName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeviceFleetName(value): {
        device_fleet_name: value,
      },
      '#withEnableIotRoleAlias': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableIotRoleAlias(value=true): {
        enable_iot_role_alias: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIotRoleAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIotRoleAlias(value): {
        iot_role_alias: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withOutputConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOutputConfig(value): {
        output_config: value,
      },
      '#withOutputConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOutputConfigMixin(value): {
        output_config+: value,
      },
      output_config+:
        {
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            output_config+: {
              kms_key_id: value,
            },
          },
          '#withS3OutputLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3OutputLocation(value): {
            output_config+: {
              s3_output_location: value,
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_domain:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'auth_mode', type: 'string' }, { default: null, enums: null, name: 'default_user_settings', type: 'object' }, { default: null, enums: null, name: 'domain_name', type: 'string' }, { default: null, enums: null, name: 'subnet_ids', type: 'array' }, { default: null, enums: null, name: 'vpc_id', type: 'string' }], help: '' } },
      new(tf_resource_key, auth_mode, default_user_settings, domain_name, subnet_ids, vpc_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withAuthMode(auth_mode)
        + self.withDefaultUserSettings(default_user_settings)
        + self.withDomainName(domain_name)
        + self.withSubnetIds(subnet_ids)
        + self.withVpcId(vpc_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_domain+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAppNetworkAccessType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppNetworkAccessType(value): {
        app_network_access_type: value,
      },
      '#withAppSecurityGroupManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppSecurityGroupManagement(value): {
        app_security_group_management: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAuthMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAuthMode(value): {
        auth_mode: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultSpaceSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDefaultSpaceSettings(value): {
        default_space_settings: value,
      },
      '#withDefaultSpaceSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDefaultSpaceSettingsMixin(value): {
        default_space_settings+: value,
      },
      default_space_settings+:
        {
          '#withCustomFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystemConfig(value): {
            default_space_settings+: {
              custom_file_system_config:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withCustomFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystemConfigMixin(value): {
            default_space_settings+: {
              custom_file_system_config+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          custom_file_system_config+:
            {
              '#': { help: '', name: 'custom_file_system_config' },
              '#withEfsFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEfsFileSystemConfig(value): {
                efs_file_system_config: value,
              },
              '#withEfsFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEfsFileSystemConfigMixin(value): {
                efs_file_system_config+: value,
              },
              efs_file_system_config+:
                {
                  '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withFileSystemId(value): {
                    efs_file_system_config+: {
                      file_system_id: value,
                    },
                  },
                  '#withFileSystemPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withFileSystemPath(value): {
                    efs_file_system_config+: {
                      file_system_path: value,
                    },
                  },
                },
            },
          '#withCustomPosixUserConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCustomPosixUserConfig(value): {
            default_space_settings+: {
              custom_posix_user_config: value,
            },
          },
          '#withCustomPosixUserConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCustomPosixUserConfigMixin(value): {
            default_space_settings+: {
              custom_posix_user_config+: value,
            },
          },
          custom_posix_user_config+:
            {
              '#withGid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withGid(value): {
                default_space_settings+: {
                  custom_posix_user_config+: {
                    gid: value,
                  },
                },
              },
              '#withUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withUid(value): {
                default_space_settings+: {
                  custom_posix_user_config+: {
                    uid: value,
                  },
                },
              },
            },
          '#withExecutionRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExecutionRole(value): {
            default_space_settings+: {
              execution_role: value,
            },
          },
          '#withJupyterLabAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettings(value): {
            default_space_settings+: {
              jupyter_lab_app_settings: value,
            },
          },
          '#withJupyterLabAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettingsMixin(value): {
            default_space_settings+: {
              jupyter_lab_app_settings+: value,
            },
          },
          jupyter_lab_app_settings+:
            {
              '#withAppLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagement(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management: value,
                  },
                },
              },
              '#withAppLifecycleManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagementMixin(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management+: value,
                  },
                },
              },
              app_lifecycle_management+:
                {
                  '#withIdleSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettings(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings: value,
                        },
                      },
                    },
                  },
                  '#withIdleSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettingsMixin(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings+: value,
                        },
                      },
                    },
                  },
                  idle_settings+:
                    {
                      '#withIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withIdleTimeoutInMinutes(value): {
                        default_space_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLifecycleManagement(value): {
                        default_space_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                lifecycle_management: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMaxIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxIdleTimeoutInMinutes(value): {
                        default_space_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                max_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMinIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMinIdleTimeoutInMinutes(value): {
                        default_space_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                min_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withBuiltInLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBuiltInLifecycleConfigArn(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    built_in_lifecycle_config_arn: value,
                  },
                },
              },
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withEmrSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrSettings(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    emr_settings: value,
                  },
                },
              },
              '#withEmrSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrSettingsMixin(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    emr_settings+: value,
                  },
                },
              },
              emr_settings+:
                {
                  '#withAssumableRoleArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAssumableRoleArns(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          assumable_role_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withAssumableRoleArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAssumableRoleArnsMixin(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          assumable_role_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withExecutionRoleArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExecutionRoleArns(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          execution_role_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withExecutionRoleArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExecutionRoleArnsMixin(value): {
                    default_space_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          execution_role_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                default_space_settings+: {
                  jupyter_lab_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withJupyterServerAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettings(value): {
            default_space_settings+: {
              jupyter_server_app_settings: value,
            },
          },
          '#withJupyterServerAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettingsMixin(value): {
            default_space_settings+: {
              jupyter_server_app_settings+: value,
            },
          },
          jupyter_server_app_settings+:
            {
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                default_space_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                default_space_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_space_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_space_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                default_space_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                default_space_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withKernelGatewayAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettings(value): {
            default_space_settings+: {
              kernel_gateway_app_settings: value,
            },
          },
          '#withKernelGatewayAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettingsMixin(value): {
            default_space_settings+: {
              kernel_gateway_app_settings+: value,
            },
          },
          kernel_gateway_app_settings+:
            {
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                default_space_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                default_space_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_space_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_space_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                default_space_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                default_space_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroups(value): {
            default_space_settings+: {
              security_groups:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupsMixin(value): {
            default_space_settings+: {
              security_groups+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSpaceStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettings(value): {
            default_space_settings+: {
              space_storage_settings: value,
            },
          },
          '#withSpaceStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettingsMixin(value): {
            default_space_settings+: {
              space_storage_settings+: value,
            },
          },
          space_storage_settings+:
            {
              '#withDefaultEbsStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultEbsStorageSettings(value): {
                default_space_settings+: {
                  space_storage_settings+: {
                    default_ebs_storage_settings: value,
                  },
                },
              },
              '#withDefaultEbsStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultEbsStorageSettingsMixin(value): {
                default_space_settings+: {
                  space_storage_settings+: {
                    default_ebs_storage_settings+: value,
                  },
                },
              },
              default_ebs_storage_settings+:
                {
                  '#withDefaultEbsVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDefaultEbsVolumeSizeInGb(value): {
                    default_space_settings+: {
                      space_storage_settings+: {
                        default_ebs_storage_settings+: {
                          default_ebs_volume_size_in_gb: value,
                        },
                      },
                    },
                  },
                  '#withMaximumEbsVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaximumEbsVolumeSizeInGb(value): {
                    default_space_settings+: {
                      space_storage_settings+: {
                        default_ebs_storage_settings+: {
                          maximum_ebs_volume_size_in_gb: value,
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withDefaultUserSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDefaultUserSettings(value): {
        default_user_settings: value,
      },
      '#withDefaultUserSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDefaultUserSettingsMixin(value): {
        default_user_settings+: value,
      },
      default_user_settings+:
        {
          '#withAutoMountHomeEfs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAutoMountHomeEfs(value): {
            default_user_settings+: {
              auto_mount_home_efs: value,
            },
          },
          '#withCanvasAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCanvasAppSettings(value): {
            default_user_settings+: {
              canvas_app_settings: value,
            },
          },
          '#withCanvasAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCanvasAppSettingsMixin(value): {
            default_user_settings+: {
              canvas_app_settings+: value,
            },
          },
          canvas_app_settings+:
            {
              '#withDirectDeploySettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDirectDeploySettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    direct_deploy_settings: value,
                  },
                },
              },
              '#withDirectDeploySettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDirectDeploySettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    direct_deploy_settings+: value,
                  },
                },
              },
              direct_deploy_settings+:
                {
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        direct_deploy_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withEmrServerlessSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrServerlessSettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    emr_serverless_settings: value,
                  },
                },
              },
              '#withEmrServerlessSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrServerlessSettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    emr_serverless_settings+: value,
                  },
                },
              },
              emr_serverless_settings+:
                {
                  '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withExecutionRoleArn(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        emr_serverless_settings+: {
                          execution_role_arn: value,
                        },
                      },
                    },
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        emr_serverless_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withGenerativeAiSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withGenerativeAiSettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    generative_ai_settings: value,
                  },
                },
              },
              '#withGenerativeAiSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withGenerativeAiSettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    generative_ai_settings+: value,
                  },
                },
              },
              generative_ai_settings+:
                {
                  '#withAmazonBedrockRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAmazonBedrockRoleArn(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        generative_ai_settings+: {
                          amazon_bedrock_role_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withIdentityProviderOauthSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIdentityProviderOauthSettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    identity_provider_oauth_settings:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withIdentityProviderOauthSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIdentityProviderOauthSettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    identity_provider_oauth_settings+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              identity_provider_oauth_settings+:
                {
                  '#': { help: '', name: 'identity_provider_oauth_settings' },
                  '#withDataSourceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDataSourceName(value): {
                    data_source_name: value,
                  },
                  '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSecretArn(value): {
                    secret_arn: value,
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    status: value,
                  },
                },
              '#withKendraSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withKendraSettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    kendra_settings: value,
                  },
                },
              },
              '#withKendraSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withKendraSettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    kendra_settings+: value,
                  },
                },
              },
              kendra_settings+:
                {
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        kendra_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withModelRegisterSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withModelRegisterSettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    model_register_settings: value,
                  },
                },
              },
              '#withModelRegisterSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withModelRegisterSettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    model_register_settings+: value,
                  },
                },
              },
              model_register_settings+:
                {
                  '#withCrossAccountModelRegisterRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCrossAccountModelRegisterRoleArn(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        model_register_settings+: {
                          cross_account_model_register_role_arn: value,
                        },
                      },
                    },
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        model_register_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withTimeSeriesForecastingSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeSeriesForecastingSettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    time_series_forecasting_settings: value,
                  },
                },
              },
              '#withTimeSeriesForecastingSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeSeriesForecastingSettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    time_series_forecasting_settings+: value,
                  },
                },
              },
              time_series_forecasting_settings+:
                {
                  '#withAmazonForecastRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAmazonForecastRoleArn(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        time_series_forecasting_settings+: {
                          amazon_forecast_role_arn: value,
                        },
                      },
                    },
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        time_series_forecasting_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withWorkspaceSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withWorkspaceSettings(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    workspace_settings: value,
                  },
                },
              },
              '#withWorkspaceSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withWorkspaceSettingsMixin(value): {
                default_user_settings+: {
                  canvas_app_settings+: {
                    workspace_settings+: value,
                  },
                },
              },
              workspace_settings+:
                {
                  '#withS3ArtifactPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3ArtifactPath(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        workspace_settings+: {
                          s3_artifact_path: value,
                        },
                      },
                    },
                  },
                  '#withS3KmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3KmsKeyId(value): {
                    default_user_settings+: {
                      canvas_app_settings+: {
                        workspace_settings+: {
                          s3_kms_key_id: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withCodeEditorAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCodeEditorAppSettings(value): {
            default_user_settings+: {
              code_editor_app_settings: value,
            },
          },
          '#withCodeEditorAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCodeEditorAppSettingsMixin(value): {
            default_user_settings+: {
              code_editor_app_settings+: value,
            },
          },
          code_editor_app_settings+:
            {
              '#withAppLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagement(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    app_lifecycle_management: value,
                  },
                },
              },
              '#withAppLifecycleManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagementMixin(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    app_lifecycle_management+: value,
                  },
                },
              },
              app_lifecycle_management+:
                {
                  '#withIdleSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettings(value): {
                    default_user_settings+: {
                      code_editor_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings: value,
                        },
                      },
                    },
                  },
                  '#withIdleSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettingsMixin(value): {
                    default_user_settings+: {
                      code_editor_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings+: value,
                        },
                      },
                    },
                  },
                  idle_settings+:
                    {
                      '#withIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withIdleTimeoutInMinutes(value): {
                        default_user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLifecycleManagement(value): {
                        default_user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                lifecycle_management: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMaxIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxIdleTimeoutInMinutes(value): {
                        default_user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                max_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMinIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMinIdleTimeoutInMinutes(value): {
                        default_user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                min_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withBuiltInLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBuiltInLifecycleConfigArn(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    built_in_lifecycle_config_arn: value,
                  },
                },
              },
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                default_user_settings+: {
                  code_editor_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withCustomFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystemConfig(value): {
            default_user_settings+: {
              custom_file_system_config:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withCustomFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystemConfigMixin(value): {
            default_user_settings+: {
              custom_file_system_config+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          custom_file_system_config+:
            {
              '#': { help: '', name: 'custom_file_system_config' },
              '#withEfsFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEfsFileSystemConfig(value): {
                efs_file_system_config: value,
              },
              '#withEfsFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEfsFileSystemConfigMixin(value): {
                efs_file_system_config+: value,
              },
              efs_file_system_config+:
                {
                  '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withFileSystemId(value): {
                    efs_file_system_config+: {
                      file_system_id: value,
                    },
                  },
                  '#withFileSystemPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withFileSystemPath(value): {
                    efs_file_system_config+: {
                      file_system_path: value,
                    },
                  },
                },
            },
          '#withCustomPosixUserConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCustomPosixUserConfig(value): {
            default_user_settings+: {
              custom_posix_user_config: value,
            },
          },
          '#withCustomPosixUserConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCustomPosixUserConfigMixin(value): {
            default_user_settings+: {
              custom_posix_user_config+: value,
            },
          },
          custom_posix_user_config+:
            {
              '#withGid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withGid(value): {
                default_user_settings+: {
                  custom_posix_user_config+: {
                    gid: value,
                  },
                },
              },
              '#withUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withUid(value): {
                default_user_settings+: {
                  custom_posix_user_config+: {
                    uid: value,
                  },
                },
              },
            },
          '#withDefaultLandingUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDefaultLandingUri(value): {
            default_user_settings+: {
              default_landing_uri: value,
            },
          },
          '#withExecutionRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExecutionRole(value): {
            default_user_settings+: {
              execution_role: value,
            },
          },
          '#withJupyterLabAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettings(value): {
            default_user_settings+: {
              jupyter_lab_app_settings: value,
            },
          },
          '#withJupyterLabAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettingsMixin(value): {
            default_user_settings+: {
              jupyter_lab_app_settings+: value,
            },
          },
          jupyter_lab_app_settings+:
            {
              '#withAppLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagement(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management: value,
                  },
                },
              },
              '#withAppLifecycleManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagementMixin(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management+: value,
                  },
                },
              },
              app_lifecycle_management+:
                {
                  '#withIdleSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettings(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings: value,
                        },
                      },
                    },
                  },
                  '#withIdleSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettingsMixin(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings+: value,
                        },
                      },
                    },
                  },
                  idle_settings+:
                    {
                      '#withIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withIdleTimeoutInMinutes(value): {
                        default_user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLifecycleManagement(value): {
                        default_user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                lifecycle_management: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMaxIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxIdleTimeoutInMinutes(value): {
                        default_user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                max_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMinIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMinIdleTimeoutInMinutes(value): {
                        default_user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                min_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withBuiltInLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBuiltInLifecycleConfigArn(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    built_in_lifecycle_config_arn: value,
                  },
                },
              },
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withEmrSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrSettings(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    emr_settings: value,
                  },
                },
              },
              '#withEmrSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrSettingsMixin(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    emr_settings+: value,
                  },
                },
              },
              emr_settings+:
                {
                  '#withAssumableRoleArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAssumableRoleArns(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          assumable_role_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withAssumableRoleArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAssumableRoleArnsMixin(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          assumable_role_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withExecutionRoleArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExecutionRoleArns(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          execution_role_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withExecutionRoleArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExecutionRoleArnsMixin(value): {
                    default_user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          execution_role_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                default_user_settings+: {
                  jupyter_lab_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withJupyterServerAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettings(value): {
            default_user_settings+: {
              jupyter_server_app_settings: value,
            },
          },
          '#withJupyterServerAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettingsMixin(value): {
            default_user_settings+: {
              jupyter_server_app_settings+: value,
            },
          },
          jupyter_server_app_settings+:
            {
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                default_user_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                default_user_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_user_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_user_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                default_user_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                default_user_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withKernelGatewayAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettings(value): {
            default_user_settings+: {
              kernel_gateway_app_settings: value,
            },
          },
          '#withKernelGatewayAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettingsMixin(value): {
            default_user_settings+: {
              kernel_gateway_app_settings+: value,
            },
          },
          kernel_gateway_app_settings+:
            {
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                default_user_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                default_user_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_user_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_user_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                default_user_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                default_user_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withRSessionAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRSessionAppSettings(value): {
            default_user_settings+: {
              r_session_app_settings: value,
            },
          },
          '#withRSessionAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRSessionAppSettingsMixin(value): {
            default_user_settings+: {
              r_session_app_settings+: value,
            },
          },
          r_session_app_settings+:
            {
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                default_user_settings+: {
                  r_session_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                default_user_settings+: {
                  r_session_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_user_settings+: {
                  r_session_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_user_settings+: {
                  r_session_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withRStudioServerProAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRStudioServerProAppSettings(value): {
            default_user_settings+: {
              r_studio_server_pro_app_settings: value,
            },
          },
          '#withRStudioServerProAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRStudioServerProAppSettingsMixin(value): {
            default_user_settings+: {
              r_studio_server_pro_app_settings+: value,
            },
          },
          r_studio_server_pro_app_settings+:
            {
              '#withAccessStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAccessStatus(value): {
                default_user_settings+: {
                  r_studio_server_pro_app_settings+: {
                    access_status: value,
                  },
                },
              },
              '#withUserGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserGroup(value): {
                default_user_settings+: {
                  r_studio_server_pro_app_settings+: {
                    user_group: value,
                  },
                },
              },
            },
          '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroups(value): {
            default_user_settings+: {
              security_groups:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupsMixin(value): {
            default_user_settings+: {
              security_groups+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSharingSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSharingSettings(value): {
            default_user_settings+: {
              sharing_settings: value,
            },
          },
          '#withSharingSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSharingSettingsMixin(value): {
            default_user_settings+: {
              sharing_settings+: value,
            },
          },
          sharing_settings+:
            {
              '#withNotebookOutputOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNotebookOutputOption(value): {
                default_user_settings+: {
                  sharing_settings+: {
                    notebook_output_option: value,
                  },
                },
              },
              '#withS3KmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3KmsKeyId(value): {
                default_user_settings+: {
                  sharing_settings+: {
                    s3_kms_key_id: value,
                  },
                },
              },
              '#withS3OutputPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3OutputPath(value): {
                default_user_settings+: {
                  sharing_settings+: {
                    s3_output_path: value,
                  },
                },
              },
            },
          '#withSpaceStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettings(value): {
            default_user_settings+: {
              space_storage_settings: value,
            },
          },
          '#withSpaceStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettingsMixin(value): {
            default_user_settings+: {
              space_storage_settings+: value,
            },
          },
          space_storage_settings+:
            {
              '#withDefaultEbsStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultEbsStorageSettings(value): {
                default_user_settings+: {
                  space_storage_settings+: {
                    default_ebs_storage_settings: value,
                  },
                },
              },
              '#withDefaultEbsStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultEbsStorageSettingsMixin(value): {
                default_user_settings+: {
                  space_storage_settings+: {
                    default_ebs_storage_settings+: value,
                  },
                },
              },
              default_ebs_storage_settings+:
                {
                  '#withDefaultEbsVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDefaultEbsVolumeSizeInGb(value): {
                    default_user_settings+: {
                      space_storage_settings+: {
                        default_ebs_storage_settings+: {
                          default_ebs_volume_size_in_gb: value,
                        },
                      },
                    },
                  },
                  '#withMaximumEbsVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaximumEbsVolumeSizeInGb(value): {
                    default_user_settings+: {
                      space_storage_settings+: {
                        default_ebs_storage_settings+: {
                          maximum_ebs_volume_size_in_gb: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withStudioWebPortal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStudioWebPortal(value): {
            default_user_settings+: {
              studio_web_portal: value,
            },
          },
          '#withStudioWebPortalSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStudioWebPortalSettings(value): {
            default_user_settings+: {
              studio_web_portal_settings: value,
            },
          },
          '#withStudioWebPortalSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStudioWebPortalSettingsMixin(value): {
            default_user_settings+: {
              studio_web_portal_settings+: value,
            },
          },
          studio_web_portal_settings+:
            {
              '#withHiddenAppTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenAppTypes(value): {
                default_user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_app_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenAppTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenAppTypesMixin(value): {
                default_user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_app_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenInstanceTypes(value): {
                default_user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_instance_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenInstanceTypesMixin(value): {
                default_user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_instance_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenMlTools': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenMlTools(value): {
                default_user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_ml_tools:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenMlToolsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenMlToolsMixin(value): {
                default_user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_ml_tools+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withTensorBoardAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTensorBoardAppSettings(value): {
            default_user_settings+: {
              tensor_board_app_settings: value,
            },
          },
          '#withTensorBoardAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTensorBoardAppSettingsMixin(value): {
            default_user_settings+: {
              tensor_board_app_settings+: value,
            },
          },
          tensor_board_app_settings+:
            {
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                default_user_settings+: {
                  tensor_board_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                default_user_settings+: {
                  tensor_board_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    default_user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    default_user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    default_user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    default_user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    default_user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomainName(value): {
        domain_name: value,
      },
      '#withDomainSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDomainSettings(value): {
        domain_settings: value,
      },
      '#withDomainSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDomainSettingsMixin(value): {
        domain_settings+: value,
      },
      domain_settings+:
        {
          '#withDockerSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDockerSettings(value): {
            domain_settings+: {
              docker_settings: value,
            },
          },
          '#withDockerSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDockerSettingsMixin(value): {
            domain_settings+: {
              docker_settings+: value,
            },
          },
          docker_settings+:
            {
              '#withEnableDockerAccess': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnableDockerAccess(value): {
                domain_settings+: {
                  docker_settings+: {
                    enable_docker_access: value,
                  },
                },
              },
              '#withVpcOnlyTrustedAccounts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVpcOnlyTrustedAccounts(value): {
                domain_settings+: {
                  docker_settings+: {
                    vpc_only_trusted_accounts:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withVpcOnlyTrustedAccountsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVpcOnlyTrustedAccountsMixin(value): {
                domain_settings+: {
                  docker_settings+: {
                    vpc_only_trusted_accounts+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withExecutionRoleIdentityConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExecutionRoleIdentityConfig(value): {
            domain_settings+: {
              execution_role_identity_config: value,
            },
          },
          '#withRStudioServerProDomainSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRStudioServerProDomainSettings(value): {
            domain_settings+: {
              r_studio_server_pro_domain_settings: value,
            },
          },
          '#withRStudioServerProDomainSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRStudioServerProDomainSettingsMixin(value): {
            domain_settings+: {
              r_studio_server_pro_domain_settings+: value,
            },
          },
          r_studio_server_pro_domain_settings+:
            {
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                domain_settings+: {
                  r_studio_server_pro_domain_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                domain_settings+: {
                  r_studio_server_pro_domain_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    domain_settings+: {
                      r_studio_server_pro_domain_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    domain_settings+: {
                      r_studio_server_pro_domain_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    domain_settings+: {
                      r_studio_server_pro_domain_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    domain_settings+: {
                      r_studio_server_pro_domain_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    domain_settings+: {
                      r_studio_server_pro_domain_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withDomainExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDomainExecutionRoleArn(value): {
                domain_settings+: {
                  r_studio_server_pro_domain_settings+: {
                    domain_execution_role_arn: value,
                  },
                },
              },
              '#withRStudioConnectUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRStudioConnectUrl(value): {
                domain_settings+: {
                  r_studio_server_pro_domain_settings+: {
                    r_studio_connect_url: value,
                  },
                },
              },
              '#withRStudioPackageManagerUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRStudioPackageManagerUrl(value): {
                domain_settings+: {
                  r_studio_server_pro_domain_settings+: {
                    r_studio_package_manager_url: value,
                  },
                },
              },
            },
          '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIds(value): {
            domain_settings+: {
              security_group_ids:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIdsMixin(value): {
            domain_settings+: {
              security_group_ids+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withHomeEfsFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHomeEfsFileSystemId(value): {
        home_efs_file_system_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRetentionPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRetentionPolicy(value): {
        retention_policy: value,
      },
      '#withRetentionPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRetentionPolicyMixin(value): {
        retention_policy+: value,
      },
      retention_policy+:
        {
          '#withHomeEfsFileSystem': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHomeEfsFileSystem(value): {
            retention_policy+: {
              home_efs_file_system: value,
            },
          },
        },
      '#withSecurityGroupIdForDomainBoundary': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSecurityGroupIdForDomainBoundary(value): {
        security_group_id_for_domain_boundary: value,
      },
      '#withSingleSignOnApplicationArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSingleSignOnApplicationArn(value): {
        single_sign_on_application_arn: value,
      },
      '#withSingleSignOnManagedApplicationInstanceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSingleSignOnManagedApplicationInstanceId(value): {
        single_sign_on_managed_application_instance_id: value,
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTagPropagation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTagPropagation(value): {
        tag_propagation: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUrl(value): {
        url: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
    },
  aws_sagemaker_endpoint:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'endpoint_config_name', type: 'string' }], help: '' } },
      new(tf_resource_key, endpoint_config_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withEndpointConfigName(endpoint_config_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_endpoint+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeploymentConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDeploymentConfig(value): {
        deployment_config: value,
      },
      '#withDeploymentConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDeploymentConfigMixin(value): {
        deployment_config+: value,
      },
      deployment_config+:
        {
          '#withAutoRollbackConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAutoRollbackConfiguration(value): {
            deployment_config+: {
              auto_rollback_configuration: value,
            },
          },
          '#withAutoRollbackConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAutoRollbackConfigurationMixin(value): {
            deployment_config+: {
              auto_rollback_configuration+: value,
            },
          },
          auto_rollback_configuration+:
            {
              '#withAlarms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarms(value): {
                deployment_config+: {
                  auto_rollback_configuration+: {
                    alarms:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withAlarmsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAlarmsMixin(value): {
                deployment_config+: {
                  auto_rollback_configuration+: {
                    alarms+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              alarms+:
                {
                  '#': { help: '', name: 'alarms' },
                  '#withAlarmName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAlarmName(value): {
                    alarm_name: value,
                  },
                },
            },
          '#withBlueGreenUpdatePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBlueGreenUpdatePolicy(value): {
            deployment_config+: {
              blue_green_update_policy: value,
            },
          },
          '#withBlueGreenUpdatePolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withBlueGreenUpdatePolicyMixin(value): {
            deployment_config+: {
              blue_green_update_policy+: value,
            },
          },
          blue_green_update_policy+:
            {
              '#withMaximumExecutionTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumExecutionTimeoutInSeconds(value): {
                deployment_config+: {
                  blue_green_update_policy+: {
                    maximum_execution_timeout_in_seconds: value,
                  },
                },
              },
              '#withTerminationWaitInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withTerminationWaitInSeconds(value): {
                deployment_config+: {
                  blue_green_update_policy+: {
                    termination_wait_in_seconds: value,
                  },
                },
              },
              '#withTrafficRoutingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTrafficRoutingConfiguration(value): {
                deployment_config+: {
                  blue_green_update_policy+: {
                    traffic_routing_configuration: value,
                  },
                },
              },
              '#withTrafficRoutingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTrafficRoutingConfigurationMixin(value): {
                deployment_config+: {
                  blue_green_update_policy+: {
                    traffic_routing_configuration+: value,
                  },
                },
              },
              traffic_routing_configuration+:
                {
                  '#withCanarySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCanarySize(value): {
                    deployment_config+: {
                      blue_green_update_policy+: {
                        traffic_routing_configuration+: {
                          canary_size: value,
                        },
                      },
                    },
                  },
                  '#withCanarySizeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withCanarySizeMixin(value): {
                    deployment_config+: {
                      blue_green_update_policy+: {
                        traffic_routing_configuration+: {
                          canary_size+: value,
                        },
                      },
                    },
                  },
                  canary_size+:
                    {
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        deployment_config+: {
                          blue_green_update_policy+: {
                            traffic_routing_configuration+: {
                              canary_size+: {
                                type: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        deployment_config+: {
                          blue_green_update_policy+: {
                            traffic_routing_configuration+: {
                              canary_size+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withLinearStepSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withLinearStepSize(value): {
                    deployment_config+: {
                      blue_green_update_policy+: {
                        traffic_routing_configuration+: {
                          linear_step_size: value,
                        },
                      },
                    },
                  },
                  '#withLinearStepSizeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withLinearStepSizeMixin(value): {
                    deployment_config+: {
                      blue_green_update_policy+: {
                        traffic_routing_configuration+: {
                          linear_step_size+: value,
                        },
                      },
                    },
                  },
                  linear_step_size+:
                    {
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        deployment_config+: {
                          blue_green_update_policy+: {
                            traffic_routing_configuration+: {
                              linear_step_size+: {
                                type: value,
                              },
                            },
                          },
                        },
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        deployment_config+: {
                          blue_green_update_policy+: {
                            traffic_routing_configuration+: {
                              linear_step_size+: {
                                value: value,
                              },
                            },
                          },
                        },
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    deployment_config+: {
                      blue_green_update_policy+: {
                        traffic_routing_configuration+: {
                          type: value,
                        },
                      },
                    },
                  },
                  '#withWaitIntervalInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withWaitIntervalInSeconds(value): {
                    deployment_config+: {
                      blue_green_update_policy+: {
                        traffic_routing_configuration+: {
                          wait_interval_in_seconds: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withRollingUpdatePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRollingUpdatePolicy(value): {
            deployment_config+: {
              rolling_update_policy: value,
            },
          },
          '#withRollingUpdatePolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRollingUpdatePolicyMixin(value): {
            deployment_config+: {
              rolling_update_policy+: value,
            },
          },
          rolling_update_policy+:
            {
              '#withMaximumBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMaximumBatchSize(value): {
                deployment_config+: {
                  rolling_update_policy+: {
                    maximum_batch_size: value,
                  },
                },
              },
              '#withMaximumBatchSizeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withMaximumBatchSizeMixin(value): {
                deployment_config+: {
                  rolling_update_policy+: {
                    maximum_batch_size+: value,
                  },
                },
              },
              maximum_batch_size+:
                {
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    deployment_config+: {
                      rolling_update_policy+: {
                        maximum_batch_size+: {
                          type: value,
                        },
                      },
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    deployment_config+: {
                      rolling_update_policy+: {
                        maximum_batch_size+: {
                          value: value,
                        },
                      },
                    },
                  },
                },
              '#withMaximumExecutionTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaximumExecutionTimeoutInSeconds(value): {
                deployment_config+: {
                  rolling_update_policy+: {
                    maximum_execution_timeout_in_seconds: value,
                  },
                },
              },
              '#withRollbackMaximumBatchSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRollbackMaximumBatchSize(value): {
                deployment_config+: {
                  rolling_update_policy+: {
                    rollback_maximum_batch_size: value,
                  },
                },
              },
              '#withRollbackMaximumBatchSizeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRollbackMaximumBatchSizeMixin(value): {
                deployment_config+: {
                  rolling_update_policy+: {
                    rollback_maximum_batch_size+: value,
                  },
                },
              },
              rollback_maximum_batch_size+:
                {
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    deployment_config+: {
                      rolling_update_policy+: {
                        rollback_maximum_batch_size+: {
                          type: value,
                        },
                      },
                    },
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withValue(value): {
                    deployment_config+: {
                      rolling_update_policy+: {
                        rollback_maximum_batch_size+: {
                          value: value,
                        },
                      },
                    },
                  },
                },
              '#withWaitIntervalInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withWaitIntervalInSeconds(value): {
                deployment_config+: {
                  rolling_update_policy+: {
                    wait_interval_in_seconds: value,
                  },
                },
              },
            },
        },
      '#withEndpointConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndpointConfigName(value): {
        endpoint_config_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_endpoint_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'production_variants', type: 'array' }], help: '' } },
      new(tf_resource_key, production_variants):
        self.withTfResourceKey(tf_resource_key)
        + self.withProductionVariants(production_variants),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_endpoint_configuration+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAsyncInferenceConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAsyncInferenceConfig(value): {
        async_inference_config: value,
      },
      '#withAsyncInferenceConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAsyncInferenceConfigMixin(value): {
        async_inference_config+: value,
      },
      async_inference_config+:
        {
          '#withClientConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withClientConfig(value): {
            async_inference_config+: {
              client_config: value,
            },
          },
          '#withClientConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withClientConfigMixin(value): {
            async_inference_config+: {
              client_config+: value,
            },
          },
          client_config+:
            {
              '#withMaxConcurrentInvocationsPerInstance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaxConcurrentInvocationsPerInstance(value): {
                async_inference_config+: {
                  client_config+: {
                    max_concurrent_invocations_per_instance: value,
                  },
                },
              },
            },
          '#withOutputConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withOutputConfig(value): {
            async_inference_config+: {
              output_config: value,
            },
          },
          '#withOutputConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withOutputConfigMixin(value): {
            async_inference_config+: {
              output_config+: value,
            },
          },
          output_config+:
            {
              '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyId(value): {
                async_inference_config+: {
                  output_config+: {
                    kms_key_id: value,
                  },
                },
              },
              '#withNotificationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withNotificationConfig(value): {
                async_inference_config+: {
                  output_config+: {
                    notification_config: value,
                  },
                },
              },
              '#withNotificationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withNotificationConfigMixin(value): {
                async_inference_config+: {
                  output_config+: {
                    notification_config+: value,
                  },
                },
              },
              notification_config+:
                {
                  '#withErrorTopic': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withErrorTopic(value): {
                    async_inference_config+: {
                      output_config+: {
                        notification_config+: {
                          error_topic: value,
                        },
                      },
                    },
                  },
                  '#withIncludeInferenceResponseIn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIncludeInferenceResponseIn(value): {
                    async_inference_config+: {
                      output_config+: {
                        notification_config+: {
                          include_inference_response_in:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withIncludeInferenceResponseInMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIncludeInferenceResponseInMixin(value): {
                    async_inference_config+: {
                      output_config+: {
                        notification_config+: {
                          include_inference_response_in+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withSuccessTopic': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSuccessTopic(value): {
                    async_inference_config+: {
                      output_config+: {
                        notification_config+: {
                          success_topic: value,
                        },
                      },
                    },
                  },
                },
              '#withS3FailurePath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3FailurePath(value): {
                async_inference_config+: {
                  output_config+: {
                    s3_failure_path: value,
                  },
                },
              },
              '#withS3OutputPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3OutputPath(value): {
                async_inference_config+: {
                  output_config+: {
                    s3_output_path: value,
                  },
                },
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDataCaptureConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataCaptureConfig(value): {
        data_capture_config: value,
      },
      '#withDataCaptureConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataCaptureConfigMixin(value): {
        data_capture_config+: value,
      },
      data_capture_config+:
        {
          '#withCaptureContentTypeHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCaptureContentTypeHeader(value): {
            data_capture_config+: {
              capture_content_type_header: value,
            },
          },
          '#withCaptureContentTypeHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCaptureContentTypeHeaderMixin(value): {
            data_capture_config+: {
              capture_content_type_header+: value,
            },
          },
          capture_content_type_header+:
            {
              '#withCsvContentTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCsvContentTypes(value): {
                data_capture_config+: {
                  capture_content_type_header+: {
                    csv_content_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCsvContentTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCsvContentTypesMixin(value): {
                data_capture_config+: {
                  capture_content_type_header+: {
                    csv_content_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withJsonContentTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withJsonContentTypes(value): {
                data_capture_config+: {
                  capture_content_type_header+: {
                    json_content_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withJsonContentTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withJsonContentTypesMixin(value): {
                data_capture_config+: {
                  capture_content_type_header+: {
                    json_content_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withCaptureOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCaptureOptions(value): {
            data_capture_config+: {
              capture_options:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withCaptureOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCaptureOptionsMixin(value): {
            data_capture_config+: {
              capture_options+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          capture_options+:
            {
              '#': { help: '', name: 'capture_options' },
              '#withCaptureMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCaptureMode(value): {
                capture_mode: value,
              },
            },
          '#withDestinationS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDestinationS3Uri(value): {
            data_capture_config+: {
              destination_s3_uri: value,
            },
          },
          '#withEnableCapture': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableCapture(value=true): {
            data_capture_config+: {
              enable_capture: value,
            },
          },
          '#withInitialSamplingPercentage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withInitialSamplingPercentage(value): {
            data_capture_config+: {
              initial_sampling_percentage: value,
            },
          },
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            data_capture_config+: {
              kms_key_id: value,
            },
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyArn(value): {
        kms_key_arn: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNamePrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNamePrefix(value): {
        name_prefix: value,
      },
      '#withProductionVariants': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProductionVariants(value): {
        production_variants:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProductionVariantsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProductionVariantsMixin(value): {
        production_variants+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      production_variants+:
        {
          '#': { help: '', name: 'production_variants' },
          '#withAcceleratorType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAcceleratorType(value): {
            accelerator_type: value,
          },
          '#withContainerStartupHealthCheckTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withContainerStartupHealthCheckTimeoutInSeconds(value): {
            container_startup_health_check_timeout_in_seconds: value,
          },
          '#withCoreDumpConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCoreDumpConfig(value): {
            core_dump_config: value,
          },
          '#withCoreDumpConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCoreDumpConfigMixin(value): {
            core_dump_config+: value,
          },
          core_dump_config+:
            {
              '#withDestinationS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationS3Uri(value): {
                core_dump_config+: {
                  destination_s3_uri: value,
                },
              },
              '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyId(value): {
                core_dump_config+: {
                  kms_key_id: value,
                },
              },
            },
          '#withEnableSsmAccess': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableSsmAccess(value=true): {
            enable_ssm_access: value,
          },
          '#withInferenceAmiVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInferenceAmiVersion(value): {
            inference_ami_version: value,
          },
          '#withInitialInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withInitialInstanceCount(value): {
            initial_instance_count: value,
          },
          '#withInitialVariantWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withInitialVariantWeight(value): {
            initial_variant_weight: value,
          },
          '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInstanceType(value): {
            instance_type: value,
          },
          '#withManagedInstanceScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withManagedInstanceScaling(value): {
            managed_instance_scaling: value,
          },
          '#withManagedInstanceScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withManagedInstanceScalingMixin(value): {
            managed_instance_scaling+: value,
          },
          managed_instance_scaling+:
            {
              '#withMaxInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaxInstanceCount(value): {
                managed_instance_scaling+: {
                  max_instance_count: value,
                },
              },
              '#withMinInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMinInstanceCount(value): {
                managed_instance_scaling+: {
                  min_instance_count: value,
                },
              },
              '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStatus(value): {
                managed_instance_scaling+: {
                  status: value,
                },
              },
            },
          '#withModelDataDownloadTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withModelDataDownloadTimeoutInSeconds(value): {
            model_data_download_timeout_in_seconds: value,
          },
          '#withModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelName(value): {
            model_name: value,
          },
          '#withRoutingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRoutingConfig(value): {
            routing_config:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRoutingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRoutingConfigMixin(value): {
            routing_config+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          routing_config+:
            {
              '#': { help: '', name: 'routing_config' },
              '#withRoutingStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoutingStrategy(value): {
                routing_strategy: value,
              },
            },
          '#withServerlessConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServerlessConfig(value): {
            serverless_config: value,
          },
          '#withServerlessConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServerlessConfigMixin(value): {
            serverless_config+: value,
          },
          serverless_config+:
            {
              '#withMaxConcurrency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaxConcurrency(value): {
                serverless_config+: {
                  max_concurrency: value,
                },
              },
              '#withMemorySizeInMb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemorySizeInMb(value): {
                serverless_config+: {
                  memory_size_in_mb: value,
                },
              },
              '#withProvisionedConcurrency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withProvisionedConcurrency(value): {
                serverless_config+: {
                  provisioned_concurrency: value,
                },
              },
            },
          '#withVariantName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVariantName(value): {
            variant_name: value,
          },
          '#withVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withVolumeSizeInGb(value): {
            volume_size_in_gb: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withShadowProductionVariants': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withShadowProductionVariants(value): {
        shadow_production_variants:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withShadowProductionVariantsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withShadowProductionVariantsMixin(value): {
        shadow_production_variants+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      shadow_production_variants+:
        {
          '#': { help: '', name: 'shadow_production_variants' },
          '#withAcceleratorType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAcceleratorType(value): {
            accelerator_type: value,
          },
          '#withContainerStartupHealthCheckTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withContainerStartupHealthCheckTimeoutInSeconds(value): {
            container_startup_health_check_timeout_in_seconds: value,
          },
          '#withCoreDumpConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCoreDumpConfig(value): {
            core_dump_config: value,
          },
          '#withCoreDumpConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCoreDumpConfigMixin(value): {
            core_dump_config+: value,
          },
          core_dump_config+:
            {
              '#withDestinationS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationS3Uri(value): {
                core_dump_config+: {
                  destination_s3_uri: value,
                },
              },
              '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyId(value): {
                core_dump_config+: {
                  kms_key_id: value,
                },
              },
            },
          '#withEnableSsmAccess': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableSsmAccess(value=true): {
            enable_ssm_access: value,
          },
          '#withInferenceAmiVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInferenceAmiVersion(value): {
            inference_ami_version: value,
          },
          '#withInitialInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withInitialInstanceCount(value): {
            initial_instance_count: value,
          },
          '#withInitialVariantWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withInitialVariantWeight(value): {
            initial_variant_weight: value,
          },
          '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInstanceType(value): {
            instance_type: value,
          },
          '#withManagedInstanceScaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withManagedInstanceScaling(value): {
            managed_instance_scaling: value,
          },
          '#withManagedInstanceScalingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withManagedInstanceScalingMixin(value): {
            managed_instance_scaling+: value,
          },
          managed_instance_scaling+:
            {
              '#withMaxInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaxInstanceCount(value): {
                managed_instance_scaling+: {
                  max_instance_count: value,
                },
              },
              '#withMinInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMinInstanceCount(value): {
                managed_instance_scaling+: {
                  min_instance_count: value,
                },
              },
              '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStatus(value): {
                managed_instance_scaling+: {
                  status: value,
                },
              },
            },
          '#withModelDataDownloadTimeoutInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withModelDataDownloadTimeoutInSeconds(value): {
            model_data_download_timeout_in_seconds: value,
          },
          '#withModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelName(value): {
            model_name: value,
          },
          '#withRoutingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRoutingConfig(value): {
            routing_config:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRoutingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRoutingConfigMixin(value): {
            routing_config+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          routing_config+:
            {
              '#': { help: '', name: 'routing_config' },
              '#withRoutingStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoutingStrategy(value): {
                routing_strategy: value,
              },
            },
          '#withServerlessConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServerlessConfig(value): {
            serverless_config: value,
          },
          '#withServerlessConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withServerlessConfigMixin(value): {
            serverless_config+: value,
          },
          serverless_config+:
            {
              '#withMaxConcurrency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMaxConcurrency(value): {
                serverless_config+: {
                  max_concurrency: value,
                },
              },
              '#withMemorySizeInMb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemorySizeInMb(value): {
                serverless_config+: {
                  memory_size_in_mb: value,
                },
              },
              '#withProvisionedConcurrency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withProvisionedConcurrency(value): {
                serverless_config+: {
                  provisioned_concurrency: value,
                },
              },
            },
          '#withVariantName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVariantName(value): {
            variant_name: value,
          },
          '#withVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withVolumeSizeInGb(value): {
            volume_size_in_gb: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_feature_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'event_time_feature_name', type: 'string' }, { default: null, enums: null, name: 'feature_definition', type: 'array' }, { default: null, enums: null, name: 'feature_group_name', type: 'string' }, { default: null, enums: null, name: 'record_identifier_feature_name', type: 'string' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, event_time_feature_name, feature_definition, feature_group_name, record_identifier_feature_name, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withEventTimeFeatureName(event_time_feature_name)
        + self.withFeatureDefinition(feature_definition)
        + self.withFeatureGroupName(feature_group_name)
        + self.withRecordIdentifierFeatureName(record_identifier_feature_name)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_feature_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEventTimeFeatureName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEventTimeFeatureName(value): {
        event_time_feature_name: value,
      },
      '#withFeatureDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFeatureDefinition(value): {
        feature_definition:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFeatureDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFeatureDefinitionMixin(value): {
        feature_definition+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      feature_definition+:
        {
          '#': { help: '', name: 'feature_definition' },
          '#withCollectionConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCollectionConfig(value): {
            collection_config: value,
          },
          '#withCollectionConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCollectionConfigMixin(value): {
            collection_config+: value,
          },
          collection_config+:
            {
              '#withVectorConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVectorConfig(value): {
                collection_config+: {
                  vector_config: value,
                },
              },
              '#withVectorConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withVectorConfigMixin(value): {
                collection_config+: {
                  vector_config+: value,
                },
              },
              vector_config+:
                {
                  '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDimension(value): {
                    collection_config+: {
                      vector_config+: {
                        dimension: value,
                      },
                    },
                  },
                },
            },
          '#withCollectionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCollectionType(value): {
            collection_type: value,
          },
          '#withFeatureName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFeatureName(value): {
            feature_name: value,
          },
          '#withFeatureType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFeatureType(value): {
            feature_type: value,
          },
        },
      '#withFeatureGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFeatureGroupName(value): {
        feature_group_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withOfflineStoreConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOfflineStoreConfig(value): {
        offline_store_config: value,
      },
      '#withOfflineStoreConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOfflineStoreConfigMixin(value): {
        offline_store_config+: value,
      },
      offline_store_config+:
        {
          '#withDataCatalogConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDataCatalogConfig(value): {
            offline_store_config+: {
              data_catalog_config: value,
            },
          },
          '#withDataCatalogConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDataCatalogConfigMixin(value): {
            offline_store_config+: {
              data_catalog_config+: value,
            },
          },
          data_catalog_config+:
            {
              '#withCatalog': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCatalog(value): {
                offline_store_config+: {
                  data_catalog_config+: {
                    catalog: value,
                  },
                },
              },
              '#withDatabase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatabase(value): {
                offline_store_config+: {
                  data_catalog_config+: {
                    database: value,
                  },
                },
              },
              '#withTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTableName(value): {
                offline_store_config+: {
                  data_catalog_config+: {
                    table_name: value,
                  },
                },
              },
            },
          '#withDisableGlueTableCreation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDisableGlueTableCreation(value=true): {
            offline_store_config+: {
              disable_glue_table_creation: value,
            },
          },
          '#withS3StorageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3StorageConfig(value): {
            offline_store_config+: {
              s3_storage_config: value,
            },
          },
          '#withS3StorageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3StorageConfigMixin(value): {
            offline_store_config+: {
              s3_storage_config+: value,
            },
          },
          s3_storage_config+:
            {
              '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyId(value): {
                offline_store_config+: {
                  s3_storage_config+: {
                    kms_key_id: value,
                  },
                },
              },
              '#withResolvedOutputS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResolvedOutputS3Uri(value): {
                offline_store_config+: {
                  s3_storage_config+: {
                    resolved_output_s3_uri: value,
                  },
                },
              },
              '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3Uri(value): {
                offline_store_config+: {
                  s3_storage_config+: {
                    s3_uri: value,
                  },
                },
              },
            },
          '#withTableFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTableFormat(value): {
            offline_store_config+: {
              table_format: value,
            },
          },
        },
      '#withOnlineStoreConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOnlineStoreConfig(value): {
        online_store_config: value,
      },
      '#withOnlineStoreConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOnlineStoreConfigMixin(value): {
        online_store_config+: value,
      },
      online_store_config+:
        {
          '#withEnableOnlineStore': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableOnlineStore(value=true): {
            online_store_config+: {
              enable_online_store: value,
            },
          },
          '#withSecurityConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecurityConfig(value): {
            online_store_config+: {
              security_config: value,
            },
          },
          '#withSecurityConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecurityConfigMixin(value): {
            online_store_config+: {
              security_config+: value,
            },
          },
          security_config+:
            {
              '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyId(value): {
                online_store_config+: {
                  security_config+: {
                    kms_key_id: value,
                  },
                },
              },
            },
          '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStorageType(value): {
            online_store_config+: {
              storage_type: value,
            },
          },
          '#withTtlDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTtlDuration(value): {
            online_store_config+: {
              ttl_duration: value,
            },
          },
          '#withTtlDurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTtlDurationMixin(value): {
            online_store_config+: {
              ttl_duration+: value,
            },
          },
          ttl_duration+:
            {
              '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUnit(value): {
                online_store_config+: {
                  ttl_duration+: {
                    unit: value,
                  },
                },
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withValue(value): {
                online_store_config+: {
                  ttl_duration+: {
                    value: value,
                  },
                },
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRecordIdentifierFeatureName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRecordIdentifierFeatureName(value): {
        record_identifier_feature_name: value,
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withThroughputConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withThroughputConfig(value): {
        throughput_config: value,
      },
      '#withThroughputConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withThroughputConfigMixin(value): {
        throughput_config+: value,
      },
      throughput_config+:
        {
          '#withProvisionedReadCapacityUnits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withProvisionedReadCapacityUnits(value): {
            throughput_config+: {
              provisioned_read_capacity_units: value,
            },
          },
          '#withProvisionedWriteCapacityUnits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withProvisionedWriteCapacityUnits(value): {
            throughput_config+: {
              provisioned_write_capacity_units: value,
            },
          },
          '#withThroughputMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withThroughputMode(value): {
            throughput_config+: {
              throughput_mode: value,
            },
          },
        },
    },
  aws_sagemaker_flow_definition:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'flow_definition_name', type: 'string' }, { default: null, enums: null, name: 'human_loop_config', type: 'object' }, { default: null, enums: null, name: 'output_config', type: 'object' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, flow_definition_name, human_loop_config, output_config, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withFlowDefinitionName(flow_definition_name)
        + self.withHumanLoopConfig(human_loop_config)
        + self.withOutputConfig(output_config)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_flow_definition+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFlowDefinitionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFlowDefinitionName(value): {
        flow_definition_name: value,
      },
      '#withHumanLoopActivationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHumanLoopActivationConfig(value): {
        human_loop_activation_config: value,
      },
      '#withHumanLoopActivationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHumanLoopActivationConfigMixin(value): {
        human_loop_activation_config+: value,
      },
      human_loop_activation_config+:
        {
          '#withHumanLoopActivationConditionsConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHumanLoopActivationConditionsConfig(value): {
            human_loop_activation_config+: {
              human_loop_activation_conditions_config: value,
            },
          },
          '#withHumanLoopActivationConditionsConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHumanLoopActivationConditionsConfigMixin(value): {
            human_loop_activation_config+: {
              human_loop_activation_conditions_config+: value,
            },
          },
          human_loop_activation_conditions_config+:
            {
              '#withHumanLoopActivationConditions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withHumanLoopActivationConditions(value): {
                human_loop_activation_config+: {
                  human_loop_activation_conditions_config+: {
                    human_loop_activation_conditions: value,
                  },
                },
              },
            },
        },
      '#withHumanLoopConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHumanLoopConfig(value): {
        human_loop_config: value,
      },
      '#withHumanLoopConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHumanLoopConfigMixin(value): {
        human_loop_config+: value,
      },
      human_loop_config+:
        {
          '#withHumanTaskUiArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHumanTaskUiArn(value): {
            human_loop_config+: {
              human_task_ui_arn: value,
            },
          },
          '#withPublicWorkforceTaskPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPublicWorkforceTaskPrice(value): {
            human_loop_config+: {
              public_workforce_task_price: value,
            },
          },
          '#withPublicWorkforceTaskPriceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPublicWorkforceTaskPriceMixin(value): {
            human_loop_config+: {
              public_workforce_task_price+: value,
            },
          },
          public_workforce_task_price+:
            {
              '#withAmountInUsd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAmountInUsd(value): {
                human_loop_config+: {
                  public_workforce_task_price+: {
                    amount_in_usd: value,
                  },
                },
              },
              '#withAmountInUsdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAmountInUsdMixin(value): {
                human_loop_config+: {
                  public_workforce_task_price+: {
                    amount_in_usd+: value,
                  },
                },
              },
              amount_in_usd+:
                {
                  '#withCents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withCents(value): {
                    human_loop_config+: {
                      public_workforce_task_price+: {
                        amount_in_usd+: {
                          cents: value,
                        },
                      },
                    },
                  },
                  '#withDollars': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDollars(value): {
                    human_loop_config+: {
                      public_workforce_task_price+: {
                        amount_in_usd+: {
                          dollars: value,
                        },
                      },
                    },
                  },
                  '#withTenthFractionsOfACent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTenthFractionsOfACent(value): {
                    human_loop_config+: {
                      public_workforce_task_price+: {
                        amount_in_usd+: {
                          tenth_fractions_of_a_cent: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withTaskAvailabilityLifetimeInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTaskAvailabilityLifetimeInSeconds(value): {
            human_loop_config+: {
              task_availability_lifetime_in_seconds: value,
            },
          },
          '#withTaskCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTaskCount(value): {
            human_loop_config+: {
              task_count: value,
            },
          },
          '#withTaskDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTaskDescription(value): {
            human_loop_config+: {
              task_description: value,
            },
          },
          '#withTaskKeywords': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTaskKeywords(value): {
            human_loop_config+: {
              task_keywords:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withTaskKeywordsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTaskKeywordsMixin(value): {
            human_loop_config+: {
              task_keywords+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withTaskTimeLimitInSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTaskTimeLimitInSeconds(value): {
            human_loop_config+: {
              task_time_limit_in_seconds: value,
            },
          },
          '#withTaskTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTaskTitle(value): {
            human_loop_config+: {
              task_title: value,
            },
          },
          '#withWorkteamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withWorkteamArn(value): {
            human_loop_config+: {
              workteam_arn: value,
            },
          },
        },
      '#withHumanLoopRequestSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHumanLoopRequestSource(value): {
        human_loop_request_source: value,
      },
      '#withHumanLoopRequestSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHumanLoopRequestSourceMixin(value): {
        human_loop_request_source+: value,
      },
      human_loop_request_source+:
        {
          '#withAwsManagedHumanLoopRequestSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAwsManagedHumanLoopRequestSource(value): {
            human_loop_request_source+: {
              aws_managed_human_loop_request_source: value,
            },
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withOutputConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOutputConfig(value): {
        output_config: value,
      },
      '#withOutputConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOutputConfigMixin(value): {
        output_config+: value,
      },
      output_config+:
        {
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            output_config+: {
              kms_key_id: value,
            },
          },
          '#withS3OutputPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3OutputPath(value): {
            output_config+: {
              s3_output_path: value,
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_hub:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'hub_description', type: 'string' }, { default: null, enums: null, name: 'hub_name', type: 'string' }], help: '' } },
      new(tf_resource_key, hub_description, hub_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withHubDescription(hub_description)
        + self.withHubName(hub_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_hub+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHubDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHubDescription(value): {
        hub_description: value,
      },
      '#withHubDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHubDisplayName(value): {
        hub_display_name: value,
      },
      '#withHubName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHubName(value): {
        hub_name: value,
      },
      '#withHubSearchKeywords': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHubSearchKeywords(value): {
        hub_search_keywords:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHubSearchKeywordsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHubSearchKeywordsMixin(value): {
        hub_search_keywords+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withS3StorageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withS3StorageConfig(value): {
        s3_storage_config: value,
      },
      '#withS3StorageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withS3StorageConfigMixin(value): {
        s3_storage_config+: value,
      },
      s3_storage_config+:
        {
          '#withS3OutputPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3OutputPath(value): {
            s3_storage_config+: {
              s3_output_path: value,
            },
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_human_task_ui:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'human_task_ui_name', type: 'string' }, { default: null, enums: null, name: 'ui_template', type: 'object' }], help: '' } },
      new(tf_resource_key, human_task_ui_name, ui_template):
        self.withTfResourceKey(tf_resource_key)
        + self.withHumanTaskUiName(human_task_ui_name)
        + self.withUiTemplate(ui_template),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_human_task_ui+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHumanTaskUiName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHumanTaskUiName(value): {
        human_task_ui_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUiTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withUiTemplate(value): {
        ui_template: value,
      },
      '#withUiTemplateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withUiTemplateMixin(value): {
        ui_template+: value,
      },
      ui_template+:
        {
          '#withContent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withContent(value): {
            ui_template+: {
              content: value,
            },
          },
          '#withContentSha256': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withContentSha256(value): {
            ui_template+: {
              content_sha256: value,
            },
          },
          '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUrl(value): {
            ui_template+: {
              url: value,
            },
          },
        },
    },
  aws_sagemaker_image:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'image_name', type: 'string' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, image_name, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withImageName(image_name)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_image+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDisplayName(value): {
        display_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageName(value): {
        image_name: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_image_version:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'base_image', type: 'string' }, { default: null, enums: null, name: 'image_name', type: 'string' }], help: '' } },
      new(tf_resource_key, base_image, image_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withBaseImage(base_image)
        + self.withImageName(image_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_image_version+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBaseImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBaseImage(value): {
        base_image: value,
      },
      '#withContainerImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContainerImage(value): {
        container_image: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageArn(value): {
        image_arn: value,
      },
      '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageName(value): {
        image_name: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
    },
  aws_sagemaker_mlflow_tracking_server:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'artifact_store_uri', type: 'string' }, { default: null, enums: null, name: 'role_arn', type: 'string' }, { default: null, enums: null, name: 'tracking_server_name', type: 'string' }], help: '' } },
      new(tf_resource_key, artifact_store_uri, role_arn, tracking_server_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withArtifactStoreUri(artifact_store_uri)
        + self.withRoleArn(role_arn)
        + self.withTrackingServerName(tracking_server_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_mlflow_tracking_server+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withArtifactStoreUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArtifactStoreUri(value): {
        artifact_store_uri: value,
      },
      '#withAutomaticModelRegistration': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutomaticModelRegistration(value=true): {
        automatic_model_registration: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMlflowVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMlflowVersion(value): {
        mlflow_version: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTrackingServerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTrackingServerName(value): {
        tracking_server_name: value,
      },
      '#withTrackingServerSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTrackingServerSize(value): {
        tracking_server_size: value,
      },
      '#withTrackingServerUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTrackingServerUrl(value): {
        tracking_server_url: value,
      },
      '#withWeeklyMaintenanceWindowStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWeeklyMaintenanceWindowStart(value): {
        weekly_maintenance_window_start: value,
      },
    },
  aws_sagemaker_model:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'execution_role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, execution_role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withExecutionRoleArn(execution_role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_model+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withContainer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withContainer(value): {
        container:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withContainerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withContainerMixin(value): {
        container+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      container+:
        {
          '#': { help: '', name: 'container' },
          '#withContainerHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withContainerHostname(value): {
            container_hostname: value,
          },
          '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEnvironment(value): {
            environment: value,
          },
          '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEnvironmentMixin(value): {
            environment+: value,
          },
          '#withImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withImage(value): {
            image: value,
          },
          '#withImageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withImageConfig(value): {
            image_config: value,
          },
          '#withImageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withImageConfigMixin(value): {
            image_config+: value,
          },
          image_config+:
            {
              '#withRepositoryAccessMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRepositoryAccessMode(value): {
                image_config+: {
                  repository_access_mode: value,
                },
              },
              '#withRepositoryAuthConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRepositoryAuthConfig(value): {
                image_config+: {
                  repository_auth_config: value,
                },
              },
              '#withRepositoryAuthConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRepositoryAuthConfigMixin(value): {
                image_config+: {
                  repository_auth_config+: value,
                },
              },
              repository_auth_config+:
                {
                  '#withRepositoryCredentialsProviderArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryCredentialsProviderArn(value): {
                    image_config+: {
                      repository_auth_config+: {
                        repository_credentials_provider_arn: value,
                      },
                    },
                  },
                },
            },
          '#withInferenceSpecificationName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInferenceSpecificationName(value): {
            inference_specification_name: value,
          },
          '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMode(value): {
            mode: value,
          },
          '#withModelDataSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withModelDataSource(value): {
            model_data_source: value,
          },
          '#withModelDataSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withModelDataSourceMixin(value): {
            model_data_source+: value,
          },
          model_data_source+:
            {
              '#withS3DataSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3DataSource(value): {
                model_data_source+: {
                  s3_data_source:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withS3DataSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3DataSourceMixin(value): {
                model_data_source+: {
                  s3_data_source+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              s3_data_source+:
                {
                  '#': { help: '', name: 's3_data_source' },
                  '#withCompressionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCompressionType(value): {
                    compression_type: value,
                  },
                  '#withModelAccessConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withModelAccessConfig(value): {
                    model_access_config: value,
                  },
                  '#withModelAccessConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withModelAccessConfigMixin(value): {
                    model_access_config+: value,
                  },
                  model_access_config+:
                    {
                      '#withAcceptEula': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAcceptEula(value=true): {
                        model_access_config+: {
                          accept_eula: value,
                        },
                      },
                    },
                  '#withS3DataType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3DataType(value): {
                    s3_data_type: value,
                  },
                  '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3Uri(value): {
                    s3_uri: value,
                  },
                },
            },
          '#withModelDataUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelDataUrl(value): {
            model_data_url: value,
          },
          '#withModelPackageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelPackageName(value): {
            model_package_name: value,
          },
          '#withMultiModelConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMultiModelConfig(value): {
            multi_model_config: value,
          },
          '#withMultiModelConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMultiModelConfigMixin(value): {
            multi_model_config+: value,
          },
          multi_model_config+:
            {
              '#withModelCacheSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withModelCacheSetting(value): {
                multi_model_config+: {
                  model_cache_setting: value,
                },
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnableNetworkIsolation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableNetworkIsolation(value=true): {
        enable_network_isolation: value,
      },
      '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExecutionRoleArn(value): {
        execution_role_arn: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInferenceExecutionConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withInferenceExecutionConfig(value): {
        inference_execution_config: value,
      },
      '#withInferenceExecutionConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withInferenceExecutionConfigMixin(value): {
        inference_execution_config+: value,
      },
      inference_execution_config+:
        {
          '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMode(value): {
            inference_execution_config+: {
              mode: value,
            },
          },
        },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withPrimaryContainer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPrimaryContainer(value): {
        primary_container: value,
      },
      '#withPrimaryContainerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPrimaryContainerMixin(value): {
        primary_container+: value,
      },
      primary_container+:
        {
          '#withContainerHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withContainerHostname(value): {
            primary_container+: {
              container_hostname: value,
            },
          },
          '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEnvironment(value): {
            primary_container+: {
              environment: value,
            },
          },
          '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withEnvironmentMixin(value): {
            primary_container+: {
              environment+: value,
            },
          },
          '#withImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withImage(value): {
            primary_container+: {
              image: value,
            },
          },
          '#withImageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withImageConfig(value): {
            primary_container+: {
              image_config: value,
            },
          },
          '#withImageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withImageConfigMixin(value): {
            primary_container+: {
              image_config+: value,
            },
          },
          image_config+:
            {
              '#withRepositoryAccessMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRepositoryAccessMode(value): {
                primary_container+: {
                  image_config+: {
                    repository_access_mode: value,
                  },
                },
              },
              '#withRepositoryAuthConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRepositoryAuthConfig(value): {
                primary_container+: {
                  image_config+: {
                    repository_auth_config: value,
                  },
                },
              },
              '#withRepositoryAuthConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRepositoryAuthConfigMixin(value): {
                primary_container+: {
                  image_config+: {
                    repository_auth_config+: value,
                  },
                },
              },
              repository_auth_config+:
                {
                  '#withRepositoryCredentialsProviderArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryCredentialsProviderArn(value): {
                    primary_container+: {
                      image_config+: {
                        repository_auth_config+: {
                          repository_credentials_provider_arn: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withInferenceSpecificationName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInferenceSpecificationName(value): {
            primary_container+: {
              inference_specification_name: value,
            },
          },
          '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMode(value): {
            primary_container+: {
              mode: value,
            },
          },
          '#withModelDataSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withModelDataSource(value): {
            primary_container+: {
              model_data_source: value,
            },
          },
          '#withModelDataSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withModelDataSourceMixin(value): {
            primary_container+: {
              model_data_source+: value,
            },
          },
          model_data_source+:
            {
              '#withS3DataSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3DataSource(value): {
                primary_container+: {
                  model_data_source+: {
                    s3_data_source:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withS3DataSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3DataSourceMixin(value): {
                primary_container+: {
                  model_data_source+: {
                    s3_data_source+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              s3_data_source+:
                {
                  '#': { help: '', name: 's3_data_source' },
                  '#withCompressionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCompressionType(value): {
                    compression_type: value,
                  },
                  '#withModelAccessConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withModelAccessConfig(value): {
                    model_access_config: value,
                  },
                  '#withModelAccessConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withModelAccessConfigMixin(value): {
                    model_access_config+: value,
                  },
                  model_access_config+:
                    {
                      '#withAcceptEula': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAcceptEula(value=true): {
                        model_access_config+: {
                          accept_eula: value,
                        },
                      },
                    },
                  '#withS3DataType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3DataType(value): {
                    s3_data_type: value,
                  },
                  '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3Uri(value): {
                    s3_uri: value,
                  },
                },
            },
          '#withModelDataUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelDataUrl(value): {
            primary_container+: {
              model_data_url: value,
            },
          },
          '#withModelPackageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelPackageName(value): {
            primary_container+: {
              model_package_name: value,
            },
          },
          '#withMultiModelConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMultiModelConfig(value): {
            primary_container+: {
              multi_model_config: value,
            },
          },
          '#withMultiModelConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMultiModelConfigMixin(value): {
            primary_container+: {
              multi_model_config+: value,
            },
          },
          multi_model_config+:
            {
              '#withModelCacheSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withModelCacheSetting(value): {
                primary_container+: {
                  multi_model_config+: {
                    model_cache_setting: value,
                  },
                },
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withVpcConfig(value): {
        vpc_config: value,
      },
      '#withVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withVpcConfigMixin(value): {
        vpc_config+: value,
      },
      vpc_config+:
        {
          '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIds(value): {
            vpc_config+: {
              security_group_ids:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIdsMixin(value): {
            vpc_config+: {
              security_group_ids+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnets(value): {
            vpc_config+: {
              subnets:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetsMixin(value): {
            vpc_config+: {
              subnets+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
    },
  aws_sagemaker_model_package_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'model_package_group_name', type: 'string' }], help: '' } },
      new(tf_resource_key, model_package_group_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withModelPackageGroupName(model_package_group_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_model_package_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withModelPackageGroupDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelPackageGroupDescription(value): {
        model_package_group_description: value,
      },
      '#withModelPackageGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelPackageGroupName(value): {
        model_package_group_name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_model_package_group_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'model_package_group_name', type: 'string' }, { default: null, enums: null, name: 'resource_policy', type: 'string' }], help: '' } },
      new(tf_resource_key, model_package_group_name, resource_policy):
        self.withTfResourceKey(tf_resource_key)
        + self.withModelPackageGroupName(model_package_group_name)
        + self.withResourcePolicy(resource_policy),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_model_package_group_policy+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withModelPackageGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelPackageGroupName(value): {
        model_package_group_name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourcePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourcePolicy(value): {
        resource_policy: value,
      },
    },
  aws_sagemaker_monitoring_schedule:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'monitoring_schedule_config', type: 'object' }], help: '' } },
      new(tf_resource_key, monitoring_schedule_config):
        self.withTfResourceKey(tf_resource_key)
        + self.withMonitoringScheduleConfig(monitoring_schedule_config),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_monitoring_schedule+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMonitoringScheduleConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMonitoringScheduleConfig(value): {
        monitoring_schedule_config: value,
      },
      '#withMonitoringScheduleConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMonitoringScheduleConfigMixin(value): {
        monitoring_schedule_config+: value,
      },
      monitoring_schedule_config+:
        {
          '#withMonitoringJobDefinitionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMonitoringJobDefinitionName(value): {
            monitoring_schedule_config+: {
              monitoring_job_definition_name: value,
            },
          },
          '#withMonitoringType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMonitoringType(value): {
            monitoring_schedule_config+: {
              monitoring_type: value,
            },
          },
          '#withScheduleConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withScheduleConfig(value): {
            monitoring_schedule_config+: {
              schedule_config: value,
            },
          },
          '#withScheduleConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withScheduleConfigMixin(value): {
            monitoring_schedule_config+: {
              schedule_config+: value,
            },
          },
          schedule_config+:
            {
              '#withScheduleExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withScheduleExpression(value): {
                monitoring_schedule_config+: {
                  schedule_config+: {
                    schedule_expression: value,
                  },
                },
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_notebook_instance:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'instance_type', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'role_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, instance_type, name, role_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withInstanceType(instance_type)
        + self.withName(name)
        + self.withRoleArn(role_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_notebook_instance+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAcceleratorTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAcceleratorTypes(value): {
        accelerator_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAcceleratorTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAcceleratorTypesMixin(value): {
        accelerator_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAdditionalCodeRepositories': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdditionalCodeRepositories(value): {
        additional_code_repositories:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAdditionalCodeRepositoriesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdditionalCodeRepositoriesMixin(value): {
        additional_code_repositories+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultCodeRepository(value): {
        default_code_repository: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDirectInternetAccess': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDirectInternetAccess(value): {
        direct_internet_access: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceMetadataServiceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withInstanceMetadataServiceConfiguration(value): {
        instance_metadata_service_configuration: value,
      },
      '#withInstanceMetadataServiceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withInstanceMetadataServiceConfigurationMixin(value): {
        instance_metadata_service_configuration+: value,
      },
      instance_metadata_service_configuration+:
        {
          '#withMinimumInstanceMetadataServiceVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMinimumInstanceMetadataServiceVersion(value): {
            instance_metadata_service_configuration+: {
              minimum_instance_metadata_service_version: value,
            },
          },
        },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLifecycleConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLifecycleConfigName(value): {
        lifecycle_config_name: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkInterfaceId(value): {
        network_interface_id: value,
      },
      '#withPlatformIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatformIdentifier(value): {
        platform_identifier: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withRootAccess': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRootAccess(value): {
        root_access: value,
      },
      '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroups(value): {
        security_groups:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupsMixin(value): {
        security_groups+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSubnetId(value): {
        subnet_id: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUrl(value): {
        url: value,
      },
      '#withVolumeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withVolumeSize(value): {
        volume_size: value,
      },
    },
  aws_sagemaker_notebook_instance_lifecycle_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_notebook_instance_lifecycle_configuration+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOnCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOnCreate(value): {
        on_create: value,
      },
      '#withOnStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOnStart(value): {
        on_start: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_sagemaker_pipeline:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'pipeline_display_name', type: 'string' }, { default: null, enums: null, name: 'pipeline_name', type: 'string' }], help: '' } },
      new(tf_resource_key, pipeline_display_name, pipeline_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withPipelineDisplayName(pipeline_display_name)
        + self.withPipelineName(pipeline_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_pipeline+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withParallelismConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withParallelismConfiguration(value): {
        parallelism_configuration: value,
      },
      '#withParallelismConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withParallelismConfigurationMixin(value): {
        parallelism_configuration+: value,
      },
      parallelism_configuration+:
        {
          '#withMaxParallelExecutionSteps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxParallelExecutionSteps(value): {
            parallelism_configuration+: {
              max_parallel_execution_steps: value,
            },
          },
        },
      '#withPipelineDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPipelineDefinition(value): {
        pipeline_definition: value,
      },
      '#withPipelineDefinitionS3Location': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPipelineDefinitionS3Location(value): {
        pipeline_definition_s3_location: value,
      },
      '#withPipelineDefinitionS3LocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPipelineDefinitionS3LocationMixin(value): {
        pipeline_definition_s3_location+: value,
      },
      pipeline_definition_s3_location+:
        {
          '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucket(value): {
            pipeline_definition_s3_location+: {
              bucket: value,
            },
          },
          '#withObjectKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withObjectKey(value): {
            pipeline_definition_s3_location+: {
              object_key: value,
            },
          },
          '#withVersionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVersionId(value): {
            pipeline_definition_s3_location+: {
              version_id: value,
            },
          },
        },
      '#withPipelineDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPipelineDescription(value): {
        pipeline_description: value,
      },
      '#withPipelineDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPipelineDisplayName(value): {
        pipeline_display_name: value,
      },
      '#withPipelineName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPipelineName(value): {
        pipeline_name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_project:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'project_name', type: 'string' }, { default: null, enums: null, name: 'service_catalog_provisioning_details', type: 'object' }], help: '' } },
      new(tf_resource_key, project_name, service_catalog_provisioning_details):
        self.withTfResourceKey(tf_resource_key)
        + self.withProjectName(project_name)
        + self.withServiceCatalogProvisioningDetails(service_catalog_provisioning_details),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_project+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProjectDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProjectDescription(value): {
        project_description: value,
      },
      '#withProjectId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProjectId(value): {
        project_id: value,
      },
      '#withProjectName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProjectName(value): {
        project_name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServiceCatalogProvisioningDetails': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withServiceCatalogProvisioningDetails(value): {
        service_catalog_provisioning_details: value,
      },
      '#withServiceCatalogProvisioningDetailsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withServiceCatalogProvisioningDetailsMixin(value): {
        service_catalog_provisioning_details+: value,
      },
      service_catalog_provisioning_details+:
        {
          '#withPathId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPathId(value): {
            service_catalog_provisioning_details+: {
              path_id: value,
            },
          },
          '#withProductId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProductId(value): {
            service_catalog_provisioning_details+: {
              product_id: value,
            },
          },
          '#withProvisioningArtifactId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProvisioningArtifactId(value): {
            service_catalog_provisioning_details+: {
              provisioning_artifact_id: value,
            },
          },
          '#withProvisioningParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProvisioningParameter(value): {
            service_catalog_provisioning_details+: {
              provisioning_parameter:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withProvisioningParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProvisioningParameterMixin(value): {
            service_catalog_provisioning_details+: {
              provisioning_parameter+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          provisioning_parameter+:
            {
              '#': { help: '', name: 'provisioning_parameter' },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_servicecatalog_portfolio_status:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'status', type: 'string' }], help: '' } },
      new(tf_resource_key, status):
        self.withTfResourceKey(tf_resource_key)
        + self.withStatus(status),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_servicecatalog_portfolio_status+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
    },
  aws_sagemaker_space:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'domain_id', type: 'string' }, { default: null, enums: null, name: 'space_name', type: 'string' }], help: '' } },
      new(tf_resource_key, domain_id, space_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDomainId(domain_id)
        + self.withSpaceName(space_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_space+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomainId(value): {
        domain_id: value,
      },
      '#withHomeEfsFileSystemUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHomeEfsFileSystemUid(value): {
        home_efs_file_system_uid: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withOwnershipSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOwnershipSettings(value): {
        ownership_settings: value,
      },
      '#withOwnershipSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOwnershipSettingsMixin(value): {
        ownership_settings+: value,
      },
      ownership_settings+:
        {
          '#withOwnerUserProfileName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withOwnerUserProfileName(value): {
            ownership_settings+: {
              owner_user_profile_name: value,
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpaceDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSpaceDisplayName(value): {
        space_display_name: value,
      },
      '#withSpaceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSpaceName(value): {
        space_name: value,
      },
      '#withSpaceSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpaceSettings(value): {
        space_settings: value,
      },
      '#withSpaceSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpaceSettingsMixin(value): {
        space_settings+: value,
      },
      space_settings+:
        {
          '#withAppType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAppType(value): {
            space_settings+: {
              app_type: value,
            },
          },
          '#withCodeEditorAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCodeEditorAppSettings(value): {
            space_settings+: {
              code_editor_app_settings: value,
            },
          },
          '#withCodeEditorAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCodeEditorAppSettingsMixin(value): {
            space_settings+: {
              code_editor_app_settings+: value,
            },
          },
          code_editor_app_settings+:
            {
              '#withAppLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagement(value): {
                space_settings+: {
                  code_editor_app_settings+: {
                    app_lifecycle_management: value,
                  },
                },
              },
              '#withAppLifecycleManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagementMixin(value): {
                space_settings+: {
                  code_editor_app_settings+: {
                    app_lifecycle_management+: value,
                  },
                },
              },
              app_lifecycle_management+:
                {
                  '#withIdleSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettings(value): {
                    space_settings+: {
                      code_editor_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings: value,
                        },
                      },
                    },
                  },
                  '#withIdleSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettingsMixin(value): {
                    space_settings+: {
                      code_editor_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings+: value,
                        },
                      },
                    },
                  },
                  idle_settings+:
                    {
                      '#withIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withIdleTimeoutInMinutes(value): {
                        space_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                space_settings+: {
                  code_editor_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                space_settings+: {
                  code_editor_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    space_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    space_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    space_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    space_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    space_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withCustomFileSystem': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystem(value): {
            space_settings+: {
              custom_file_system:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withCustomFileSystemMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystemMixin(value): {
            space_settings+: {
              custom_file_system+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          custom_file_system+:
            {
              '#': { help: '', name: 'custom_file_system' },
              '#withEfsFileSystem': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEfsFileSystem(value): {
                efs_file_system: value,
              },
              '#withEfsFileSystemMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEfsFileSystemMixin(value): {
                efs_file_system+: value,
              },
              efs_file_system+:
                {
                  '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withFileSystemId(value): {
                    efs_file_system+: {
                      file_system_id: value,
                    },
                  },
                },
            },
          '#withJupyterLabAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettings(value): {
            space_settings+: {
              jupyter_lab_app_settings: value,
            },
          },
          '#withJupyterLabAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettingsMixin(value): {
            space_settings+: {
              jupyter_lab_app_settings+: value,
            },
          },
          jupyter_lab_app_settings+:
            {
              '#withAppLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagement(value): {
                space_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management: value,
                  },
                },
              },
              '#withAppLifecycleManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagementMixin(value): {
                space_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management+: value,
                  },
                },
              },
              app_lifecycle_management+:
                {
                  '#withIdleSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettings(value): {
                    space_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings: value,
                        },
                      },
                    },
                  },
                  '#withIdleSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettingsMixin(value): {
                    space_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings+: value,
                        },
                      },
                    },
                  },
                  idle_settings+:
                    {
                      '#withIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withIdleTimeoutInMinutes(value): {
                        space_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                space_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                space_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                space_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                space_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    space_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withJupyterServerAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettings(value): {
            space_settings+: {
              jupyter_server_app_settings: value,
            },
          },
          '#withJupyterServerAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettingsMixin(value): {
            space_settings+: {
              jupyter_server_app_settings+: value,
            },
          },
          jupyter_server_app_settings+:
            {
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                space_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                space_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                space_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                space_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    space_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                space_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                space_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withKernelGatewayAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettings(value): {
            space_settings+: {
              kernel_gateway_app_settings: value,
            },
          },
          '#withKernelGatewayAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettingsMixin(value): {
            space_settings+: {
              kernel_gateway_app_settings+: value,
            },
          },
          kernel_gateway_app_settings+:
            {
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                space_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                space_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                space_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                space_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    space_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                space_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                space_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withSpaceStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettings(value): {
            space_settings+: {
              space_storage_settings: value,
            },
          },
          '#withSpaceStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettingsMixin(value): {
            space_settings+: {
              space_storage_settings+: value,
            },
          },
          space_storage_settings+:
            {
              '#withEbsStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEbsStorageSettings(value): {
                space_settings+: {
                  space_storage_settings+: {
                    ebs_storage_settings: value,
                  },
                },
              },
              '#withEbsStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEbsStorageSettingsMixin(value): {
                space_settings+: {
                  space_storage_settings+: {
                    ebs_storage_settings+: value,
                  },
                },
              },
              ebs_storage_settings+:
                {
                  '#withEbsVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withEbsVolumeSizeInGb(value): {
                    space_settings+: {
                      space_storage_settings+: {
                        ebs_storage_settings+: {
                          ebs_volume_size_in_gb: value,
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withSpaceSharingSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpaceSharingSettings(value): {
        space_sharing_settings: value,
      },
      '#withSpaceSharingSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSpaceSharingSettingsMixin(value): {
        space_sharing_settings+: value,
      },
      space_sharing_settings+:
        {
          '#withSharingType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSharingType(value): {
            space_sharing_settings+: {
              sharing_type: value,
            },
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUrl(value): {
        url: value,
      },
    },
  aws_sagemaker_studio_lifecycle_config:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'studio_lifecycle_config_app_type', type: 'string' }, { default: null, enums: null, name: 'studio_lifecycle_config_content', type: 'string' }, { default: null, enums: null, name: 'studio_lifecycle_config_name', type: 'string' }], help: '' } },
      new(tf_resource_key, studio_lifecycle_config_app_type, studio_lifecycle_config_content, studio_lifecycle_config_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withStudioLifecycleConfigAppType(studio_lifecycle_config_app_type)
        + self.withStudioLifecycleConfigContent(studio_lifecycle_config_content)
        + self.withStudioLifecycleConfigName(studio_lifecycle_config_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_studio_lifecycle_config+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStudioLifecycleConfigAppType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStudioLifecycleConfigAppType(value): {
        studio_lifecycle_config_app_type: value,
      },
      '#withStudioLifecycleConfigContent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStudioLifecycleConfigContent(value): {
        studio_lifecycle_config_content: value,
      },
      '#withStudioLifecycleConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStudioLifecycleConfigName(value): {
        studio_lifecycle_config_name: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
    },
  aws_sagemaker_user_profile:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'domain_id', type: 'string' }, { default: null, enums: null, name: 'user_profile_name', type: 'string' }], help: '' } },
      new(tf_resource_key, domain_id, user_profile_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDomainId(domain_id)
        + self.withUserProfileName(user_profile_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_user_profile+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomainId(value): {
        domain_id: value,
      },
      '#withHomeEfsFileSystemUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHomeEfsFileSystemUid(value): {
        home_efs_file_system_uid: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSingleSignOnUserIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSingleSignOnUserIdentifier(value): {
        single_sign_on_user_identifier: value,
      },
      '#withSingleSignOnUserValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSingleSignOnUserValue(value): {
        single_sign_on_user_value: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withUserProfileName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserProfileName(value): {
        user_profile_name: value,
      },
      '#withUserSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withUserSettings(value): {
        user_settings: value,
      },
      '#withUserSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withUserSettingsMixin(value): {
        user_settings+: value,
      },
      user_settings+:
        {
          '#withAutoMountHomeEfs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAutoMountHomeEfs(value): {
            user_settings+: {
              auto_mount_home_efs: value,
            },
          },
          '#withCanvasAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCanvasAppSettings(value): {
            user_settings+: {
              canvas_app_settings: value,
            },
          },
          '#withCanvasAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCanvasAppSettingsMixin(value): {
            user_settings+: {
              canvas_app_settings+: value,
            },
          },
          canvas_app_settings+:
            {
              '#withDirectDeploySettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDirectDeploySettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    direct_deploy_settings: value,
                  },
                },
              },
              '#withDirectDeploySettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDirectDeploySettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    direct_deploy_settings+: value,
                  },
                },
              },
              direct_deploy_settings+:
                {
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        direct_deploy_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withEmrServerlessSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrServerlessSettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    emr_serverless_settings: value,
                  },
                },
              },
              '#withEmrServerlessSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrServerlessSettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    emr_serverless_settings+: value,
                  },
                },
              },
              emr_serverless_settings+:
                {
                  '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withExecutionRoleArn(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        emr_serverless_settings+: {
                          execution_role_arn: value,
                        },
                      },
                    },
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        emr_serverless_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withGenerativeAiSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withGenerativeAiSettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    generative_ai_settings: value,
                  },
                },
              },
              '#withGenerativeAiSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withGenerativeAiSettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    generative_ai_settings+: value,
                  },
                },
              },
              generative_ai_settings+:
                {
                  '#withAmazonBedrockRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAmazonBedrockRoleArn(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        generative_ai_settings+: {
                          amazon_bedrock_role_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withIdentityProviderOauthSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIdentityProviderOauthSettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    identity_provider_oauth_settings:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withIdentityProviderOauthSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIdentityProviderOauthSettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    identity_provider_oauth_settings+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              identity_provider_oauth_settings+:
                {
                  '#': { help: '', name: 'identity_provider_oauth_settings' },
                  '#withDataSourceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDataSourceName(value): {
                    data_source_name: value,
                  },
                  '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSecretArn(value): {
                    secret_arn: value,
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    status: value,
                  },
                },
              '#withKendraSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withKendraSettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    kendra_settings: value,
                  },
                },
              },
              '#withKendraSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withKendraSettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    kendra_settings+: value,
                  },
                },
              },
              kendra_settings+:
                {
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        kendra_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withModelRegisterSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withModelRegisterSettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    model_register_settings: value,
                  },
                },
              },
              '#withModelRegisterSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withModelRegisterSettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    model_register_settings+: value,
                  },
                },
              },
              model_register_settings+:
                {
                  '#withCrossAccountModelRegisterRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCrossAccountModelRegisterRoleArn(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        model_register_settings+: {
                          cross_account_model_register_role_arn: value,
                        },
                      },
                    },
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        model_register_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withTimeSeriesForecastingSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeSeriesForecastingSettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    time_series_forecasting_settings: value,
                  },
                },
              },
              '#withTimeSeriesForecastingSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTimeSeriesForecastingSettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    time_series_forecasting_settings+: value,
                  },
                },
              },
              time_series_forecasting_settings+:
                {
                  '#withAmazonForecastRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAmazonForecastRoleArn(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        time_series_forecasting_settings+: {
                          amazon_forecast_role_arn: value,
                        },
                      },
                    },
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        time_series_forecasting_settings+: {
                          status: value,
                        },
                      },
                    },
                  },
                },
              '#withWorkspaceSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withWorkspaceSettings(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    workspace_settings: value,
                  },
                },
              },
              '#withWorkspaceSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withWorkspaceSettingsMixin(value): {
                user_settings+: {
                  canvas_app_settings+: {
                    workspace_settings+: value,
                  },
                },
              },
              workspace_settings+:
                {
                  '#withS3ArtifactPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3ArtifactPath(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        workspace_settings+: {
                          s3_artifact_path: value,
                        },
                      },
                    },
                  },
                  '#withS3KmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withS3KmsKeyId(value): {
                    user_settings+: {
                      canvas_app_settings+: {
                        workspace_settings+: {
                          s3_kms_key_id: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withCodeEditorAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCodeEditorAppSettings(value): {
            user_settings+: {
              code_editor_app_settings: value,
            },
          },
          '#withCodeEditorAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCodeEditorAppSettingsMixin(value): {
            user_settings+: {
              code_editor_app_settings+: value,
            },
          },
          code_editor_app_settings+:
            {
              '#withAppLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagement(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    app_lifecycle_management: value,
                  },
                },
              },
              '#withAppLifecycleManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagementMixin(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    app_lifecycle_management+: value,
                  },
                },
              },
              app_lifecycle_management+:
                {
                  '#withIdleSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettings(value): {
                    user_settings+: {
                      code_editor_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings: value,
                        },
                      },
                    },
                  },
                  '#withIdleSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettingsMixin(value): {
                    user_settings+: {
                      code_editor_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings+: value,
                        },
                      },
                    },
                  },
                  idle_settings+:
                    {
                      '#withIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withIdleTimeoutInMinutes(value): {
                        user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLifecycleManagement(value): {
                        user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                lifecycle_management: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMaxIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxIdleTimeoutInMinutes(value): {
                        user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                max_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMinIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMinIdleTimeoutInMinutes(value): {
                        user_settings+: {
                          code_editor_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                min_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withBuiltInLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBuiltInLifecycleConfigArn(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    built_in_lifecycle_config_arn: value,
                  },
                },
              },
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    user_settings+: {
                      code_editor_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                user_settings+: {
                  code_editor_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withCustomFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystemConfig(value): {
            user_settings+: {
              custom_file_system_config:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withCustomFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomFileSystemConfigMixin(value): {
            user_settings+: {
              custom_file_system_config+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          custom_file_system_config+:
            {
              '#': { help: '', name: 'custom_file_system_config' },
              '#withEfsFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEfsFileSystemConfig(value): {
                efs_file_system_config:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withEfsFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEfsFileSystemConfigMixin(value): {
                efs_file_system_config+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              efs_file_system_config+:
                {
                  '#': { help: '', name: 'efs_file_system_config' },
                  '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withFileSystemId(value): {
                    file_system_id: value,
                  },
                  '#withFileSystemPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withFileSystemPath(value): {
                    file_system_path: value,
                  },
                },
            },
          '#withCustomPosixUserConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCustomPosixUserConfig(value): {
            user_settings+: {
              custom_posix_user_config: value,
            },
          },
          '#withCustomPosixUserConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCustomPosixUserConfigMixin(value): {
            user_settings+: {
              custom_posix_user_config+: value,
            },
          },
          custom_posix_user_config+:
            {
              '#withGid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withGid(value): {
                user_settings+: {
                  custom_posix_user_config+: {
                    gid: value,
                  },
                },
              },
              '#withUid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withUid(value): {
                user_settings+: {
                  custom_posix_user_config+: {
                    uid: value,
                  },
                },
              },
            },
          '#withDefaultLandingUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDefaultLandingUri(value): {
            user_settings+: {
              default_landing_uri: value,
            },
          },
          '#withExecutionRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExecutionRole(value): {
            user_settings+: {
              execution_role: value,
            },
          },
          '#withJupyterLabAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettings(value): {
            user_settings+: {
              jupyter_lab_app_settings: value,
            },
          },
          '#withJupyterLabAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterLabAppSettingsMixin(value): {
            user_settings+: {
              jupyter_lab_app_settings+: value,
            },
          },
          jupyter_lab_app_settings+:
            {
              '#withAppLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagement(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management: value,
                  },
                },
              },
              '#withAppLifecycleManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAppLifecycleManagementMixin(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    app_lifecycle_management+: value,
                  },
                },
              },
              app_lifecycle_management+:
                {
                  '#withIdleSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettings(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings: value,
                        },
                      },
                    },
                  },
                  '#withIdleSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withIdleSettingsMixin(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        app_lifecycle_management+: {
                          idle_settings+: value,
                        },
                      },
                    },
                  },
                  idle_settings+:
                    {
                      '#withIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withIdleTimeoutInMinutes(value): {
                        user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withLifecycleManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLifecycleManagement(value): {
                        user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                lifecycle_management: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMaxIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxIdleTimeoutInMinutes(value): {
                        user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                max_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                      '#withMinIdleTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMinIdleTimeoutInMinutes(value): {
                        user_settings+: {
                          jupyter_lab_app_settings+: {
                            app_lifecycle_management+: {
                              idle_settings+: {
                                min_idle_timeout_in_minutes: value,
                              },
                            },
                          },
                        },
                      },
                    },
                },
              '#withBuiltInLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBuiltInLifecycleConfigArn(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    built_in_lifecycle_config_arn: value,
                  },
                },
              },
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withEmrSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrSettings(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    emr_settings: value,
                  },
                },
              },
              '#withEmrSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withEmrSettingsMixin(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    emr_settings+: value,
                  },
                },
              },
              emr_settings+:
                {
                  '#withAssumableRoleArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAssumableRoleArns(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          assumable_role_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withAssumableRoleArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAssumableRoleArnsMixin(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          assumable_role_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withExecutionRoleArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExecutionRoleArns(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          execution_role_arns:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withExecutionRoleArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withExecutionRoleArnsMixin(value): {
                    user_settings+: {
                      jupyter_lab_app_settings+: {
                        emr_settings+: {
                          execution_role_arns+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                user_settings+: {
                  jupyter_lab_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withJupyterServerAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettings(value): {
            user_settings+: {
              jupyter_server_app_settings: value,
            },
          },
          '#withJupyterServerAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withJupyterServerAppSettingsMixin(value): {
            user_settings+: {
              jupyter_server_app_settings+: value,
            },
          },
          jupyter_server_app_settings+:
            {
              '#withCodeRepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepository(value): {
                user_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCodeRepositoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCodeRepositoryMixin(value): {
                user_settings+: {
                  jupyter_server_app_settings+: {
                    code_repository+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              code_repository+:
                {
                  '#': { help: '', name: 'code_repository' },
                  '#withRepositoryUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRepositoryUrl(value): {
                    repository_url: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                user_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                user_settings+: {
                  jupyter_server_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    user_settings+: {
                      jupyter_server_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                user_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                user_settings+: {
                  jupyter_server_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withKernelGatewayAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettings(value): {
            user_settings+: {
              kernel_gateway_app_settings: value,
            },
          },
          '#withKernelGatewayAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKernelGatewayAppSettingsMixin(value): {
            user_settings+: {
              kernel_gateway_app_settings+: value,
            },
          },
          kernel_gateway_app_settings+:
            {
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                user_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                user_settings+: {
                  kernel_gateway_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                user_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                user_settings+: {
                  kernel_gateway_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    user_settings+: {
                      kernel_gateway_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
              '#withLifecycleConfigArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArns(value): {
                user_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withLifecycleConfigArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLifecycleConfigArnsMixin(value): {
                user_settings+: {
                  kernel_gateway_app_settings+: {
                    lifecycle_config_arns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withRSessionAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRSessionAppSettings(value): {
            user_settings+: {
              r_session_app_settings: value,
            },
          },
          '#withRSessionAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRSessionAppSettingsMixin(value): {
            user_settings+: {
              r_session_app_settings+: value,
            },
          },
          r_session_app_settings+:
            {
              '#withCustomImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImage(value): {
                user_settings+: {
                  r_session_app_settings+: {
                    custom_image:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCustomImageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCustomImageMixin(value): {
                user_settings+: {
                  r_session_app_settings+: {
                    custom_image+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              custom_image+:
                {
                  '#': { help: '', name: 'custom_image' },
                  '#withAppImageConfigName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAppImageConfigName(value): {
                    app_image_config_name: value,
                  },
                  '#withImageName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImageName(value): {
                    image_name: value,
                  },
                  '#withImageVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withImageVersionNumber(value): {
                    image_version_number: value,
                  },
                },
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                user_settings+: {
                  r_session_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                user_settings+: {
                  r_session_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    user_settings+: {
                      r_session_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withRStudioServerProAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRStudioServerProAppSettings(value): {
            user_settings+: {
              r_studio_server_pro_app_settings: value,
            },
          },
          '#withRStudioServerProAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRStudioServerProAppSettingsMixin(value): {
            user_settings+: {
              r_studio_server_pro_app_settings+: value,
            },
          },
          r_studio_server_pro_app_settings+:
            {
              '#withAccessStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAccessStatus(value): {
                user_settings+: {
                  r_studio_server_pro_app_settings+: {
                    access_status: value,
                  },
                },
              },
              '#withUserGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserGroup(value): {
                user_settings+: {
                  r_studio_server_pro_app_settings+: {
                    user_group: value,
                  },
                },
              },
            },
          '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroups(value): {
            user_settings+: {
              security_groups:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupsMixin(value): {
            user_settings+: {
              security_groups+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSharingSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSharingSettings(value): {
            user_settings+: {
              sharing_settings: value,
            },
          },
          '#withSharingSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSharingSettingsMixin(value): {
            user_settings+: {
              sharing_settings+: value,
            },
          },
          sharing_settings+:
            {
              '#withNotebookOutputOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNotebookOutputOption(value): {
                user_settings+: {
                  sharing_settings+: {
                    notebook_output_option: value,
                  },
                },
              },
              '#withS3KmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3KmsKeyId(value): {
                user_settings+: {
                  sharing_settings+: {
                    s3_kms_key_id: value,
                  },
                },
              },
              '#withS3OutputPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3OutputPath(value): {
                user_settings+: {
                  sharing_settings+: {
                    s3_output_path: value,
                  },
                },
              },
            },
          '#withSpaceStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettings(value): {
            user_settings+: {
              space_storage_settings: value,
            },
          },
          '#withSpaceStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSpaceStorageSettingsMixin(value): {
            user_settings+: {
              space_storage_settings+: value,
            },
          },
          space_storage_settings+:
            {
              '#withDefaultEbsStorageSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultEbsStorageSettings(value): {
                user_settings+: {
                  space_storage_settings+: {
                    default_ebs_storage_settings: value,
                  },
                },
              },
              '#withDefaultEbsStorageSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultEbsStorageSettingsMixin(value): {
                user_settings+: {
                  space_storage_settings+: {
                    default_ebs_storage_settings+: value,
                  },
                },
              },
              default_ebs_storage_settings+:
                {
                  '#withDefaultEbsVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDefaultEbsVolumeSizeInGb(value): {
                    user_settings+: {
                      space_storage_settings+: {
                        default_ebs_storage_settings+: {
                          default_ebs_volume_size_in_gb: value,
                        },
                      },
                    },
                  },
                  '#withMaximumEbsVolumeSizeInGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaximumEbsVolumeSizeInGb(value): {
                    user_settings+: {
                      space_storage_settings+: {
                        default_ebs_storage_settings+: {
                          maximum_ebs_volume_size_in_gb: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withStudioWebPortal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStudioWebPortal(value): {
            user_settings+: {
              studio_web_portal: value,
            },
          },
          '#withStudioWebPortalSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStudioWebPortalSettings(value): {
            user_settings+: {
              studio_web_portal_settings: value,
            },
          },
          '#withStudioWebPortalSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withStudioWebPortalSettingsMixin(value): {
            user_settings+: {
              studio_web_portal_settings+: value,
            },
          },
          studio_web_portal_settings+:
            {
              '#withHiddenAppTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenAppTypes(value): {
                user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_app_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenAppTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenAppTypesMixin(value): {
                user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_app_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenInstanceTypes(value): {
                user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_instance_types:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenInstanceTypesMixin(value): {
                user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_instance_types+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenMlTools': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenMlTools(value): {
                user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_ml_tools:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withHiddenMlToolsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHiddenMlToolsMixin(value): {
                user_settings+: {
                  studio_web_portal_settings+: {
                    hidden_ml_tools+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withTensorBoardAppSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTensorBoardAppSettings(value): {
            user_settings+: {
              tensor_board_app_settings: value,
            },
          },
          '#withTensorBoardAppSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTensorBoardAppSettingsMixin(value): {
            user_settings+: {
              tensor_board_app_settings+: value,
            },
          },
          tensor_board_app_settings+:
            {
              '#withDefaultResourceSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpec(value): {
                user_settings+: {
                  tensor_board_app_settings+: {
                    default_resource_spec: value,
                  },
                },
              },
              '#withDefaultResourceSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDefaultResourceSpecMixin(value): {
                user_settings+: {
                  tensor_board_app_settings+: {
                    default_resource_spec+: value,
                  },
                },
              },
              default_resource_spec+:
                {
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          instance_type: value,
                        },
                      },
                    },
                  },
                  '#withLifecycleConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLifecycleConfigArn(value): {
                    user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          lifecycle_config_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageArn(value): {
                    user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_arn: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionAlias(value): {
                    user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_alias: value,
                        },
                      },
                    },
                  },
                  '#withSagemakerImageVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSagemakerImageVersionArn(value): {
                    user_settings+: {
                      tensor_board_app_settings+: {
                        default_resource_spec+: {
                          sagemaker_image_version_arn: value,
                        },
                      },
                    },
                  },
                },
            },
        },
    },
  aws_sagemaker_workforce:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'workforce_name', type: 'string' }], help: '' } },
      new(tf_resource_key, workforce_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withWorkforceName(workforce_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_workforce+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCognitoConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCognitoConfig(value): {
        cognito_config: value,
      },
      '#withCognitoConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCognitoConfigMixin(value): {
        cognito_config+: value,
      },
      cognito_config+:
        {
          '#withClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClientId(value): {
            cognito_config+: {
              client_id: value,
            },
          },
          '#withUserPool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserPool(value): {
            cognito_config+: {
              user_pool: value,
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withOidcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOidcConfig(value): {
        oidc_config: value,
      },
      '#withOidcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOidcConfigMixin(value): {
        oidc_config+: value,
      },
      oidc_config+:
        {
          '#withAuthenticationRequestExtraParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticationRequestExtraParams(value): {
            oidc_config+: {
              authentication_request_extra_params: value,
            },
          },
          '#withAuthenticationRequestExtraParamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticationRequestExtraParamsMixin(value): {
            oidc_config+: {
              authentication_request_extra_params+: value,
            },
          },
          '#withAuthorizationEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthorizationEndpoint(value): {
            oidc_config+: {
              authorization_endpoint: value,
            },
          },
          '#withClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClientId(value): {
            oidc_config+: {
              client_id: value,
            },
          },
          '#withClientSecret': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClientSecret(value): {
            oidc_config+: {
              client_secret: value,
            },
          },
          '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIssuer(value): {
            oidc_config+: {
              issuer: value,
            },
          },
          '#withJwksUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withJwksUri(value): {
            oidc_config+: {
              jwks_uri: value,
            },
          },
          '#withLogoutEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLogoutEndpoint(value): {
            oidc_config+: {
              logout_endpoint: value,
            },
          },
          '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withScope(value): {
            oidc_config+: {
              scope: value,
            },
          },
          '#withTokenEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTokenEndpoint(value): {
            oidc_config+: {
              token_endpoint: value,
            },
          },
          '#withUserInfoEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserInfoEndpoint(value): {
            oidc_config+: {
              user_info_endpoint: value,
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSourceIpConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSourceIpConfig(value): {
        source_ip_config: value,
      },
      '#withSourceIpConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSourceIpConfigMixin(value): {
        source_ip_config+: value,
      },
      source_ip_config+:
        {
          '#withCidrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCidrs(value): {
            source_ip_config+: {
              cidrs:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withCidrsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCidrsMixin(value): {
            source_ip_config+: {
              cidrs+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withSubdomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSubdomain(value): {
        subdomain: value,
      },
      '#withWorkforceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkforceName(value): {
        workforce_name: value,
      },
      '#withWorkforceVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withWorkforceVpcConfig(value): {
        workforce_vpc_config: value,
      },
      '#withWorkforceVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withWorkforceVpcConfigMixin(value): {
        workforce_vpc_config+: value,
      },
      workforce_vpc_config+:
        {
          '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIds(value): {
            workforce_vpc_config+: {
              security_group_ids:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIdsMixin(value): {
            workforce_vpc_config+: {
              security_group_ids+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnets(value): {
            workforce_vpc_config+: {
              subnets:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetsMixin(value): {
            workforce_vpc_config+: {
              subnets+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withVpcEndpointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVpcEndpointId(value): {
            workforce_vpc_config+: {
              vpc_endpoint_id: value,
            },
          },
          '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVpcId(value): {
            workforce_vpc_config+: {
              vpc_id: value,
            },
          },
        },
    },
  aws_sagemaker_workteam:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'description', type: 'string' }, { default: null, enums: null, name: 'member_definition', type: 'array' }, { default: null, enums: null, name: 'workteam_name', type: 'string' }], help: '' } },
      new(tf_resource_key, description, member_definition, workteam_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDescription(description)
        + self.withMemberDefinition(member_definition)
        + self.withWorkteamName(workteam_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource+: {
              aws_sagemaker_workteam+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMemberDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMemberDefinition(value): {
        member_definition:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMemberDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMemberDefinitionMixin(value): {
        member_definition+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      member_definition+:
        {
          '#': { help: '', name: 'member_definition' },
          '#withCognitoMemberDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCognitoMemberDefinition(value): {
            cognito_member_definition: value,
          },
          '#withCognitoMemberDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCognitoMemberDefinitionMixin(value): {
            cognito_member_definition+: value,
          },
          cognito_member_definition+:
            {
              '#withClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withClientId(value): {
                cognito_member_definition+: {
                  client_id: value,
                },
              },
              '#withUserGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserGroup(value): {
                cognito_member_definition+: {
                  user_group: value,
                },
              },
              '#withUserPool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserPool(value): {
                cognito_member_definition+: {
                  user_pool: value,
                },
              },
            },
          '#withOidcMemberDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withOidcMemberDefinition(value): {
            oidc_member_definition: value,
          },
          '#withOidcMemberDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withOidcMemberDefinitionMixin(value): {
            oidc_member_definition+: value,
          },
          oidc_member_definition+:
            {
              '#withGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withGroups(value): {
                oidc_member_definition+: {
                  groups:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withGroupsMixin(value): {
                oidc_member_definition+: {
                  groups+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
            },
        },
      '#withNotificationConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withNotificationConfiguration(value): {
        notification_configuration: value,
      },
      '#withNotificationConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withNotificationConfigurationMixin(value): {
        notification_configuration+: value,
      },
      notification_configuration+:
        {
          '#withNotificationTopicArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNotificationTopicArn(value): {
            notification_configuration+: {
              notification_topic_arn: value,
            },
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubdomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSubdomain(value): {
        subdomain: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withWorkerAccessConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withWorkerAccessConfiguration(value): {
        worker_access_configuration: value,
      },
      '#withWorkerAccessConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withWorkerAccessConfigurationMixin(value): {
        worker_access_configuration+: value,
      },
      worker_access_configuration+:
        {
          '#withS3Presign': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Presign(value): {
            worker_access_configuration+: {
              s3_presign: value,
            },
          },
          '#withS3PresignMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3PresignMixin(value): {
            worker_access_configuration+: {
              s3_presign+: value,
            },
          },
          s3_presign+:
            {
              '#withIamPolicyConstraints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withIamPolicyConstraints(value): {
                worker_access_configuration+: {
                  s3_presign+: {
                    iam_policy_constraints: value,
                  },
                },
              },
              '#withIamPolicyConstraintsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withIamPolicyConstraintsMixin(value): {
                worker_access_configuration+: {
                  s3_presign+: {
                    iam_policy_constraints+: value,
                  },
                },
              },
              iam_policy_constraints+:
                {
                  '#withSourceIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSourceIp(value): {
                    worker_access_configuration+: {
                      s3_presign+: {
                        iam_policy_constraints+: {
                          source_ip: value,
                        },
                      },
                    },
                  },
                  '#withVpcSourceIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVpcSourceIp(value): {
                    worker_access_configuration+: {
                      s3_presign+: {
                        iam_policy_constraints+: {
                          vpc_source_ip: value,
                        },
                      },
                    },
                  },
                },
            },
        },
      '#withWorkforceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkforceName(value): {
        workforce_name: value,
      },
      '#withWorkteamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkteamName(value): {
        workteam_name: value,
      },
    },
}
