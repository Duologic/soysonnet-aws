// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'kinesis',
  },
  aws_kinesis_analytics_application:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_kinesis_analytics_application: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchLoggingOptions(value): {
        cloudwatch_logging_options: value,
      },
      '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withCloudwatchLoggingOptionsMixin(value): {
        cloudwatch_logging_options+: value,
      },
      cloudwatch_logging_options+:
        {
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            cloudwatch_logging_options+: {
              id: value,
            },
          },
          '#withLogStreamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLogStreamArn(value): {
            cloudwatch_logging_options+: {
              log_stream_arn: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            cloudwatch_logging_options+: {
              role_arn: value,
            },
          },
        },
      '#withCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCode(value): {
        code: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreateTimestamp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreateTimestamp(value): {
        create_timestamp: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInputs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withInputs(value): {
        inputs: value,
      },
      '#withInputsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withInputsMixin(value): {
        inputs+: value,
      },
      inputs+:
        {
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            inputs+: {
              id: value,
            },
          },
          '#withKinesisFirehose': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisFirehose(value): {
            inputs+: {
              kinesis_firehose: value,
            },
          },
          '#withKinesisFirehoseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisFirehoseMixin(value): {
            inputs+: {
              kinesis_firehose+: value,
            },
          },
          kinesis_firehose+:
            {
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                inputs+: {
                  kinesis_firehose+: {
                    resource_arn: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                inputs+: {
                  kinesis_firehose+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withKinesisStream': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStream(value): {
            inputs+: {
              kinesis_stream: value,
            },
          },
          '#withKinesisStreamMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStreamMixin(value): {
            inputs+: {
              kinesis_stream+: value,
            },
          },
          kinesis_stream+:
            {
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                inputs+: {
                  kinesis_stream+: {
                    resource_arn: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                inputs+: {
                  kinesis_stream+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withNamePrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNamePrefix(value): {
            inputs+: {
              name_prefix: value,
            },
          },
          '#withParallelism': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withParallelism(value): {
            inputs+: {
              parallelism: value,
            },
          },
          '#withParallelismMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withParallelismMixin(value): {
            inputs+: {
              parallelism+: value,
            },
          },
          parallelism+:
            {
              '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCount(value): {
                inputs+: {
                  parallelism+: {
                    count: value,
                  },
                },
              },
            },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            inputs+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            inputs+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withLambda': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withLambda(value): {
                inputs+: {
                  processing_configuration+: {
                    lambda: value,
                  },
                },
              },
              '#withLambdaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withLambdaMixin(value): {
                inputs+: {
                  processing_configuration+: {
                    lambda+: value,
                  },
                },
              },
              lambda+:
                {
                  '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withResourceArn(value): {
                    inputs+: {
                      processing_configuration+: {
                        lambda+: {
                          resource_arn: value,
                        },
                      },
                    },
                  },
                  '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRoleArn(value): {
                    inputs+: {
                      processing_configuration+: {
                        lambda+: {
                          role_arn: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSchema(value): {
            inputs+: {
              schema: value,
            },
          },
          '#withSchemaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSchemaMixin(value): {
            inputs+: {
              schema+: value,
            },
          },
          schema+:
            {
              '#withRecordColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRecordColumns(value): {
                inputs+: {
                  schema+: {
                    record_columns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withRecordColumnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRecordColumnsMixin(value): {
                inputs+: {
                  schema+: {
                    record_columns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              record_columns+:
                {
                  '#': { help: '', name: 'record_columns' },
                  '#withMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMapping(value): {
                    mapping: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSqlType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSqlType(value): {
                    sql_type: value,
                  },
                },
              '#withRecordEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRecordEncoding(value): {
                inputs+: {
                  schema+: {
                    record_encoding: value,
                  },
                },
              },
              '#withRecordFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRecordFormat(value): {
                inputs+: {
                  schema+: {
                    record_format: value,
                  },
                },
              },
              '#withRecordFormatMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRecordFormatMixin(value): {
                inputs+: {
                  schema+: {
                    record_format+: value,
                  },
                },
              },
              record_format+:
                {
                  '#withMappingParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withMappingParameters(value): {
                    inputs+: {
                      schema+: {
                        record_format+: {
                          mapping_parameters: value,
                        },
                      },
                    },
                  },
                  '#withMappingParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withMappingParametersMixin(value): {
                    inputs+: {
                      schema+: {
                        record_format+: {
                          mapping_parameters+: value,
                        },
                      },
                    },
                  },
                  mapping_parameters+:
                    {
                      '#withCsv': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCsv(value): {
                        inputs+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                csv: value,
                              },
                            },
                          },
                        },
                      },
                      '#withCsvMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCsvMixin(value): {
                        inputs+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                csv+: value,
                              },
                            },
                          },
                        },
                      },
                      csv+:
                        {
                          '#withRecordColumnDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRecordColumnDelimiter(value): {
                            inputs+: {
                              schema+: {
                                record_format+: {
                                  mapping_parameters+: {
                                    csv+: {
                                      record_column_delimiter: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withRecordRowDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRecordRowDelimiter(value): {
                            inputs+: {
                              schema+: {
                                record_format+: {
                                  mapping_parameters+: {
                                    csv+: {
                                      record_row_delimiter: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withJson(value): {
                        inputs+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                json: value,
                              },
                            },
                          },
                        },
                      },
                      '#withJsonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withJsonMixin(value): {
                        inputs+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                json+: value,
                              },
                            },
                          },
                        },
                      },
                      json+:
                        {
                          '#withRecordRowPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRecordRowPath(value): {
                            inputs+: {
                              schema+: {
                                record_format+: {
                                  mapping_parameters+: {
                                    json+: {
                                      record_row_path: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withRecordFormatType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRecordFormatType(value): {
                    inputs+: {
                      schema+: {
                        record_format+: {
                          record_format_type: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withStartingPositionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStartingPositionConfiguration(value): {
            inputs+: {
              starting_position_configuration:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStartingPositionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStartingPositionConfigurationMixin(value): {
            inputs+: {
              starting_position_configuration+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          starting_position_configuration+:
            {
              '#': { help: '', name: 'starting_position_configuration' },
              '#withStartingPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStartingPosition(value): {
                starting_position: value,
              },
            },
          '#withStreamNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStreamNames(value): {
            inputs+: {
              stream_names:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withStreamNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStreamNamesMixin(value): {
            inputs+: {
              stream_names+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLastUpdateTimestamp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdateTimestamp(value): {
        last_update_timestamp: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOutputs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputs(value): {
        outputs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOutputsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputsMixin(value): {
        outputs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      outputs+:
        {
          '#': { help: '', name: 'outputs' },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withKinesisFirehose': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisFirehose(value): {
            kinesis_firehose: value,
          },
          '#withKinesisFirehoseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisFirehoseMixin(value): {
            kinesis_firehose+: value,
          },
          kinesis_firehose+:
            {
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                kinesis_firehose+: {
                  resource_arn: value,
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                kinesis_firehose+: {
                  role_arn: value,
                },
              },
            },
          '#withKinesisStream': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStream(value): {
            kinesis_stream: value,
          },
          '#withKinesisStreamMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withKinesisStreamMixin(value): {
            kinesis_stream+: value,
          },
          kinesis_stream+:
            {
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                kinesis_stream+: {
                  resource_arn: value,
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                kinesis_stream+: {
                  role_arn: value,
                },
              },
            },
          '#withLambda': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLambda(value): {
            lambda: value,
          },
          '#withLambdaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withLambdaMixin(value): {
            lambda+: value,
          },
          lambda+:
            {
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                lambda+: {
                  resource_arn: value,
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                lambda+: {
                  role_arn: value,
                },
              },
            },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSchema(value): {
            schema: value,
          },
          '#withSchemaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSchemaMixin(value): {
            schema+: value,
          },
          schema+:
            {
              '#withRecordFormatType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRecordFormatType(value): {
                schema+: {
                  record_format_type: value,
                },
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withReferenceDataSources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withReferenceDataSources(value): {
        reference_data_sources: value,
      },
      '#withReferenceDataSourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withReferenceDataSourcesMixin(value): {
        reference_data_sources+: value,
      },
      reference_data_sources+:
        {
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            reference_data_sources+: {
              id: value,
            },
          },
          '#withS3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3(value): {
            reference_data_sources+: {
              s3: value,
            },
          },
          '#withS3Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Mixin(value): {
            reference_data_sources+: {
              s3+: value,
            },
          },
          s3+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                reference_data_sources+: {
                  s3+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withFileKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileKey(value): {
                reference_data_sources+: {
                  s3+: {
                    file_key: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                reference_data_sources+: {
                  s3+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSchema(value): {
            reference_data_sources+: {
              schema: value,
            },
          },
          '#withSchemaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSchemaMixin(value): {
            reference_data_sources+: {
              schema+: value,
            },
          },
          schema+:
            {
              '#withRecordColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRecordColumns(value): {
                reference_data_sources+: {
                  schema+: {
                    record_columns:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withRecordColumnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRecordColumnsMixin(value): {
                reference_data_sources+: {
                  schema+: {
                    record_columns+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              record_columns+:
                {
                  '#': { help: '', name: 'record_columns' },
                  '#withMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMapping(value): {
                    mapping: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSqlType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSqlType(value): {
                    sql_type: value,
                  },
                },
              '#withRecordEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRecordEncoding(value): {
                reference_data_sources+: {
                  schema+: {
                    record_encoding: value,
                  },
                },
              },
              '#withRecordFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRecordFormat(value): {
                reference_data_sources+: {
                  schema+: {
                    record_format: value,
                  },
                },
              },
              '#withRecordFormatMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withRecordFormatMixin(value): {
                reference_data_sources+: {
                  schema+: {
                    record_format+: value,
                  },
                },
              },
              record_format+:
                {
                  '#withMappingParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withMappingParameters(value): {
                    reference_data_sources+: {
                      schema+: {
                        record_format+: {
                          mapping_parameters: value,
                        },
                      },
                    },
                  },
                  '#withMappingParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withMappingParametersMixin(value): {
                    reference_data_sources+: {
                      schema+: {
                        record_format+: {
                          mapping_parameters+: value,
                        },
                      },
                    },
                  },
                  mapping_parameters+:
                    {
                      '#withCsv': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCsv(value): {
                        reference_data_sources+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                csv: value,
                              },
                            },
                          },
                        },
                      },
                      '#withCsvMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withCsvMixin(value): {
                        reference_data_sources+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                csv+: value,
                              },
                            },
                          },
                        },
                      },
                      csv+:
                        {
                          '#withRecordColumnDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRecordColumnDelimiter(value): {
                            reference_data_sources+: {
                              schema+: {
                                record_format+: {
                                  mapping_parameters+: {
                                    csv+: {
                                      record_column_delimiter: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withRecordRowDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRecordRowDelimiter(value): {
                            reference_data_sources+: {
                              schema+: {
                                record_format+: {
                                  mapping_parameters+: {
                                    csv+: {
                                      record_row_delimiter: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withJson(value): {
                        reference_data_sources+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                json: value,
                              },
                            },
                          },
                        },
                      },
                      '#withJsonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withJsonMixin(value): {
                        reference_data_sources+: {
                          schema+: {
                            record_format+: {
                              mapping_parameters+: {
                                json+: value,
                              },
                            },
                          },
                        },
                      },
                      json+:
                        {
                          '#withRecordRowPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRecordRowPath(value): {
                            reference_data_sources+: {
                              schema+: {
                                record_format+: {
                                  mapping_parameters+: {
                                    json+: {
                                      record_row_path: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                  '#withRecordFormatType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRecordFormatType(value): {
                    reference_data_sources+: {
                      schema+: {
                        record_format+: {
                          record_format_type: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTableName(value): {
            reference_data_sources+: {
              table_name: value,
            },
          },
        },
      '#withStartApplication': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withStartApplication(value=true): {
        start_application: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
    },
  aws_kinesis_firehose_delivery_stream:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'destination', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, destination, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDestination(destination)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_kinesis_firehose_delivery_stream: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDestination(value): {
        destination: value,
      },
      '#withDestinationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDestinationId(value): {
        destination_id: value,
      },
      '#withElasticsearchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withElasticsearchConfiguration(value): {
        elasticsearch_configuration: value,
      },
      '#withElasticsearchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withElasticsearchConfigurationMixin(value): {
        elasticsearch_configuration+: value,
      },
      elasticsearch_configuration+:
        {
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            elasticsearch_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            elasticsearch_configuration+: {
              buffering_size: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            elasticsearch_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            elasticsearch_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                elasticsearch_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                elasticsearch_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                elasticsearch_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withClusterEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClusterEndpoint(value): {
            elasticsearch_configuration+: {
              cluster_endpoint: value,
            },
          },
          '#withDomainArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDomainArn(value): {
            elasticsearch_configuration+: {
              domain_arn: value,
            },
          },
          '#withIndexName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIndexName(value): {
            elasticsearch_configuration+: {
              index_name: value,
            },
          },
          '#withIndexRotationPeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIndexRotationPeriod(value): {
            elasticsearch_configuration+: {
              index_rotation_period: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            elasticsearch_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            elasticsearch_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                elasticsearch_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                elasticsearch_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                elasticsearch_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            elasticsearch_configuration+: {
              retry_duration: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            elasticsearch_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            elasticsearch_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            elasticsearch_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            elasticsearch_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    elasticsearch_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    elasticsearch_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    elasticsearch_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                elasticsearch_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withTypeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTypeName(value): {
            elasticsearch_configuration+: {
              type_name: value,
            },
          },
          '#withVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfig(value): {
            elasticsearch_configuration+: {
              vpc_config: value,
            },
          },
          '#withVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfigMixin(value): {
            elasticsearch_configuration+: {
              vpc_config+: value,
            },
          },
          vpc_config+:
            {
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                elasticsearch_configuration+: {
                  vpc_config+: {
                    role_arn: value,
                  },
                },
              },
              '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIds(value): {
                elasticsearch_configuration+: {
                  vpc_config+: {
                    security_group_ids:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIdsMixin(value): {
                elasticsearch_configuration+: {
                  vpc_config+: {
                    security_group_ids+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnetIds(value): {
                elasticsearch_configuration+: {
                  vpc_config+: {
                    subnet_ids:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnetIdsMixin(value): {
                elasticsearch_configuration+: {
                  vpc_config+: {
                    subnet_ids+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcId(value): {
                elasticsearch_configuration+: {
                  vpc_config+: {
                    vpc_id: value,
                  },
                },
              },
            },
        },
      '#withExtendedS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withExtendedS3Configuration(value): {
        extended_s3_configuration: value,
      },
      '#withExtendedS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withExtendedS3ConfigurationMixin(value): {
        extended_s3_configuration+: value,
      },
      extended_s3_configuration+:
        {
          '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucketArn(value): {
            extended_s3_configuration+: {
              bucket_arn: value,
            },
          },
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            extended_s3_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            extended_s3_configuration+: {
              buffering_size: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            extended_s3_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            extended_s3_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                extended_s3_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                extended_s3_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                extended_s3_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCompressionFormat(value): {
            extended_s3_configuration+: {
              compression_format: value,
            },
          },
          '#withCustomTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCustomTimeZone(value): {
            extended_s3_configuration+: {
              custom_time_zone: value,
            },
          },
          '#withDataFormatConversionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDataFormatConversionConfiguration(value): {
            extended_s3_configuration+: {
              data_format_conversion_configuration: value,
            },
          },
          '#withDataFormatConversionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDataFormatConversionConfigurationMixin(value): {
            extended_s3_configuration+: {
              data_format_conversion_configuration+: value,
            },
          },
          data_format_conversion_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                extended_s3_configuration+: {
                  data_format_conversion_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withInputFormatConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withInputFormatConfiguration(value): {
                extended_s3_configuration+: {
                  data_format_conversion_configuration+: {
                    input_format_configuration: value,
                  },
                },
              },
              '#withInputFormatConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withInputFormatConfigurationMixin(value): {
                extended_s3_configuration+: {
                  data_format_conversion_configuration+: {
                    input_format_configuration+: value,
                  },
                },
              },
              input_format_configuration+:
                {
                  '#withDeserializer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDeserializer(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        input_format_configuration+: {
                          deserializer: value,
                        },
                      },
                    },
                  },
                  '#withDeserializerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withDeserializerMixin(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        input_format_configuration+: {
                          deserializer+: value,
                        },
                      },
                    },
                  },
                  deserializer+:
                    {
                      '#withHiveJsonSerDe': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withHiveJsonSerDe(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            input_format_configuration+: {
                              deserializer+: {
                                hive_json_ser_de: value,
                              },
                            },
                          },
                        },
                      },
                      '#withHiveJsonSerDeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withHiveJsonSerDeMixin(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            input_format_configuration+: {
                              deserializer+: {
                                hive_json_ser_de+: value,
                              },
                            },
                          },
                        },
                      },
                      hive_json_ser_de+:
                        {
                          '#withTimestampFormats': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTimestampFormats(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                input_format_configuration+: {
                                  deserializer+: {
                                    hive_json_ser_de+: {
                                      timestamp_formats:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withTimestampFormatsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTimestampFormatsMixin(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                input_format_configuration+: {
                                  deserializer+: {
                                    hive_json_ser_de+: {
                                      timestamp_formats+:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withOpenXJsonSerDe': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withOpenXJsonSerDe(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            input_format_configuration+: {
                              deserializer+: {
                                open_x_json_ser_de: value,
                              },
                            },
                          },
                        },
                      },
                      '#withOpenXJsonSerDeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withOpenXJsonSerDeMixin(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            input_format_configuration+: {
                              deserializer+: {
                                open_x_json_ser_de+: value,
                              },
                            },
                          },
                        },
                      },
                      open_x_json_ser_de+:
                        {
                          '#withCaseInsensitive': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withCaseInsensitive(value=true): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                input_format_configuration+: {
                                  deserializer+: {
                                    open_x_json_ser_de+: {
                                      case_insensitive: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withColumnToJsonKeyMappings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withColumnToJsonKeyMappings(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                input_format_configuration+: {
                                  deserializer+: {
                                    open_x_json_ser_de+: {
                                      column_to_json_key_mappings: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withColumnToJsonKeyMappingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                          withColumnToJsonKeyMappingsMixin(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                input_format_configuration+: {
                                  deserializer+: {
                                    open_x_json_ser_de+: {
                                      column_to_json_key_mappings+: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withConvertDotsInJsonKeysToUnderscores': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withConvertDotsInJsonKeysToUnderscores(value=true): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                input_format_configuration+: {
                                  deserializer+: {
                                    open_x_json_ser_de+: {
                                      convert_dots_in_json_keys_to_underscores: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                },
              '#withOutputFormatConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOutputFormatConfiguration(value): {
                extended_s3_configuration+: {
                  data_format_conversion_configuration+: {
                    output_format_configuration: value,
                  },
                },
              },
              '#withOutputFormatConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withOutputFormatConfigurationMixin(value): {
                extended_s3_configuration+: {
                  data_format_conversion_configuration+: {
                    output_format_configuration+: value,
                  },
                },
              },
              output_format_configuration+:
                {
                  '#withSerializer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSerializer(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        output_format_configuration+: {
                          serializer: value,
                        },
                      },
                    },
                  },
                  '#withSerializerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withSerializerMixin(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        output_format_configuration+: {
                          serializer+: value,
                        },
                      },
                    },
                  },
                  serializer+:
                    {
                      '#withOrcSerDe': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withOrcSerDe(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            output_format_configuration+: {
                              serializer+: {
                                orc_ser_de: value,
                              },
                            },
                          },
                        },
                      },
                      '#withOrcSerDeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withOrcSerDeMixin(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            output_format_configuration+: {
                              serializer+: {
                                orc_ser_de+: value,
                              },
                            },
                          },
                        },
                      },
                      orc_ser_de+:
                        {
                          '#withBlockSizeBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withBlockSizeBytes(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      block_size_bytes: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withBloomFilterColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withBloomFilterColumns(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      bloom_filter_columns:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withBloomFilterColumnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withBloomFilterColumnsMixin(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      bloom_filter_columns+:
                                        (if std.isArray(value)
                                         then value
                                         else [value]),
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withBloomFilterFalsePositiveProbability': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withBloomFilterFalsePositiveProbability(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      bloom_filter_false_positive_probability: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withCompression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCompression(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      compression: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withDictionaryKeyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withDictionaryKeyThreshold(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      dictionary_key_threshold: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withEnablePadding': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withEnablePadding(value=true): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      enable_padding: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withFormatVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withFormatVersion(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      format_version: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withPaddingTolerance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withPaddingTolerance(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      padding_tolerance: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withRowIndexStride': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withRowIndexStride(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      row_index_stride: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withStripeSizeBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withStripeSizeBytes(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    orc_ser_de+: {
                                      stripe_size_bytes: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      '#withParquetSerDe': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withParquetSerDe(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            output_format_configuration+: {
                              serializer+: {
                                parquet_ser_de: value,
                              },
                            },
                          },
                        },
                      },
                      '#withParquetSerDeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withParquetSerDeMixin(value): {
                        extended_s3_configuration+: {
                          data_format_conversion_configuration+: {
                            output_format_configuration+: {
                              serializer+: {
                                parquet_ser_de+: value,
                              },
                            },
                          },
                        },
                      },
                      parquet_ser_de+:
                        {
                          '#withBlockSizeBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withBlockSizeBytes(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    parquet_ser_de+: {
                                      block_size_bytes: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withCompression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCompression(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    parquet_ser_de+: {
                                      compression: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withEnableDictionaryCompression': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withEnableDictionaryCompression(value=true): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    parquet_ser_de+: {
                                      enable_dictionary_compression: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withMaxPaddingBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMaxPaddingBytes(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    parquet_ser_de+: {
                                      max_padding_bytes: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withPageSizeBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withPageSizeBytes(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    parquet_ser_de+: {
                                      page_size_bytes: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                          '#withWriterVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withWriterVersion(value): {
                            extended_s3_configuration+: {
                              data_format_conversion_configuration+: {
                                output_format_configuration+: {
                                  serializer+: {
                                    parquet_ser_de+: {
                                      writer_version: value,
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                    },
                },
              '#withSchemaConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSchemaConfiguration(value): {
                extended_s3_configuration+: {
                  data_format_conversion_configuration+: {
                    schema_configuration: value,
                  },
                },
              },
              '#withSchemaConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSchemaConfigurationMixin(value): {
                extended_s3_configuration+: {
                  data_format_conversion_configuration+: {
                    schema_configuration+: value,
                  },
                },
              },
              schema_configuration+:
                {
                  '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCatalogId(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        schema_configuration+: {
                          catalog_id: value,
                        },
                      },
                    },
                  },
                  '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDatabaseName(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        schema_configuration+: {
                          database_name: value,
                        },
                      },
                    },
                  },
                  '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRegion(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        schema_configuration+: {
                          region: value,
                        },
                      },
                    },
                  },
                  '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRoleArn(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        schema_configuration+: {
                          role_arn: value,
                        },
                      },
                    },
                  },
                  '#withTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withTableName(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        schema_configuration+: {
                          table_name: value,
                        },
                      },
                    },
                  },
                  '#withVersionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVersionId(value): {
                    extended_s3_configuration+: {
                      data_format_conversion_configuration+: {
                        schema_configuration+: {
                          version_id: value,
                        },
                      },
                    },
                  },
                },
            },
          '#withDynamicPartitioningConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDynamicPartitioningConfiguration(value): {
            extended_s3_configuration+: {
              dynamic_partitioning_configuration: value,
            },
          },
          '#withDynamicPartitioningConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDynamicPartitioningConfigurationMixin(value): {
            extended_s3_configuration+: {
              dynamic_partitioning_configuration+: value,
            },
          },
          dynamic_partitioning_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                extended_s3_configuration+: {
                  dynamic_partitioning_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withRetryDuration(value): {
                extended_s3_configuration+: {
                  dynamic_partitioning_configuration+: {
                    retry_duration: value,
                  },
                },
              },
            },
          '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withErrorOutputPrefix(value): {
            extended_s3_configuration+: {
              error_output_prefix: value,
            },
          },
          '#withFileExtension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFileExtension(value): {
            extended_s3_configuration+: {
              file_extension: value,
            },
          },
          '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyArn(value): {
            extended_s3_configuration+: {
              kms_key_arn: value,
            },
          },
          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrefix(value): {
            extended_s3_configuration+: {
              prefix: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            extended_s3_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            extended_s3_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                extended_s3_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                extended_s3_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                extended_s3_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            extended_s3_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3BackupConfiguration(value): {
            extended_s3_configuration+: {
              s3_backup_configuration: value,
            },
          },
          '#withS3BackupConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3BackupConfigurationMixin(value): {
            extended_s3_configuration+: {
              s3_backup_configuration+: value,
            },
          },
          s3_backup_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    extended_s3_configuration+: {
                      s3_backup_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    extended_s3_configuration+: {
                      s3_backup_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    extended_s3_configuration+: {
                      s3_backup_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                extended_s3_configuration+: {
                  s3_backup_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            extended_s3_configuration+: {
              s3_backup_mode: value,
            },
          },
        },
      '#withHttpEndpointConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHttpEndpointConfiguration(value): {
        http_endpoint_configuration: value,
      },
      '#withHttpEndpointConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHttpEndpointConfigurationMixin(value): {
        http_endpoint_configuration+: value,
      },
      http_endpoint_configuration+:
        {
          '#withAccessKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAccessKey(value): {
            http_endpoint_configuration+: {
              access_key: value,
            },
          },
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            http_endpoint_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            http_endpoint_configuration+: {
              buffering_size: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            http_endpoint_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            http_endpoint_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                http_endpoint_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                http_endpoint_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                http_endpoint_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            http_endpoint_configuration+: {
              name: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            http_endpoint_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            http_endpoint_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                http_endpoint_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                http_endpoint_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                http_endpoint_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRequestConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRequestConfiguration(value): {
            http_endpoint_configuration+: {
              request_configuration: value,
            },
          },
          '#withRequestConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRequestConfigurationMixin(value): {
            http_endpoint_configuration+: {
              request_configuration+: value,
            },
          },
          request_configuration+:
            {
              '#withCommonAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCommonAttributes(value): {
                http_endpoint_configuration+: {
                  request_configuration+: {
                    common_attributes:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withCommonAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCommonAttributesMixin(value): {
                http_endpoint_configuration+: {
                  request_configuration+: {
                    common_attributes+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              common_attributes+:
                {
                  '#': { help: '', name: 'common_attributes' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
              '#withContentEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentEncoding(value): {
                http_endpoint_configuration+: {
                  request_configuration+: {
                    content_encoding: value,
                  },
                },
              },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            http_endpoint_configuration+: {
              retry_duration: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            http_endpoint_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            http_endpoint_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            http_endpoint_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            http_endpoint_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    http_endpoint_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    http_endpoint_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    http_endpoint_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                http_endpoint_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withSecretsManagerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfiguration(value): {
            http_endpoint_configuration+: {
              secrets_manager_configuration: value,
            },
          },
          '#withSecretsManagerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfigurationMixin(value): {
            http_endpoint_configuration+: {
              secrets_manager_configuration+: value,
            },
          },
          secrets_manager_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                http_endpoint_configuration+: {
                  secrets_manager_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                http_endpoint_configuration+: {
                  secrets_manager_configuration+: {
                    role_arn: value,
                  },
                },
              },
              '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecretArn(value): {
                http_endpoint_configuration+: {
                  secrets_manager_configuration+: {
                    secret_arn: value,
                  },
                },
              },
            },
          '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUrl(value): {
            http_endpoint_configuration+: {
              url: value,
            },
          },
        },
      '#withIcebergConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withIcebergConfiguration(value): {
        iceberg_configuration: value,
      },
      '#withIcebergConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withIcebergConfigurationMixin(value): {
        iceberg_configuration+: value,
      },
      iceberg_configuration+:
        {
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            iceberg_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            iceberg_configuration+: {
              buffering_size: value,
            },
          },
          '#withCatalogArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogArn(value): {
            iceberg_configuration+: {
              catalog_arn: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            iceberg_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            iceberg_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                iceberg_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                iceberg_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                iceberg_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withDestinationTableConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationTableConfiguration(value): {
            iceberg_configuration+: {
              destination_table_configuration:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withDestinationTableConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationTableConfigurationMixin(value): {
            iceberg_configuration+: {
              destination_table_configuration+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          destination_table_configuration+:
            {
              '#': { help: '', name: 'destination_table_configuration' },
              '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDatabaseName(value): {
                database_name: value,
              },
              '#withS3ErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3ErrorOutputPrefix(value): {
                s3_error_output_prefix: value,
              },
              '#withTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTableName(value): {
                table_name: value,
              },
              '#withUniqueKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withUniqueKeys(value): {
                unique_keys:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withUniqueKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withUniqueKeysMixin(value): {
                unique_keys+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            iceberg_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            iceberg_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                iceberg_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                iceberg_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                iceberg_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            iceberg_configuration+: {
              retry_duration: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            iceberg_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            iceberg_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            iceberg_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            iceberg_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    iceberg_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    iceberg_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    iceberg_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                iceberg_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKinesisSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withKinesisSourceConfiguration(value): {
        kinesis_source_configuration: value,
      },
      '#withKinesisSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withKinesisSourceConfigurationMixin(value): {
        kinesis_source_configuration+: value,
      },
      kinesis_source_configuration+:
        {
          '#withKinesisStreamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKinesisStreamArn(value): {
            kinesis_source_configuration+: {
              kinesis_stream_arn: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            kinesis_source_configuration+: {
              role_arn: value,
            },
          },
        },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMskSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMskSourceConfiguration(value): {
        msk_source_configuration: value,
      },
      '#withMskSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMskSourceConfigurationMixin(value): {
        msk_source_configuration+: value,
      },
      msk_source_configuration+:
        {
          '#withAuthenticationConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticationConfiguration(value): {
            msk_source_configuration+: {
              authentication_configuration: value,
            },
          },
          '#withAuthenticationConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticationConfigurationMixin(value): {
            msk_source_configuration+: {
              authentication_configuration+: value,
            },
          },
          authentication_configuration+:
            {
              '#withConnectivity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withConnectivity(value): {
                msk_source_configuration+: {
                  authentication_configuration+: {
                    connectivity: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                msk_source_configuration+: {
                  authentication_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withMskClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMskClusterArn(value): {
            msk_source_configuration+: {
              msk_cluster_arn: value,
            },
          },
          '#withTopicName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTopicName(value): {
            msk_source_configuration+: {
              topic_name: value,
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOpensearchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOpensearchConfiguration(value): {
        opensearch_configuration: value,
      },
      '#withOpensearchConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOpensearchConfigurationMixin(value): {
        opensearch_configuration+: value,
      },
      opensearch_configuration+:
        {
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            opensearch_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            opensearch_configuration+: {
              buffering_size: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            opensearch_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            opensearch_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                opensearch_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                opensearch_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                opensearch_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withClusterEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClusterEndpoint(value): {
            opensearch_configuration+: {
              cluster_endpoint: value,
            },
          },
          '#withDocumentIdOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDocumentIdOptions(value): {
            opensearch_configuration+: {
              document_id_options: value,
            },
          },
          '#withDocumentIdOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDocumentIdOptionsMixin(value): {
            opensearch_configuration+: {
              document_id_options+: value,
            },
          },
          document_id_options+:
            {
              '#withDefaultDocumentIdFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDefaultDocumentIdFormat(value): {
                opensearch_configuration+: {
                  document_id_options+: {
                    default_document_id_format: value,
                  },
                },
              },
            },
          '#withDomainArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDomainArn(value): {
            opensearch_configuration+: {
              domain_arn: value,
            },
          },
          '#withIndexName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIndexName(value): {
            opensearch_configuration+: {
              index_name: value,
            },
          },
          '#withIndexRotationPeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIndexRotationPeriod(value): {
            opensearch_configuration+: {
              index_rotation_period: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            opensearch_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            opensearch_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                opensearch_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                opensearch_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                opensearch_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            opensearch_configuration+: {
              retry_duration: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            opensearch_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            opensearch_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            opensearch_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            opensearch_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    opensearch_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    opensearch_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    opensearch_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                opensearch_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withTypeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTypeName(value): {
            opensearch_configuration+: {
              type_name: value,
            },
          },
          '#withVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfig(value): {
            opensearch_configuration+: {
              vpc_config: value,
            },
          },
          '#withVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfigMixin(value): {
            opensearch_configuration+: {
              vpc_config+: value,
            },
          },
          vpc_config+:
            {
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                opensearch_configuration+: {
                  vpc_config+: {
                    role_arn: value,
                  },
                },
              },
              '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIds(value): {
                opensearch_configuration+: {
                  vpc_config+: {
                    security_group_ids:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIdsMixin(value): {
                opensearch_configuration+: {
                  vpc_config+: {
                    security_group_ids+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnetIds(value): {
                opensearch_configuration+: {
                  vpc_config+: {
                    subnet_ids:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnetIdsMixin(value): {
                opensearch_configuration+: {
                  vpc_config+: {
                    subnet_ids+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcId(value): {
                opensearch_configuration+: {
                  vpc_config+: {
                    vpc_id: value,
                  },
                },
              },
            },
        },
      '#withOpensearchserverlessConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOpensearchserverlessConfiguration(value): {
        opensearchserverless_configuration: value,
      },
      '#withOpensearchserverlessConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOpensearchserverlessConfigurationMixin(value): {
        opensearchserverless_configuration+: value,
      },
      opensearchserverless_configuration+:
        {
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            opensearchserverless_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            opensearchserverless_configuration+: {
              buffering_size: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            opensearchserverless_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            opensearchserverless_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                opensearchserverless_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                opensearchserverless_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                opensearchserverless_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withCollectionEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCollectionEndpoint(value): {
            opensearchserverless_configuration+: {
              collection_endpoint: value,
            },
          },
          '#withIndexName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIndexName(value): {
            opensearchserverless_configuration+: {
              index_name: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            opensearchserverless_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            opensearchserverless_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                opensearchserverless_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                opensearchserverless_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                opensearchserverless_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            opensearchserverless_configuration+: {
              retry_duration: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            opensearchserverless_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            opensearchserverless_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            opensearchserverless_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            opensearchserverless_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    opensearchserverless_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    opensearchserverless_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    opensearchserverless_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                opensearchserverless_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfig(value): {
            opensearchserverless_configuration+: {
              vpc_config: value,
            },
          },
          '#withVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVpcConfigMixin(value): {
            opensearchserverless_configuration+: {
              vpc_config+: value,
            },
          },
          vpc_config+:
            {
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                opensearchserverless_configuration+: {
                  vpc_config+: {
                    role_arn: value,
                  },
                },
              },
              '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIds(value): {
                opensearchserverless_configuration+: {
                  vpc_config+: {
                    security_group_ids:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSecurityGroupIdsMixin(value): {
                opensearchserverless_configuration+: {
                  vpc_config+: {
                    security_group_ids+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnetIds(value): {
                opensearchserverless_configuration+: {
                  vpc_config+: {
                    subnet_ids:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSubnetIdsMixin(value): {
                opensearchserverless_configuration+: {
                  vpc_config+: {
                    subnet_ids+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcId(value): {
                opensearchserverless_configuration+: {
                  vpc_config+: {
                    vpc_id: value,
                  },
                },
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRedshiftConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRedshiftConfiguration(value): {
        redshift_configuration: value,
      },
      '#withRedshiftConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withRedshiftConfigurationMixin(value): {
        redshift_configuration+: value,
      },
      redshift_configuration+:
        {
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            redshift_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            redshift_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                redshift_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                redshift_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                redshift_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withClusterJdbcurl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClusterJdbcurl(value): {
            redshift_configuration+: {
              cluster_jdbcurl: value,
            },
          },
          '#withCopyOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCopyOptions(value): {
            redshift_configuration+: {
              copy_options: value,
            },
          },
          '#withDataTableColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDataTableColumns(value): {
            redshift_configuration+: {
              data_table_columns: value,
            },
          },
          '#withDataTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDataTableName(value): {
            redshift_configuration+: {
              data_table_name: value,
            },
          },
          '#withPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPassword(value): {
            redshift_configuration+: {
              password: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            redshift_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            redshift_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                redshift_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                redshift_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                redshift_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            redshift_configuration+: {
              retry_duration: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            redshift_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3BackupConfiguration(value): {
            redshift_configuration+: {
              s3_backup_configuration: value,
            },
          },
          '#withS3BackupConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3BackupConfigurationMixin(value): {
            redshift_configuration+: {
              s3_backup_configuration+: value,
            },
          },
          s3_backup_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    redshift_configuration+: {
                      s3_backup_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    redshift_configuration+: {
                      s3_backup_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    redshift_configuration+: {
                      s3_backup_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                redshift_configuration+: {
                  s3_backup_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            redshift_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            redshift_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            redshift_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    redshift_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    redshift_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    redshift_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                redshift_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withSecretsManagerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfiguration(value): {
            redshift_configuration+: {
              secrets_manager_configuration: value,
            },
          },
          '#withSecretsManagerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfigurationMixin(value): {
            redshift_configuration+: {
              secrets_manager_configuration+: value,
            },
          },
          secrets_manager_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                redshift_configuration+: {
                  secrets_manager_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                redshift_configuration+: {
                  secrets_manager_configuration+: {
                    role_arn: value,
                  },
                },
              },
              '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecretArn(value): {
                redshift_configuration+: {
                  secrets_manager_configuration+: {
                    secret_arn: value,
                  },
                },
              },
            },
          '#withUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUsername(value): {
            redshift_configuration+: {
              username: value,
            },
          },
        },
      '#withServerSideEncryption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withServerSideEncryption(value): {
        server_side_encryption: value,
      },
      '#withServerSideEncryptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withServerSideEncryptionMixin(value): {
        server_side_encryption+: value,
      },
      server_side_encryption+:
        {
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            server_side_encryption+: {
              enabled: value,
            },
          },
          '#withKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyArn(value): {
            server_side_encryption+: {
              key_arn: value,
            },
          },
          '#withKeyType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyType(value): {
            server_side_encryption+: {
              key_type: value,
            },
          },
        },
      '#withSnowflakeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSnowflakeConfiguration(value): {
        snowflake_configuration: value,
      },
      '#withSnowflakeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSnowflakeConfigurationMixin(value): {
        snowflake_configuration+: value,
      },
      snowflake_configuration+:
        {
          '#withAccountUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAccountUrl(value): {
            snowflake_configuration+: {
              account_url: value,
            },
          },
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            snowflake_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            snowflake_configuration+: {
              buffering_size: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            snowflake_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            snowflake_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                snowflake_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                snowflake_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                snowflake_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withContentColumnName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withContentColumnName(value): {
            snowflake_configuration+: {
              content_column_name: value,
            },
          },
          '#withDataLoadingOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDataLoadingOption(value): {
            snowflake_configuration+: {
              data_loading_option: value,
            },
          },
          '#withDatabase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatabase(value): {
            snowflake_configuration+: {
              database: value,
            },
          },
          '#withKeyPassphrase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyPassphrase(value): {
            snowflake_configuration+: {
              key_passphrase: value,
            },
          },
          '#withMetadataColumnName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMetadataColumnName(value): {
            snowflake_configuration+: {
              metadata_column_name: value,
            },
          },
          '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrivateKey(value): {
            snowflake_configuration+: {
              private_key: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            snowflake_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            snowflake_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                snowflake_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                snowflake_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                snowflake_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            snowflake_configuration+: {
              retry_duration: value,
            },
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            snowflake_configuration+: {
              role_arn: value,
            },
          },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            snowflake_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            snowflake_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            snowflake_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    snowflake_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    snowflake_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    snowflake_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                snowflake_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSchema(value): {
            snowflake_configuration+: {
              schema: value,
            },
          },
          '#withSecretsManagerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfiguration(value): {
            snowflake_configuration+: {
              secrets_manager_configuration: value,
            },
          },
          '#withSecretsManagerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfigurationMixin(value): {
            snowflake_configuration+: {
              secrets_manager_configuration+: value,
            },
          },
          secrets_manager_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                snowflake_configuration+: {
                  secrets_manager_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                snowflake_configuration+: {
                  secrets_manager_configuration+: {
                    role_arn: value,
                  },
                },
              },
              '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecretArn(value): {
                snowflake_configuration+: {
                  secrets_manager_configuration+: {
                    secret_arn: value,
                  },
                },
              },
            },
          '#withSnowflakeRoleConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSnowflakeRoleConfiguration(value): {
            snowflake_configuration+: {
              snowflake_role_configuration: value,
            },
          },
          '#withSnowflakeRoleConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSnowflakeRoleConfigurationMixin(value): {
            snowflake_configuration+: {
              snowflake_role_configuration+: value,
            },
          },
          snowflake_role_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                snowflake_configuration+: {
                  snowflake_role_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withSnowflakeRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSnowflakeRole(value): {
                snowflake_configuration+: {
                  snowflake_role_configuration+: {
                    snowflake_role: value,
                  },
                },
              },
            },
          '#withSnowflakeVpcConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSnowflakeVpcConfiguration(value): {
            snowflake_configuration+: {
              snowflake_vpc_configuration: value,
            },
          },
          '#withSnowflakeVpcConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSnowflakeVpcConfigurationMixin(value): {
            snowflake_configuration+: {
              snowflake_vpc_configuration+: value,
            },
          },
          snowflake_vpc_configuration+:
            {
              '#withPrivateLinkVpceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrivateLinkVpceId(value): {
                snowflake_configuration+: {
                  snowflake_vpc_configuration+: {
                    private_link_vpce_id: value,
                  },
                },
              },
            },
          '#withTable': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTable(value): {
            snowflake_configuration+: {
              table: value,
            },
          },
          '#withUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUser(value): {
            snowflake_configuration+: {
              user: value,
            },
          },
        },
      '#withSplunkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSplunkConfiguration(value): {
        splunk_configuration: value,
      },
      '#withSplunkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSplunkConfigurationMixin(value): {
        splunk_configuration+: value,
      },
      splunk_configuration+:
        {
          '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingInterval(value): {
            splunk_configuration+: {
              buffering_interval: value,
            },
          },
          '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBufferingSize(value): {
            splunk_configuration+: {
              buffering_size: value,
            },
          },
          '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptions(value): {
            splunk_configuration+: {
              cloudwatch_logging_options: value,
            },
          },
          '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCloudwatchLoggingOptionsMixin(value): {
            splunk_configuration+: {
              cloudwatch_logging_options+: value,
            },
          },
          cloudwatch_logging_options+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                splunk_configuration+: {
                  cloudwatch_logging_options+: {
                    enabled: value,
                  },
                },
              },
              '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogGroupName(value): {
                splunk_configuration+: {
                  cloudwatch_logging_options+: {
                    log_group_name: value,
                  },
                },
              },
              '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLogStreamName(value): {
                splunk_configuration+: {
                  cloudwatch_logging_options+: {
                    log_stream_name: value,
                  },
                },
              },
            },
          '#withHecAcknowledgmentTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withHecAcknowledgmentTimeout(value): {
            splunk_configuration+: {
              hec_acknowledgment_timeout: value,
            },
          },
          '#withHecEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHecEndpoint(value): {
            splunk_configuration+: {
              hec_endpoint: value,
            },
          },
          '#withHecEndpointType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHecEndpointType(value): {
            splunk_configuration+: {
              hec_endpoint_type: value,
            },
          },
          '#withHecToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHecToken(value): {
            splunk_configuration+: {
              hec_token: value,
            },
          },
          '#withProcessingConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfiguration(value): {
            splunk_configuration+: {
              processing_configuration: value,
            },
          },
          '#withProcessingConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProcessingConfigurationMixin(value): {
            splunk_configuration+: {
              processing_configuration+: value,
            },
          },
          processing_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                splunk_configuration+: {
                  processing_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withProcessors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessors(value): {
                splunk_configuration+: {
                  processing_configuration+: {
                    processors:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withProcessorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withProcessorsMixin(value): {
                splunk_configuration+: {
                  processing_configuration+: {
                    processors+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              processors+:
                {
                  '#': { help: '', name: 'processors' },
                  '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParameters(value): {
                    parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withParametersMixin(value): {
                    parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  parameters+:
                    {
                      '#': { help: '', name: 'parameters' },
                      '#withParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterName(value): {
                        parameter_name: value,
                      },
                      '#withParameterValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withParameterValue(value): {
                        parameter_value: value,
                      },
                    },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
            },
          '#withRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRetryDuration(value): {
            splunk_configuration+: {
              retry_duration: value,
            },
          },
          '#withS3BackupMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3BackupMode(value): {
            splunk_configuration+: {
              s3_backup_mode: value,
            },
          },
          '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3Configuration(value): {
            splunk_configuration+: {
              s3_configuration: value,
            },
          },
          '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withS3ConfigurationMixin(value): {
            splunk_configuration+: {
              s3_configuration+: value,
            },
          },
          s3_configuration+:
            {
              '#withBucketArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucketArn(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    bucket_arn: value,
                  },
                },
              },
              '#withBufferingInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingInterval(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    buffering_interval: value,
                  },
                },
              },
              '#withBufferingSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBufferingSize(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    buffering_size: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptions(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options: value,
                  },
                },
              },
              '#withCloudwatchLoggingOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCloudwatchLoggingOptionsMixin(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    cloudwatch_logging_options+: value,
                  },
                },
              },
              cloudwatch_logging_options+:
                {
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    splunk_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          enabled: value,
                        },
                      },
                    },
                  },
                  '#withLogGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogGroupName(value): {
                    splunk_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_group_name: value,
                        },
                      },
                    },
                  },
                  '#withLogStreamName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLogStreamName(value): {
                    splunk_configuration+: {
                      s3_configuration+: {
                        cloudwatch_logging_options+: {
                          log_stream_name: value,
                        },
                      },
                    },
                  },
                },
              '#withCompressionFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCompressionFormat(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    compression_format: value,
                  },
                },
              },
              '#withErrorOutputPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorOutputPrefix(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    error_output_prefix: value,
                  },
                },
              },
              '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyArn(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    kms_key_arn: value,
                  },
                },
              },
              '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefix(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    prefix: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                splunk_configuration+: {
                  s3_configuration+: {
                    role_arn: value,
                  },
                },
              },
            },
          '#withSecretsManagerConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfiguration(value): {
            splunk_configuration+: {
              secrets_manager_configuration: value,
            },
          },
          '#withSecretsManagerConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSecretsManagerConfigurationMixin(value): {
            splunk_configuration+: {
              secrets_manager_configuration+: value,
            },
          },
          secrets_manager_configuration+:
            {
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                splunk_configuration+: {
                  secrets_manager_configuration+: {
                    enabled: value,
                  },
                },
              },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                splunk_configuration+: {
                  secrets_manager_configuration+: {
                    role_arn: value,
                  },
                },
              },
              '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecretArn(value): {
                splunk_configuration+: {
                  secrets_manager_configuration+: {
                    secret_arn: value,
                  },
                },
              },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withVersionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersionId(value): {
        version_id: value,
      },
    },
  aws_kinesis_resource_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'policy', type: 'string' }, { default: null, enums: null, name: 'resource_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, policy, resource_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withPolicy(policy)
        + self.withResourceArn(resource_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_kinesis_resource_policy: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPolicy(value): {
        policy: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceArn(value): {
        resource_arn: value,
      },
    },
  aws_kinesis_stream:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_kinesis_stream: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEncryptionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEncryptionType(value): {
        encryption_type: value,
      },
      '#withEnforceConsumerDeletion': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnforceConsumerDeletion(value=true): {
        enforce_consumer_deletion: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRetentionPeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRetentionPeriod(value): {
        retention_period: value,
      },
      '#withShardCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withShardCount(value): {
        shard_count: value,
      },
      '#withShardLevelMetrics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withShardLevelMetrics(value): {
        shard_level_metrics:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withShardLevelMetricsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withShardLevelMetricsMixin(value): {
        shard_level_metrics+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStreamModeDetails': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withStreamModeDetails(value): {
        stream_mode_details: value,
      },
      '#withStreamModeDetailsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withStreamModeDetailsMixin(value): {
        stream_mode_details+: value,
      },
      stream_mode_details+:
        {
          '#withStreamMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStreamMode(value): {
            stream_mode_details+: {
              stream_mode: value,
            },
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
    },
  aws_kinesis_stream_consumer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'stream_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, name, stream_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withStreamArn(stream_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_kinesis_stream_consumer: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreationTimestamp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTimestamp(value): {
        creation_timestamp: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStreamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStreamArn(value): {
        stream_arn: value,
      },
    },
  aws_kinesis_video_stream:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            resource: {
              aws_kinesis_video_stream: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTime(value): {
        creation_time: value,
      },
      '#withDataRetentionInHours': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDataRetentionInHours(value): {
        data_retention_in_hours: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeviceName(value): {
        device_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        lifecycle: value,
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        lifecycle+: value,
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            lifecycle+: {
              create_before_destroy: value,
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            lifecycle+: {
              ignore_changes:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            lifecycle+: {
              ignore_changes+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            lifecycle+: {
              postcondition: value,
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            lifecycle+: {
              postcondition+: value,
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  postcondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  postcondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            lifecycle+: {
              precondition: value,
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            lifecycle+: {
              precondition+: value,
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                lifecycle+: {
                  precondition+: {
                    condition: value,
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                lifecycle+: {
                  precondition+: {
                    error_message: value,
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            lifecycle+: {
              prevent_destroy: value,
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            lifecycle+: {
              replace_triggered_by:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            lifecycle+: {
              replace_triggered_by+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withMediaType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMediaType(value): {
        media_type: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        provisioner:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        provisioner+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreate(value): {
            timeouts+: {
              create: value,
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDelete(value): {
            timeouts+: {
              delete: value,
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdate(value): {
            timeouts+: {
              update: value,
            },
          },
        },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
    },
}
