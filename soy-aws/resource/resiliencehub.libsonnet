// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'resiliencehub',
  },
  aws_resiliencehub_resiliency_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'tier', type: 'string' }], help: '' } },
      new(tf_resource_key, name, tier):
        {
          local this = self,
          resource: {
            aws_resiliencehub_resiliency_policy: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withTier(tier),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDataLocationConstraint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Specifies a high-level geographical location constraint for where resilience policy data can be stored.' } },
      withDataLocationConstraint(value): {
        spec+: {
          data_location_constraint: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The description for the policy.' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withEstimatedCostTier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Specifies the estimated cost tier of the resiliency policy.' } },
      withEstimatedCostTier(value): {
        spec+: {
          estimated_cost_tier: value,
        },
      },
      '#withLifecycle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycle(value): {
        spec+: {
          lifecycle: value,
        },
      },
      '#withLifecycleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLifecycleMixin(value): {
        spec+: {
          lifecycle+: value,
        },
      },
      lifecycle+:
        {
          '#withCreateBeforeDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCreateBeforeDestroy(value=true): {
            spec+: {
              lifecycle+: {
                create_before_destroy: value,
              },
            },
          },
          '#withIgnoreChanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChanges(value): {
            spec+: {
              lifecycle+: {
                ignore_changes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withIgnoreChangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIgnoreChangesMixin(value): {
            spec+: {
              lifecycle+: {
                ignore_changes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withPostcondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostcondition(value): {
            spec+: {
              lifecycle+: {
                postcondition: value,
              },
            },
          },
          '#withPostconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPostconditionMixin(value): {
            spec+: {
              lifecycle+: {
                postcondition+: value,
              },
            },
          },
          postcondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    postcondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPrecondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPrecondition(value): {
            spec+: {
              lifecycle+: {
                precondition: value,
              },
            },
          },
          '#withPreconditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPreconditionMixin(value): {
            spec+: {
              lifecycle+: {
                precondition+: value,
              },
            },
          },
          precondition+:
            {
              '#withCondition': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withCondition(value=true): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      condition: value,
                    },
                  },
                },
              },
              '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withErrorMessage(value): {
                spec+: {
                  lifecycle+: {
                    precondition+: {
                      error_message: value,
                    },
                  },
                },
              },
            },
          '#withPreventDestroy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreventDestroy(value=true): {
            spec+: {
              lifecycle+: {
                prevent_destroy: value,
              },
            },
          },
          '#withReplaceTriggeredBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredBy(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withReplaceTriggeredByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReplaceTriggeredByMixin(value): {
            spec+: {
              lifecycle+: {
                replace_triggered_by+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The name of the policy.' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPolicy(value): {
        spec+: {
          policy: value,
        },
      },
      '#withPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withPolicyMixin(value): {
        spec+: {
          policy+: value,
        },
      },
      policy+:
        {
          '#withAz': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAz(value): {
            spec+: {
              policy+: {
                az: value,
              },
            },
          },
          '#withAzMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAzMixin(value): {
            spec+: {
              policy+: {
                az+: value,
              },
            },
          },
          az+:
            {
              '#withRpo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Point Objective (RPO) as a Go duration.' } },
              withRpo(value): {
                spec+: {
                  policy+: {
                    az+: {
                      rpo: value,
                    },
                  },
                },
              },
              '#withRto': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Time Objective (RTO) as a Go duration.' } },
              withRto(value): {
                spec+: {
                  policy+: {
                    az+: {
                      rto: value,
                    },
                  },
                },
              },
            },
          '#withHardware': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHardware(value): {
            spec+: {
              policy+: {
                hardware: value,
              },
            },
          },
          '#withHardwareMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHardwareMixin(value): {
            spec+: {
              policy+: {
                hardware+: value,
              },
            },
          },
          hardware+:
            {
              '#withRpo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Point Objective (RPO) as a Go duration.' } },
              withRpo(value): {
                spec+: {
                  policy+: {
                    hardware+: {
                      rpo: value,
                    },
                  },
                },
              },
              '#withRto': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Time Objective (RTO) as a Go duration.' } },
              withRto(value): {
                spec+: {
                  policy+: {
                    hardware+: {
                      rto: value,
                    },
                  },
                },
              },
            },
          '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRegion(value): {
            spec+: {
              policy+: {
                region: value,
              },
            },
          },
          '#withRegionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRegionMixin(value): {
            spec+: {
              policy+: {
                region+: value,
              },
            },
          },
          region+:
            {
              '#withRpo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Point Objective (RPO) as a Go duration.' } },
              withRpo(value): {
                spec+: {
                  policy+: {
                    region+: {
                      rpo: value,
                    },
                  },
                },
              },
              '#withRto': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Time Objective (RTO) as a Go duration.' } },
              withRto(value): {
                spec+: {
                  policy+: {
                    region+: {
                      rto: value,
                    },
                  },
                },
              },
            },
          '#withSoftware': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSoftware(value): {
            spec+: {
              policy+: {
                software: value,
              },
            },
          },
          '#withSoftwareMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSoftwareMixin(value): {
            spec+: {
              policy+: {
                software+: value,
              },
            },
          },
          software+:
            {
              '#withRpo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Point Objective (RPO) as a Go duration.' } },
              withRpo(value): {
                spec+: {
                  policy+: {
                    software+: {
                      rpo: value,
                    },
                  },
                },
              },
              '#withRto': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Recovery Time Objective (RTO) as a Go duration.' } },
              withRto(value): {
                spec+: {
                  policy+: {
                    software+: {
                      rto: value,
                    },
                  },
                },
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProvisioner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisioner(value): {
        spec+: {
          provisioner:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvisionerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProvisionerMixin(value): {
        spec+: {
          provisioner+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        spec+: {
          tags_all: value,
        },
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        spec+: {
          tags_all+: value,
        },
      },
      '#withTier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The tier for the resiliency policy, ranging from the highest severity (MissionCritical) to lowest (NonCritical).' } },
      withTier(value): {
        spec+: {
          tier: value,
        },
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        spec+: {
          timeouts: value,
        },
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        spec+: {
          timeouts+: value,
        },
      },
      timeouts+:
        {
          '#withCreate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withCreate(value): {
            spec+: {
              timeouts+: {
                create: value,
              },
            },
          },
          '#withDelete': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.' } },
          withDelete(value): {
            spec+: {
              timeouts+: {
                delete: value,
              },
            },
          },
          '#withUpdate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).' } },
          withUpdate(value): {
            spec+: {
              timeouts+: {
                update: value,
              },
            },
          },
        },
    },
}
