// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'provider',
  },
  provider:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          provider: {
            [this.tf_resource_key]: this.spec,
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAccessKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: "The access key for API operations. You can retrieve this\nfrom the 'Security & Credentials' section of the AWS console." } },
      withAccessKey(value): {
        spec+: {
          access_key: value,
        },
      },
      '#withAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAlias(value): {
        spec+: {
          alias: value,
        },
      },
      '#withAllowedAccountIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedAccountIds(value): {
        spec+: {
          allowed_account_ids:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAllowedAccountIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedAccountIdsMixin(value): {
        spec+: {
          allowed_account_ids+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAssumeRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAssumeRole(value): {
        spec+: {
          assume_role:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAssumeRoleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAssumeRoleMixin(value): {
        spec+: {
          assume_role+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      assume_role+:
        {
          '#': { help: '', name: 'assume_role' },
          '#withDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or µs), ms, s, h, or m.' } },
          withDuration(value): {
            duration: value,
          },
          '#withExternalId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'A unique identifier that might be required when you assume a role in another account.' } },
          withExternalId(value): {
            external_id: value,
          },
          '#withPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.' } },
          withPolicy(value): {
            policy: value,
          },
          '#withPolicyArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed.' } },
          withPolicyArns(value): {
            policy_arns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPolicyArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed.' } },
          withPolicyArnsMixin(value): {
            policy_arns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls.' } },
          withRoleArn(value): {
            role_arn: value,
          },
          '#withSessionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'An identifier for the assumed role session.' } },
          withSessionName(value): {
            session_name: value,
          },
          '#withSourceIdentity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Source identity specified by the principal assuming the role.' } },
          withSourceIdentity(value): {
            source_identity: value,
          },
          '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: 'Assume role session tags.' } },
          withTags(value): {
            tags: value,
          },
          '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: 'Assume role session tags.' } },
          withTagsMixin(value): {
            tags+: value,
          },
          '#withTransitiveTagKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Assume role session tag keys to pass to any subsequent sessions.' } },
          withTransitiveTagKeys(value): {
            transitive_tag_keys:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitiveTagKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Assume role session tag keys to pass to any subsequent sessions.' } },
          withTransitiveTagKeysMixin(value): {
            transitive_tag_keys+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withAssumeRoleWithWebIdentity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAssumeRoleWithWebIdentity(value): {
        spec+: {
          assume_role_with_web_identity:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAssumeRoleWithWebIdentityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAssumeRoleWithWebIdentityMixin(value): {
        spec+: {
          assume_role_with_web_identity+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      assume_role_with_web_identity+:
        {
          '#': { help: '', name: 'assume_role_with_web_identity' },
          '#withDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The duration, between 15 minutes and 12 hours, of the role session. Valid time units are ns, us (or µs), ms, s, h, or m.' } },
          withDuration(value): {
            duration: value,
          },
          '#withPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.' } },
          withPolicy(value): {
            policy: value,
          },
          '#withPolicyArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed.' } },
          withPolicyArns(value): {
            policy_arns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPolicyArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed.' } },
          withPolicyArnsMixin(value): {
            policy_arns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Amazon Resource Name (ARN) of an IAM Role to assume prior to making API calls.' } },
          withRoleArn(value): {
            role_arn: value,
          },
          '#withSessionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'An identifier for the assumed role session.' } },
          withSessionName(value): {
            session_name: value,
          },
          '#withWebIdentityToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withWebIdentityToken(value): {
            web_identity_token: value,
          },
          '#withWebIdentityTokenFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withWebIdentityTokenFile(value): {
            web_identity_token_file: value,
          },
        },
      '#withCustomCaBundle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment variable. (Setting `ca_bundle` in the shared config file is not supported.)' } },
      withCustomCaBundle(value): {
        spec+: {
          custom_ca_bundle: value,
        },
      },
      '#withDefaultTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDefaultTags(value): {
        spec+: {
          default_tags:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDefaultTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDefaultTagsMixin(value): {
        spec+: {
          default_tags+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      default_tags+:
        {
          '#': { help: '', name: 'default_tags' },
          '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: 'Resource tags to default across all resources. Can also be configured with environment variables like `TF_AWS_DEFAULT_TAGS_<tag_name>`.' } },
          withTags(value): {
            tags: value,
          },
          '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: 'Resource tags to default across all resources. Can also be configured with environment variables like `TF_AWS_DEFAULT_TAGS_<tag_name>`.' } },
          withTagsMixin(value): {
            tags+: value,
          },
        },
      '#withEc2MetadataServiceEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Address of the EC2 metadata service endpoint to use. Can also be configured using the `AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.' } },
      withEc2MetadataServiceEndpoint(value): {
        spec+: {
          ec2_metadata_service_endpoint: value,
        },
      },
      '#withEc2MetadataServiceEndpointMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the `AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.' } },
      withEc2MetadataServiceEndpointMode(value): {
        spec+: {
          ec2_metadata_service_endpoint_mode: value,
        },
      },
      '#withEndpoints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpoints(value): {
        spec+: {
          endpoints:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEndpointsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpointsMixin(value): {
        spec+: {
          endpoints+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      endpoints+:
        {
          '#': { help: '', name: 'endpoints' },
          '#withAccessanalyzer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAccessanalyzer(value): {
            accessanalyzer: value,
          },
          '#withAccount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAccount(value): {
            account: value,
          },
          '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAcm(value): {
            acm: value,
          },
          '#withAcmpca': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAcmpca(value): {
            acmpca: value,
          },
          '#withAmg': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAmg(value): {
            amg: value,
          },
          '#withAmp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAmp(value): {
            amp: value,
          },
          '#withAmplify': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAmplify(value): {
            amplify: value,
          },
          '#withApigateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withApigateway(value): {
            apigateway: value,
          },
          '#withApigatewayv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withApigatewayv2(value): {
            apigatewayv2: value,
          },
          '#withAppautoscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppautoscaling(value): {
            appautoscaling: value,
          },
          '#withAppconfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppconfig(value): {
            appconfig: value,
          },
          '#withAppfabric': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppfabric(value): {
            appfabric: value,
          },
          '#withAppflow': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppflow(value): {
            appflow: value,
          },
          '#withAppintegrations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppintegrations(value): {
            appintegrations: value,
          },
          '#withAppintegrationsservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppintegrationsservice(value): {
            appintegrationsservice: value,
          },
          '#withApplicationautoscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withApplicationautoscaling(value): {
            applicationautoscaling: value,
          },
          '#withApplicationinsights': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withApplicationinsights(value): {
            applicationinsights: value,
          },
          '#withApplicationsignals': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withApplicationsignals(value): {
            applicationsignals: value,
          },
          '#withAppmesh': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppmesh(value): {
            appmesh: value,
          },
          '#withAppregistry': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppregistry(value): {
            appregistry: value,
          },
          '#withApprunner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withApprunner(value): {
            apprunner: value,
          },
          '#withAppstream': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppstream(value): {
            appstream: value,
          },
          '#withAppsync': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAppsync(value): {
            appsync: value,
          },
          '#withAthena': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAthena(value): {
            athena: value,
          },
          '#withAuditmanager': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAuditmanager(value): {
            auditmanager: value,
          },
          '#withAutoscaling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAutoscaling(value): {
            autoscaling: value,
          },
          '#withAutoscalingplans': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withAutoscalingplans(value): {
            autoscalingplans: value,
          },
          '#withBackup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBackup(value): {
            backup: value,
          },
          '#withBatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBatch(value): {
            batch: value,
          },
          '#withBcmdataexports': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBcmdataexports(value): {
            bcmdataexports: value,
          },
          '#withBeanstalk': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBeanstalk(value): {
            beanstalk: value,
          },
          '#withBedrock': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBedrock(value): {
            bedrock: value,
          },
          '#withBedrockagent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBedrockagent(value): {
            bedrockagent: value,
          },
          '#withBilling': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBilling(value): {
            billing: value,
          },
          '#withBudgets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withBudgets(value): {
            budgets: value,
          },
          '#withCe': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCe(value): {
            ce: value,
          },
          '#withChatbot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withChatbot(value): {
            chatbot: value,
          },
          '#withChime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withChime(value): {
            chime: value,
          },
          '#withChimesdkmediapipelines': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withChimesdkmediapipelines(value): {
            chimesdkmediapipelines: value,
          },
          '#withChimesdkvoice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withChimesdkvoice(value): {
            chimesdkvoice: value,
          },
          '#withCleanrooms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCleanrooms(value): {
            cleanrooms: value,
          },
          '#withCloud9': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloud9(value): {
            cloud9: value,
          },
          '#withCloudcontrol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudcontrol(value): {
            cloudcontrol: value,
          },
          '#withCloudcontrolapi': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudcontrolapi(value): {
            cloudcontrolapi: value,
          },
          '#withCloudformation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudformation(value): {
            cloudformation: value,
          },
          '#withCloudfront': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudfront(value): {
            cloudfront: value,
          },
          '#withCloudfrontkeyvaluestore': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudfrontkeyvaluestore(value): {
            cloudfrontkeyvaluestore: value,
          },
          '#withCloudhsm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudhsm(value): {
            cloudhsm: value,
          },
          '#withCloudhsmv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudhsmv2(value): {
            cloudhsmv2: value,
          },
          '#withCloudsearch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudsearch(value): {
            cloudsearch: value,
          },
          '#withCloudtrail': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudtrail(value): {
            cloudtrail: value,
          },
          '#withCloudwatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudwatch(value): {
            cloudwatch: value,
          },
          '#withCloudwatchevents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudwatchevents(value): {
            cloudwatchevents: value,
          },
          '#withCloudwatchevidently': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudwatchevidently(value): {
            cloudwatchevidently: value,
          },
          '#withCloudwatchlog': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudwatchlog(value): {
            cloudwatchlog: value,
          },
          '#withCloudwatchlogs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudwatchlogs(value): {
            cloudwatchlogs: value,
          },
          '#withCloudwatchobservabilityaccessmanager': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudwatchobservabilityaccessmanager(value): {
            cloudwatchobservabilityaccessmanager: value,
          },
          '#withCloudwatchrum': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCloudwatchrum(value): {
            cloudwatchrum: value,
          },
          '#withCodeartifact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodeartifact(value): {
            codeartifact: value,
          },
          '#withCodebuild': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodebuild(value): {
            codebuild: value,
          },
          '#withCodecatalyst': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodecatalyst(value): {
            codecatalyst: value,
          },
          '#withCodecommit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodecommit(value): {
            codecommit: value,
          },
          '#withCodeconnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodeconnections(value): {
            codeconnections: value,
          },
          '#withCodedeploy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodedeploy(value): {
            codedeploy: value,
          },
          '#withCodeguruprofiler': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodeguruprofiler(value): {
            codeguruprofiler: value,
          },
          '#withCodegurureviewer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodegurureviewer(value): {
            codegurureviewer: value,
          },
          '#withCodepipeline': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodepipeline(value): {
            codepipeline: value,
          },
          '#withCodestarconnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodestarconnections(value): {
            codestarconnections: value,
          },
          '#withCodestarnotifications': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCodestarnotifications(value): {
            codestarnotifications: value,
          },
          '#withCognitoidentity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCognitoidentity(value): {
            cognitoidentity: value,
          },
          '#withCognitoidentityprovider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCognitoidentityprovider(value): {
            cognitoidentityprovider: value,
          },
          '#withCognitoidp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCognitoidp(value): {
            cognitoidp: value,
          },
          '#withComprehend': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withComprehend(value): {
            comprehend: value,
          },
          '#withComputeoptimizer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withComputeoptimizer(value): {
            computeoptimizer: value,
          },
          '#withConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withConfig(value): {
            config: value,
          },
          '#withConfigservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withConfigservice(value): {
            configservice: value,
          },
          '#withConnect': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withConnect(value): {
            connect: value,
          },
          '#withConnectcases': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withConnectcases(value): {
            connectcases: value,
          },
          '#withControltower': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withControltower(value): {
            controltower: value,
          },
          '#withCostandusagereportservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCostandusagereportservice(value): {
            costandusagereportservice: value,
          },
          '#withCostexplorer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCostexplorer(value): {
            costexplorer: value,
          },
          '#withCostoptimizationhub': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCostoptimizationhub(value): {
            costoptimizationhub: value,
          },
          '#withCur': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCur(value): {
            cur: value,
          },
          '#withCustomerprofiles': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withCustomerprofiles(value): {
            customerprofiles: value,
          },
          '#withDatabasemigration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDatabasemigration(value): {
            databasemigration: value,
          },
          '#withDatabasemigrationservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDatabasemigrationservice(value): {
            databasemigrationservice: value,
          },
          '#withDatabrew': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDatabrew(value): {
            databrew: value,
          },
          '#withDataexchange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDataexchange(value): {
            dataexchange: value,
          },
          '#withDatapipeline': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDatapipeline(value): {
            datapipeline: value,
          },
          '#withDatasync': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDatasync(value): {
            datasync: value,
          },
          '#withDatazone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDatazone(value): {
            datazone: value,
          },
          '#withDax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDax(value): {
            dax: value,
          },
          '#withDeploy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDeploy(value): {
            deploy: value,
          },
          '#withDetective': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDetective(value): {
            detective: value,
          },
          '#withDevicefarm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDevicefarm(value): {
            devicefarm: value,
          },
          '#withDevopsguru': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDevopsguru(value): {
            devopsguru: value,
          },
          '#withDirectconnect': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDirectconnect(value): {
            directconnect: value,
          },
          '#withDirectoryservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDirectoryservice(value): {
            directoryservice: value,
          },
          '#withDlm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDlm(value): {
            dlm: value,
          },
          '#withDms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDms(value): {
            dms: value,
          },
          '#withDocdb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDocdb(value): {
            docdb: value,
          },
          '#withDocdbelastic': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDocdbelastic(value): {
            docdbelastic: value,
          },
          '#withDrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDrs(value): {
            drs: value,
          },
          '#withDs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDs(value): {
            ds: value,
          },
          '#withDynamodb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withDynamodb(value): {
            dynamodb: value,
          },
          '#withEc2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEc2(value): {
            ec2: value,
          },
          '#withEcr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEcr(value): {
            ecr: value,
          },
          '#withEcrpublic': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEcrpublic(value): {
            ecrpublic: value,
          },
          '#withEcs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEcs(value): {
            ecs: value,
          },
          '#withEfs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEfs(value): {
            efs: value,
          },
          '#withEks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEks(value): {
            eks: value,
          },
          '#withElasticache': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElasticache(value): {
            elasticache: value,
          },
          '#withElasticbeanstalk': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElasticbeanstalk(value): {
            elasticbeanstalk: value,
          },
          '#withElasticloadbalancing': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElasticloadbalancing(value): {
            elasticloadbalancing: value,
          },
          '#withElasticloadbalancingv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElasticloadbalancingv2(value): {
            elasticloadbalancingv2: value,
          },
          '#withElasticsearch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElasticsearch(value): {
            elasticsearch: value,
          },
          '#withElasticsearchservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElasticsearchservice(value): {
            elasticsearchservice: value,
          },
          '#withElastictranscoder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElastictranscoder(value): {
            elastictranscoder: value,
          },
          '#withElb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElb(value): {
            elb: value,
          },
          '#withElbv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withElbv2(value): {
            elbv2: value,
          },
          '#withEmr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEmr(value): {
            emr: value,
          },
          '#withEmrcontainers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEmrcontainers(value): {
            emrcontainers: value,
          },
          '#withEmrserverless': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEmrserverless(value): {
            emrserverless: value,
          },
          '#withEs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEs(value): {
            es: value,
          },
          '#withEventbridge': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEventbridge(value): {
            eventbridge: value,
          },
          '#withEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEvents(value): {
            events: value,
          },
          '#withEvidently': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withEvidently(value): {
            evidently: value,
          },
          '#withFinspace': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withFinspace(value): {
            finspace: value,
          },
          '#withFirehose': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withFirehose(value): {
            firehose: value,
          },
          '#withFis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withFis(value): {
            fis: value,
          },
          '#withFms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withFms(value): {
            fms: value,
          },
          '#withFsx': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withFsx(value): {
            fsx: value,
          },
          '#withGamelift': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGamelift(value): {
            gamelift: value,
          },
          '#withGlacier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGlacier(value): {
            glacier: value,
          },
          '#withGlobalaccelerator': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGlobalaccelerator(value): {
            globalaccelerator: value,
          },
          '#withGlue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGlue(value): {
            glue: value,
          },
          '#withGluedatabrew': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGluedatabrew(value): {
            gluedatabrew: value,
          },
          '#withGrafana': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGrafana(value): {
            grafana: value,
          },
          '#withGreengrass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGreengrass(value): {
            greengrass: value,
          },
          '#withGroundstation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGroundstation(value): {
            groundstation: value,
          },
          '#withGuardduty': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withGuardduty(value): {
            guardduty: value,
          },
          '#withHealthlake': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withHealthlake(value): {
            healthlake: value,
          },
          '#withIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withIam(value): {
            iam: value,
          },
          '#withIdentitystore': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withIdentitystore(value): {
            identitystore: value,
          },
          '#withImagebuilder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withImagebuilder(value): {
            imagebuilder: value,
          },
          '#withInspector': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withInspector(value): {
            inspector: value,
          },
          '#withInspector2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withInspector2(value): {
            inspector2: value,
          },
          '#withInspectorv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withInspectorv2(value): {
            inspectorv2: value,
          },
          '#withInternetmonitor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withInternetmonitor(value): {
            internetmonitor: value,
          },
          '#withInvoicing': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withInvoicing(value): {
            invoicing: value,
          },
          '#withIot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withIot(value): {
            iot: value,
          },
          '#withIotanalytics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withIotanalytics(value): {
            iotanalytics: value,
          },
          '#withIotevents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withIotevents(value): {
            iotevents: value,
          },
          '#withIvs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withIvs(value): {
            ivs: value,
          },
          '#withIvschat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withIvschat(value): {
            ivschat: value,
          },
          '#withKafka': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKafka(value): {
            kafka: value,
          },
          '#withKafkaconnect': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKafkaconnect(value): {
            kafkaconnect: value,
          },
          '#withKendra': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKendra(value): {
            kendra: value,
          },
          '#withKeyspaces': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKeyspaces(value): {
            keyspaces: value,
          },
          '#withKinesis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKinesis(value): {
            kinesis: value,
          },
          '#withKinesisanalytics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKinesisanalytics(value): {
            kinesisanalytics: value,
          },
          '#withKinesisanalyticsv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKinesisanalyticsv2(value): {
            kinesisanalyticsv2: value,
          },
          '#withKinesisvideo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKinesisvideo(value): {
            kinesisvideo: value,
          },
          '#withKms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withKms(value): {
            kms: value,
          },
          '#withLakeformation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLakeformation(value): {
            lakeformation: value,
          },
          '#withLambda': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLambda(value): {
            lambda: value,
          },
          '#withLaunchwizard': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLaunchwizard(value): {
            launchwizard: value,
          },
          '#withLex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLex(value): {
            lex: value,
          },
          '#withLexmodelbuilding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLexmodelbuilding(value): {
            lexmodelbuilding: value,
          },
          '#withLexmodelbuildingservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLexmodelbuildingservice(value): {
            lexmodelbuildingservice: value,
          },
          '#withLexmodels': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLexmodels(value): {
            lexmodels: value,
          },
          '#withLexmodelsv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLexmodelsv2(value): {
            lexmodelsv2: value,
          },
          '#withLexv2models': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLexv2models(value): {
            lexv2models: value,
          },
          '#withLicensemanager': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLicensemanager(value): {
            licensemanager: value,
          },
          '#withLightsail': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLightsail(value): {
            lightsail: value,
          },
          '#withLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLocation(value): {
            location: value,
          },
          '#withLocationservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLocationservice(value): {
            locationservice: value,
          },
          '#withLogs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLogs(value): {
            logs: value,
          },
          '#withLookoutmetrics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withLookoutmetrics(value): {
            lookoutmetrics: value,
          },
          '#withM2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withM2(value): {
            m2: value,
          },
          '#withMacie2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMacie2(value): {
            macie2: value,
          },
          '#withManagedgrafana': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withManagedgrafana(value): {
            managedgrafana: value,
          },
          '#withMediaconnect': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMediaconnect(value): {
            mediaconnect: value,
          },
          '#withMediaconvert': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMediaconvert(value): {
            mediaconvert: value,
          },
          '#withMedialive': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMedialive(value): {
            medialive: value,
          },
          '#withMediapackage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMediapackage(value): {
            mediapackage: value,
          },
          '#withMediapackagev2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMediapackagev2(value): {
            mediapackagev2: value,
          },
          '#withMediastore': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMediastore(value): {
            mediastore: value,
          },
          '#withMemorydb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMemorydb(value): {
            memorydb: value,
          },
          '#withMgn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMgn(value): {
            mgn: value,
          },
          '#withMq': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMq(value): {
            mq: value,
          },
          '#withMsk': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMsk(value): {
            msk: value,
          },
          '#withMwaa': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withMwaa(value): {
            mwaa: value,
          },
          '#withNeptune': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withNeptune(value): {
            neptune: value,
          },
          '#withNeptunegraph': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withNeptunegraph(value): {
            neptunegraph: value,
          },
          '#withNetworkfirewall': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withNetworkfirewall(value): {
            networkfirewall: value,
          },
          '#withNetworkmanager': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withNetworkmanager(value): {
            networkmanager: value,
          },
          '#withNetworkmonitor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withNetworkmonitor(value): {
            networkmonitor: value,
          },
          '#withOam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOam(value): {
            oam: value,
          },
          '#withOpensearch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOpensearch(value): {
            opensearch: value,
          },
          '#withOpensearchingestion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOpensearchingestion(value): {
            opensearchingestion: value,
          },
          '#withOpensearchserverless': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOpensearchserverless(value): {
            opensearchserverless: value,
          },
          '#withOpensearchservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOpensearchservice(value): {
            opensearchservice: value,
          },
          '#withOpsworks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOpsworks(value): {
            opsworks: value,
          },
          '#withOrganizations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOrganizations(value): {
            organizations: value,
          },
          '#withOsis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOsis(value): {
            osis: value,
          },
          '#withOutposts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withOutposts(value): {
            outposts: value,
          },
          '#withPaymentcryptography': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPaymentcryptography(value): {
            paymentcryptography: value,
          },
          '#withPcaconnectorad': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPcaconnectorad(value): {
            pcaconnectorad: value,
          },
          '#withPcs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPcs(value): {
            pcs: value,
          },
          '#withPinpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPinpoint(value): {
            pinpoint: value,
          },
          '#withPinpointsmsvoicev2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPinpointsmsvoicev2(value): {
            pinpointsmsvoicev2: value,
          },
          '#withPipes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPipes(value): {
            pipes: value,
          },
          '#withPolly': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPolly(value): {
            polly: value,
          },
          '#withPricing': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPricing(value): {
            pricing: value,
          },
          '#withPrometheus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPrometheus(value): {
            prometheus: value,
          },
          '#withPrometheusservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withPrometheusservice(value): {
            prometheusservice: value,
          },
          '#withQbusiness': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withQbusiness(value): {
            qbusiness: value,
          },
          '#withQldb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withQldb(value): {
            qldb: value,
          },
          '#withQuicksight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withQuicksight(value): {
            quicksight: value,
          },
          '#withRam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRam(value): {
            ram: value,
          },
          '#withRbin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRbin(value): {
            rbin: value,
          },
          '#withRds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRds(value): {
            rds: value,
          },
          '#withRecyclebin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRecyclebin(value): {
            recyclebin: value,
          },
          '#withRedshift': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRedshift(value): {
            redshift: value,
          },
          '#withRedshiftdata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRedshiftdata(value): {
            redshiftdata: value,
          },
          '#withRedshiftdataapiservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRedshiftdataapiservice(value): {
            redshiftdataapiservice: value,
          },
          '#withRedshiftserverless': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRedshiftserverless(value): {
            redshiftserverless: value,
          },
          '#withRekognition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRekognition(value): {
            rekognition: value,
          },
          '#withResiliencehub': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withResiliencehub(value): {
            resiliencehub: value,
          },
          '#withResourceexplorer2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withResourceexplorer2(value): {
            resourceexplorer2: value,
          },
          '#withResourcegroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withResourcegroups(value): {
            resourcegroups: value,
          },
          '#withResourcegroupstagging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withResourcegroupstagging(value): {
            resourcegroupstagging: value,
          },
          '#withResourcegroupstaggingapi': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withResourcegroupstaggingapi(value): {
            resourcegroupstaggingapi: value,
          },
          '#withRolesanywhere': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRolesanywhere(value): {
            rolesanywhere: value,
          },
          '#withRoute53': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRoute53(value): {
            route53: value,
          },
          '#withRoute53domains': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRoute53domains(value): {
            route53domains: value,
          },
          '#withRoute53profiles': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRoute53profiles(value): {
            route53profiles: value,
          },
          '#withRoute53recoverycontrolconfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRoute53recoverycontrolconfig(value): {
            route53recoverycontrolconfig: value,
          },
          '#withRoute53recoveryreadiness': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRoute53recoveryreadiness(value): {
            route53recoveryreadiness: value,
          },
          '#withRoute53resolver': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRoute53resolver(value): {
            route53resolver: value,
          },
          '#withRum': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withRum(value): {
            rum: value,
          },
          '#withS3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withS3(value): {
            s3: value,
          },
          '#withS3api': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withS3api(value): {
            s3api: value,
          },
          '#withS3control': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withS3control(value): {
            s3control: value,
          },
          '#withS3outposts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withS3outposts(value): {
            s3outposts: value,
          },
          '#withS3tables': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withS3tables(value): {
            s3tables: value,
          },
          '#withSagemaker': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSagemaker(value): {
            sagemaker: value,
          },
          '#withScheduler': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withScheduler(value): {
            scheduler: value,
          },
          '#withSchemas': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSchemas(value): {
            schemas: value,
          },
          '#withSdb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSdb(value): {
            sdb: value,
          },
          '#withSecretsmanager': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSecretsmanager(value): {
            secretsmanager: value,
          },
          '#withSecurityhub': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSecurityhub(value): {
            securityhub: value,
          },
          '#withSecuritylake': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSecuritylake(value): {
            securitylake: value,
          },
          '#withServerlessapplicationrepository': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withServerlessapplicationrepository(value): {
            serverlessapplicationrepository: value,
          },
          '#withServerlessapprepo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withServerlessapprepo(value): {
            serverlessapprepo: value,
          },
          '#withServerlessrepo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withServerlessrepo(value): {
            serverlessrepo: value,
          },
          '#withServicecatalog': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withServicecatalog(value): {
            servicecatalog: value,
          },
          '#withServicecatalogappregistry': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withServicecatalogappregistry(value): {
            servicecatalogappregistry: value,
          },
          '#withServicediscovery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withServicediscovery(value): {
            servicediscovery: value,
          },
          '#withServicequotas': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withServicequotas(value): {
            servicequotas: value,
          },
          '#withSes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSes(value): {
            ses: value,
          },
          '#withSesv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSesv2(value): {
            sesv2: value,
          },
          '#withSfn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSfn(value): {
            sfn: value,
          },
          '#withShield': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withShield(value): {
            shield: value,
          },
          '#withSigner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSigner(value): {
            signer: value,
          },
          '#withSimpledb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSimpledb(value): {
            simpledb: value,
          },
          '#withSns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSns(value): {
            sns: value,
          },
          '#withSqs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSqs(value): {
            sqs: value,
          },
          '#withSsm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSsm(value): {
            ssm: value,
          },
          '#withSsmcontacts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSsmcontacts(value): {
            ssmcontacts: value,
          },
          '#withSsmincidents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSsmincidents(value): {
            ssmincidents: value,
          },
          '#withSsmquicksetup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSsmquicksetup(value): {
            ssmquicksetup: value,
          },
          '#withSsmsap': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSsmsap(value): {
            ssmsap: value,
          },
          '#withSso': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSso(value): {
            sso: value,
          },
          '#withSsoadmin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSsoadmin(value): {
            ssoadmin: value,
          },
          '#withStepfunctions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withStepfunctions(value): {
            stepfunctions: value,
          },
          '#withStoragegateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withStoragegateway(value): {
            storagegateway: value,
          },
          '#withSts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSts(value): {
            sts: value,
          },
          '#withSwf': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSwf(value): {
            swf: value,
          },
          '#withSynthetics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withSynthetics(value): {
            synthetics: value,
          },
          '#withTaxsettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withTaxsettings(value): {
            taxsettings: value,
          },
          '#withTimestreaminfluxdb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withTimestreaminfluxdb(value): {
            timestreaminfluxdb: value,
          },
          '#withTimestreamquery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withTimestreamquery(value): {
            timestreamquery: value,
          },
          '#withTimestreamwrite': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withTimestreamwrite(value): {
            timestreamwrite: value,
          },
          '#withTranscribe': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withTranscribe(value): {
            transcribe: value,
          },
          '#withTranscribeservice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withTranscribeservice(value): {
            transcribeservice: value,
          },
          '#withTransfer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withTransfer(value): {
            transfer: value,
          },
          '#withVerifiedpermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withVerifiedpermissions(value): {
            verifiedpermissions: value,
          },
          '#withVpclattice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withVpclattice(value): {
            vpclattice: value,
          },
          '#withWaf': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withWaf(value): {
            waf: value,
          },
          '#withWafregional': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withWafregional(value): {
            wafregional: value,
          },
          '#withWafv2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withWafv2(value): {
            wafv2: value,
          },
          '#withWellarchitected': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withWellarchitected(value): {
            wellarchitected: value,
          },
          '#withWorklink': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withWorklink(value): {
            worklink: value,
          },
          '#withWorkspaces': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withWorkspaces(value): {
            workspaces: value,
          },
          '#withWorkspacesweb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withWorkspacesweb(value): {
            workspacesweb: value,
          },
          '#withXray': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Use this to override the default service endpoint URL' } },
          withXray(value): {
            xray: value,
          },
        },
      '#withForbiddenAccountIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withForbiddenAccountIds(value): {
        spec+: {
          forbidden_account_ids:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withForbiddenAccountIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withForbiddenAccountIdsMixin(value): {
        spec+: {
          forbidden_account_ids+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withHttpProxy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or `http_proxy` environment variables.' } },
      withHttpProxy(value): {
        spec+: {
          http_proxy: value,
        },
      },
      '#withHttpsProxy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or `https_proxy` environment variables.' } },
      withHttpsProxy(value): {
        spec+: {
          https_proxy: value,
        },
      },
      '#withIgnoreTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIgnoreTags(value): {
        spec+: {
          ignore_tags:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withIgnoreTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIgnoreTagsMixin(value): {
        spec+: {
          ignore_tags+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      ignore_tags+:
        {
          '#': { help: '', name: 'ignore_tags' },
          '#withKeyPrefixes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Resource tag key prefixes to ignore across all resources. Can also be configured with the TF_AWS_IGNORE_TAGS_KEY_PREFIXES environment variable.' } },
          withKeyPrefixes(value): {
            key_prefixes:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withKeyPrefixesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Resource tag key prefixes to ignore across all resources. Can also be configured with the TF_AWS_IGNORE_TAGS_KEY_PREFIXES environment variable.' } },
          withKeyPrefixesMixin(value): {
            key_prefixes+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Resource tag keys to ignore across all resources. Can also be configured with the TF_AWS_IGNORE_TAGS_KEYS environment variable.' } },
          withKeys(value): {
            keys:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'Resource tag keys to ignore across all resources. Can also be configured with the TF_AWS_IGNORE_TAGS_KEYS environment variable.' } },
          withKeysMixin(value): {
            keys+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withInsecure': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: 'Explicitly allow the provider to perform "insecure" SSL requests. If omitted, default value is `false`' } },
      withInsecure(value=true): {
        spec+: {
          insecure: value,
        },
      },
      '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: 'The maximum number of times an AWS API request is\nbeing executed. If the API request still fails, an error is\nthrown.' } },
      withMaxRetries(value): {
        spec+: {
          max_retries: value,
        },
      },
      '#withNoProxy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or `no_proxy` environment variables.' } },
      withNoProxy(value): {
        spec+: {
          no_proxy: value,
        },
      },
      '#withProfile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The profile for API operations. If not set, the default profile\ncreated with `aws configure` will be used.' } },
      withProfile(value): {
        spec+: {
          profile: value,
        },
      },
      '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The region where AWS operations will take place. Examples\nare us-east-1, us-west-2, etc.' } },
      withRegion(value): {
        spec+: {
          region: value,
        },
      },
      '#withRetryMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the `AWS_RETRY_MODE` environment variable.' } },
      withRetryMode(value): {
        spec+: {
          retry_mode: value,
        },
      },
      '#withS3UsEast1RegionalEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid values are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment variable or the `s3_us_east_1_regional_endpoint` shared config file parameter' } },
      withS3UsEast1RegionalEndpoint(value): {
        spec+: {
          s3_us_east_1_regional_endpoint: value,
        },
      },
      '#withS3UsePathStyle': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: 'Set this to true to enable the request to use path-style addressing,\ni.e., https://s3.amazonaws.com/BUCKET/KEY. By default, the S3 client will\nuse virtual hosted bucket addressing when possible\n(https://BUCKET.s3.amazonaws.com/KEY). Specific to the Amazon S3 service.' } },
      withS3UsePathStyle(value=true): {
        spec+: {
          s3_use_path_style: value,
        },
      },
      '#withSecretKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: "The secret key for API operations. You can retrieve this\nfrom the 'Security & Credentials' section of the AWS console." } },
      withSecretKey(value): {
        spec+: {
          secret_key: value,
        },
      },
      '#withSharedConfigFiles': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'List of paths to shared config files. If not set, defaults to [~/.aws/config].' } },
      withSharedConfigFiles(value): {
        spec+: {
          shared_config_files:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSharedConfigFilesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'List of paths to shared config files. If not set, defaults to [~/.aws/config].' } },
      withSharedConfigFilesMixin(value): {
        spec+: {
          shared_config_files+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSharedCredentialsFiles': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].' } },
      withSharedCredentialsFiles(value): {
        spec+: {
          shared_credentials_files:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSharedCredentialsFilesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: 'List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].' } },
      withSharedCredentialsFilesMixin(value): {
        spec+: {
          shared_credentials_files+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSkipCredentialsValidation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: 'Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS available/implemented.' } },
      withSkipCredentialsValidation(value=true): {
        spec+: {
          skip_credentials_validation: value,
        },
      },
      '#withSkipMetadataApiCheck': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.' } },
      withSkipMetadataApiCheck(value): {
        spec+: {
          skip_metadata_api_check: value,
        },
      },
      '#withSkipRegionValidation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: 'Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are not public (yet).' } },
      withSkipRegionValidation(value=true): {
        spec+: {
          skip_region_validation: value,
        },
      },
      '#withSkipRequestingAccountId': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: 'Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.' } },
      withSkipRequestingAccountId(value=true): {
        spec+: {
          skip_requesting_account_id: value,
        },
      },
      '#withStsRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'The region where AWS STS operations will take place. Examples\nare us-east-1 and us-west-2.' } },
      withStsRegion(value): {
        spec+: {
          sts_region: value,
        },
      },
      '#withToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: 'session token. A session token is only required if you are\nusing temporary security credentials.' } },
      withToken(value): {
        spec+: {
          token: value,
        },
      },
      '#withTokenBucketRateLimiterCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: "The capacity of the AWS SDK's token bucket rate limiter." } },
      withTokenBucketRateLimiterCapacity(value): {
        spec+: {
          token_bucket_rate_limiter_capacity: value,
        },
      },
      '#withUseDualstackEndpoint': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: 'Resolve an endpoint with DualStack capability' } },
      withUseDualstackEndpoint(value=true): {
        spec+: {
          use_dualstack_endpoint: value,
        },
      },
      '#withUseFipsEndpoint': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: 'Resolve an endpoint with FIPS capability' } },
      withUseFipsEndpoint(value=true): {
        spec+: {
          use_fips_endpoint: value,
        },
      },
    },
}
