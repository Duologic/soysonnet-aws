// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'workspaces',
  },
  aws_workspaces_bundle:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_workspaces_bundle+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBundleId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBundleId(value): {
        bundle_id: value,
      },
      '#withComputeType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withComputeType(value): {
        compute_type:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withComputeTypeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withComputeTypeMixin(value): {
        compute_type+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      compute_type+:
        {
          '#': { help: '', name: 'compute_type' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwner(value): {
        owner: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRootStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRootStorage(value): {
        root_storage:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRootStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRootStorageMixin(value): {
        root_storage+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      root_storage+:
        {
          '#': { help: '', name: 'root_storage' },
          '#withCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCapacity(value): {
            capacity: value,
          },
        },
      '#withUserStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUserStorage(value): {
        user_storage:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withUserStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUserStorageMixin(value): {
        user_storage+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      user_storage+:
        {
          '#': { help: '', name: 'user_storage' },
          '#withCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCapacity(value): {
            capacity: value,
          },
        },
    },
  aws_workspaces_directory:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'directory_id', type: 'string' }], help: '' } },
      new(tf_resource_key, directory_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withDirectoryId(directory_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_workspaces_directory+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAlias(value): {
        alias: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomerUserName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomerUserName(value): {
        customer_user_name: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDirectoryId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDirectoryId(value): {
        directory_id: value,
      },
      '#withDirectoryName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDirectoryName(value): {
        directory_name: value,
      },
      '#withDirectoryType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDirectoryType(value): {
        directory_type: value,
      },
      '#withDnsIpAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDnsIpAddresses(value): {
        dns_ip_addresses:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDnsIpAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDnsIpAddressesMixin(value): {
        dns_ip_addresses+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIamRoleId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIamRoleId(value): {
        iam_role_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIpGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIpGroupIds(value): {
        ip_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIpGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIpGroupIdsMixin(value): {
        ip_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRegistrationCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRegistrationCode(value): {
        registration_code: value,
      },
      '#withSamlProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSamlProperties(value): {
        saml_properties:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSamlPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSamlPropertiesMixin(value): {
        saml_properties+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      saml_properties+:
        {
          '#': { help: '', name: 'saml_properties' },
          '#withRelayStateParameterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRelayStateParameterName(value): {
            relay_state_parameter_name: value,
          },
          '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatus(value): {
            status: value,
          },
          '#withUserAccessUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserAccessUrl(value): {
            user_access_url: value,
          },
        },
      '#withSelfServicePermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSelfServicePermissions(value): {
        self_service_permissions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSelfServicePermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSelfServicePermissionsMixin(value): {
        self_service_permissions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      self_service_permissions+:
        {
          '#': { help: '', name: 'self_service_permissions' },
          '#withChangeComputeType': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withChangeComputeType(value=true): {
            change_compute_type: value,
          },
          '#withIncreaseVolumeSize': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncreaseVolumeSize(value=true): {
            increase_volume_size: value,
          },
          '#withRebuildWorkspace': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withRebuildWorkspace(value=true): {
            rebuild_workspace: value,
          },
          '#withRestartWorkspace': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withRestartWorkspace(value=true): {
            restart_workspace: value,
          },
          '#withSwitchRunningMode': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withSwitchRunningMode(value=true): {
            switch_running_mode: value,
          },
        },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withWorkspaceAccessProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWorkspaceAccessProperties(value): {
        workspace_access_properties:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withWorkspaceAccessPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWorkspaceAccessPropertiesMixin(value): {
        workspace_access_properties+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      workspace_access_properties+:
        {
          '#': { help: '', name: 'workspace_access_properties' },
          '#withDeviceTypeAndroid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeAndroid(value): {
            device_type_android: value,
          },
          '#withDeviceTypeChromeos': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeChromeos(value): {
            device_type_chromeos: value,
          },
          '#withDeviceTypeIos': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeIos(value): {
            device_type_ios: value,
          },
          '#withDeviceTypeLinux': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeLinux(value): {
            device_type_linux: value,
          },
          '#withDeviceTypeOsx': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeOsx(value): {
            device_type_osx: value,
          },
          '#withDeviceTypeWeb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeWeb(value): {
            device_type_web: value,
          },
          '#withDeviceTypeWindows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeWindows(value): {
            device_type_windows: value,
          },
          '#withDeviceTypeZeroclient': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceTypeZeroclient(value): {
            device_type_zeroclient: value,
          },
        },
      '#withWorkspaceCreationProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWorkspaceCreationProperties(value): {
        workspace_creation_properties:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withWorkspaceCreationPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWorkspaceCreationPropertiesMixin(value): {
        workspace_creation_properties+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      workspace_creation_properties+:
        {
          '#': { help: '', name: 'workspace_creation_properties' },
          '#withCustomSecurityGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCustomSecurityGroupId(value): {
            custom_security_group_id: value,
          },
          '#withDefaultOu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDefaultOu(value): {
            default_ou: value,
          },
          '#withEnableInternetAccess': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableInternetAccess(value=true): {
            enable_internet_access: value,
          },
          '#withEnableMaintenanceMode': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableMaintenanceMode(value=true): {
            enable_maintenance_mode: value,
          },
          '#withUserEnabledAsLocalAdministrator': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUserEnabledAsLocalAdministrator(value=true): {
            user_enabled_as_local_administrator: value,
          },
        },
      '#withWorkspaceSecurityGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkspaceSecurityGroupId(value): {
        workspace_security_group_id: value,
      },
    },
  aws_workspaces_image:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'image_id', type: 'string' }], help: '' } },
      new(tf_resource_key, image_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withImageId(image_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_workspaces_image+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withImageId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageId(value): {
        image_id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOperatingSystemType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOperatingSystemType(value): {
        operating_system_type: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRequiredTenancy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRequiredTenancy(value): {
        required_tenancy: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
    },
  aws_workspaces_workspace:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_workspaces_workspace+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBundleId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBundleId(value): {
        bundle_id: value,
      },
      '#withComputerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComputerName(value): {
        computer_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDirectoryId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDirectoryId(value): {
        directory_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIpAddress(value): {
        ip_address: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRootVolumeEncryptionEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withRootVolumeEncryptionEnabled(value=true): {
        root_volume_encryption_enabled: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUserName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserName(value): {
        user_name: value,
      },
      '#withUserVolumeEncryptionEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withUserVolumeEncryptionEnabled(value=true): {
        user_volume_encryption_enabled: value,
      },
      '#withVolumeEncryptionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVolumeEncryptionKey(value): {
        volume_encryption_key: value,
      },
      '#withWorkspaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkspaceId(value): {
        workspace_id: value,
      },
      '#withWorkspaceProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWorkspaceProperties(value): {
        workspace_properties:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withWorkspacePropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWorkspacePropertiesMixin(value): {
        workspace_properties+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      workspace_properties+:
        {
          '#': { help: '', name: 'workspace_properties' },
          '#withComputeTypeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withComputeTypeName(value): {
            compute_type_name: value,
          },
          '#withRootVolumeSizeGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRootVolumeSizeGib(value): {
            root_volume_size_gib: value,
          },
          '#withRunningMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRunningMode(value): {
            running_mode: value,
          },
          '#withRunningModeAutoStopTimeoutInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRunningModeAutoStopTimeoutInMinutes(value): {
            running_mode_auto_stop_timeout_in_minutes: value,
          },
          '#withUserVolumeSizeGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withUserVolumeSizeGib(value): {
            user_volume_size_gib: value,
          },
        },
    },
}
