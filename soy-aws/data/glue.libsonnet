// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'glue',
  },
  aws_glue_catalog_table:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'database_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, database_name, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withDatabaseName(database_name)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_glue_catalog_table: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCatalogId(value): {
        catalog_id: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDatabaseName(value): {
        database_name: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwner(value): {
        owner: value,
      },
      '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withParameters(value): {
        parameters: value,
      },
      '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withParametersMixin(value): {
        parameters+: value,
      },
      '#withPartitionIndex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPartitionIndex(value): {
        partition_index:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPartitionIndexMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPartitionIndexMixin(value): {
        partition_index+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      partition_index+:
        {
          '#': { help: '', name: 'partition_index' },
          '#withIndexName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIndexName(value): {
            index_name: value,
          },
          '#withIndexStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIndexStatus(value): {
            index_status: value,
          },
          '#withKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKeys(value): {
            keys:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKeysMixin(value): {
            keys+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withPartitionKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPartitionKeys(value): {
        partition_keys:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPartitionKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPartitionKeysMixin(value): {
        partition_keys+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      partition_keys+:
        {
          '#': { help: '', name: 'partition_keys' },
          '#withComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withComment(value): {
            comment: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withQueryAsOfTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQueryAsOfTime(value): {
        query_as_of_time: value,
      },
      '#withRetention': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRetention(value): {
        retention: value,
      },
      '#withStorageDescriptor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStorageDescriptor(value): {
        storage_descriptor:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStorageDescriptorMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStorageDescriptorMixin(value): {
        storage_descriptor+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      storage_descriptor+:
        {
          '#': { help: '', name: 'storage_descriptor' },
          '#withAdditionalLocations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdditionalLocations(value): {
            additional_locations:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAdditionalLocationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdditionalLocationsMixin(value): {
            additional_locations+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBucketColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBucketColumns(value): {
            bucket_columns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBucketColumnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBucketColumnsMixin(value): {
            bucket_columns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withColumns(value): {
            columns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withColumnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withColumnsMixin(value): {
            columns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          columns+:
            {
              '#': { help: '', name: 'columns' },
              '#withComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withComment(value): {
                comment: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParameters(value): {
                parameters: value,
              },
              '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParametersMixin(value): {
                parameters+: value,
              },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                type: value,
              },
            },
          '#withCompressed': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCompressed(value=true): {
            compressed: value,
          },
          '#withInputFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInputFormat(value): {
            input_format: value,
          },
          '#withLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLocation(value): {
            location: value,
          },
          '#withNumberOfBuckets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfBuckets(value): {
            number_of_buckets: value,
          },
          '#withOutputFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withOutputFormat(value): {
            output_format: value,
          },
          '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withParameters(value): {
            parameters: value,
          },
          '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withParametersMixin(value): {
            parameters+: value,
          },
          '#withSchemaReference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSchemaReference(value): {
            schema_reference:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSchemaReferenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSchemaReferenceMixin(value): {
            schema_reference+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          schema_reference+:
            {
              '#': { help: '', name: 'schema_reference' },
              '#withSchemaId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSchemaId(value): {
                schema_id:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSchemaIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSchemaIdMixin(value): {
                schema_id+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              schema_id+:
                {
                  '#': { help: '', name: 'schema_id' },
                  '#withRegistryName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withRegistryName(value): {
                    registry_name: value,
                  },
                  '#withSchemaArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSchemaArn(value): {
                    schema_arn: value,
                  },
                  '#withSchemaName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSchemaName(value): {
                    schema_name: value,
                  },
                },
              '#withSchemaVersionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSchemaVersionId(value): {
                schema_version_id: value,
              },
              '#withSchemaVersionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withSchemaVersionNumber(value): {
                schema_version_number: value,
              },
            },
          '#withSerDeInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSerDeInfo(value): {
            ser_de_info:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSerDeInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSerDeInfoMixin(value): {
            ser_de_info+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          ser_de_info+:
            {
              '#': { help: '', name: 'ser_de_info' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParameters(value): {
                parameters: value,
              },
              '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withParametersMixin(value): {
                parameters+: value,
              },
              '#withSerializationLibrary': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSerializationLibrary(value): {
                serialization_library: value,
              },
            },
          '#withSkewedInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSkewedInfo(value): {
            skewed_info:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSkewedInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSkewedInfoMixin(value): {
            skewed_info+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          skewed_info+:
            {
              '#': { help: '', name: 'skewed_info' },
              '#withSkewedColumnNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSkewedColumnNames(value): {
                skewed_column_names:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSkewedColumnNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSkewedColumnNamesMixin(value): {
                skewed_column_names+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSkewedColumnValueLocationMaps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSkewedColumnValueLocationMaps(value): {
                skewed_column_value_location_maps: value,
              },
              '#withSkewedColumnValueLocationMapsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withSkewedColumnValueLocationMapsMixin(value): {
                skewed_column_value_location_maps+: value,
              },
              '#withSkewedColumnValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSkewedColumnValues(value): {
                skewed_column_values:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSkewedColumnValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSkewedColumnValuesMixin(value): {
                skewed_column_values+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withSortColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSortColumns(value): {
            sort_columns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSortColumnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSortColumnsMixin(value): {
            sort_columns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          sort_columns+:
            {
              '#': { help: '', name: 'sort_columns' },
              '#withColumn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withColumn(value): {
                column: value,
              },
              '#withSortOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withSortOrder(value): {
                sort_order: value,
              },
            },
          '#withStoredAsSubDirectories': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withStoredAsSubDirectories(value=true): {
            stored_as_sub_directories: value,
          },
        },
      '#withTableType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTableType(value): {
        table_type: value,
      },
      '#withTargetTable': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTargetTable(value): {
        target_table:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTargetTableMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTargetTableMixin(value): {
        target_table+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      target_table+:
        {
          '#': { help: '', name: 'target_table' },
          '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogId(value): {
            catalog_id: value,
          },
          '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatabaseName(value): {
            database_name: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRegion(value): {
            region: value,
          },
        },
      '#withTransactionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTransactionId(value): {
        transaction_id: value,
      },
      '#withViewExpandedText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withViewExpandedText(value): {
        view_expanded_text: value,
      },
      '#withViewOriginalText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withViewOriginalText(value): {
        view_original_text: value,
      },
    },
  aws_glue_connection:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_glue_connection: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCatalogId(value): {
        catalog_id: value,
      },
      '#withConnectionProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withConnectionProperties(value): {
        connection_properties: value,
      },
      '#withConnectionPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withConnectionPropertiesMixin(value): {
        connection_properties+: value,
      },
      '#withConnectionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withConnectionType(value): {
        connection_type: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withMatchCriteria': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMatchCriteria(value): {
        match_criteria:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMatchCriteriaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMatchCriteriaMixin(value): {
        match_criteria+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withPhysicalConnectionRequirements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPhysicalConnectionRequirements(value): {
        physical_connection_requirements:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPhysicalConnectionRequirementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPhysicalConnectionRequirementsMixin(value): {
        physical_connection_requirements+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      physical_connection_requirements+:
        {
          '#': { help: '', name: 'physical_connection_requirements' },
          '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAvailabilityZone(value): {
            availability_zone: value,
          },
          '#withSecurityGroupIdList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIdList(value): {
            security_group_id_list:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupIdListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIdListMixin(value): {
            security_group_id_list+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSubnetId(value): {
            subnet_id: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
  aws_glue_data_catalog_encryption_settings:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'catalog_id', type: 'string' }], help: '' } },
      new(tf_resource_key, catalog_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withCatalogId(catalog_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_glue_data_catalog_encryption_settings: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCatalogId(value): {
        catalog_id: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDataCatalogEncryptionSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDataCatalogEncryptionSettings(value): {
        data_catalog_encryption_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDataCatalogEncryptionSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDataCatalogEncryptionSettingsMixin(value): {
        data_catalog_encryption_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      data_catalog_encryption_settings+:
        {
          '#': { help: '', name: 'data_catalog_encryption_settings' },
          '#withConnectionPasswordEncryption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConnectionPasswordEncryption(value): {
            connection_password_encryption:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConnectionPasswordEncryptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConnectionPasswordEncryptionMixin(value): {
            connection_password_encryption+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          connection_password_encryption+:
            {
              '#': { help: '', name: 'connection_password_encryption' },
              '#withAwsKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAwsKmsKeyId(value): {
                aws_kms_key_id: value,
              },
              '#withReturnConnectionPasswordEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withReturnConnectionPasswordEncrypted(value=true): {
                return_connection_password_encrypted: value,
              },
            },
          '#withEncryptionAtRest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEncryptionAtRest(value): {
            encryption_at_rest:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEncryptionAtRestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEncryptionAtRestMixin(value): {
            encryption_at_rest+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          encryption_at_rest+:
            {
              '#': { help: '', name: 'encryption_at_rest' },
              '#withCatalogEncryptionMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCatalogEncryptionMode(value): {
                catalog_encryption_mode: value,
              },
              '#withCatalogEncryptionServiceRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCatalogEncryptionServiceRole(value): {
                catalog_encryption_service_role: value,
              },
              '#withSseAwsKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSseAwsKmsKeyId(value): {
                sse_aws_kms_key_id: value,
              },
            },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_glue_registry:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_glue_registry: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_glue_script:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'dag_edge', type: 'array' }, { default: null, enums: null, name: 'dag_node', type: 'array' }], help: '' } },
      new(tf_resource_key, dag_edge, dag_node):
        self.withTfResourceKey(tf_resource_key)
        + self.withDagEdge(dag_edge)
        + self.withDagNode(dag_node),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_glue_script: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDagEdge': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDagEdge(value): {
        dag_edge:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDagEdgeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDagEdgeMixin(value): {
        dag_edge+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      dag_edge+:
        {
          '#': { help: '', name: 'dag_edge' },
          '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSource(value): {
            source: value,
          },
          '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTarget(value): {
            target: value,
          },
          '#withTargetParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTargetParameter(value): {
            target_parameter: value,
          },
        },
      '#withDagNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDagNode(value): {
        dag_node:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDagNodeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDagNodeMixin(value): {
        dag_node+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      dag_node+:
        {
          '#': { help: '', name: 'dag_node' },
          '#withArgs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withArgs(value): {
            args:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withArgsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withArgsMixin(value): {
            args+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          args+:
            {
              '#': { help: '', name: 'args' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withParam': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withParam(value=true): {
                param: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withLineNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withLineNumber(value): {
            line_number: value,
          },
          '#withNodeType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNodeType(value): {
            node_type: value,
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLanguage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLanguage(value): {
        language: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withPythonScript': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPythonScript(value): {
        python_script: value,
      },
      '#withScalaCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withScalaCode(value): {
        scala_code: value,
      },
    },
}
