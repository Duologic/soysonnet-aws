// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'appmesh',
  },
  aws_appmesh_gateway_route:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'virtual_gateway_name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name, virtual_gateway_name):
        {
          local this = self,
          data: {
            aws_appmesh_gateway_route: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withVirtualGatewayName(virtual_gateway_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        spec+: {
          last_updated_date: value,
        },
      },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        spec+: {
          mesh_name: value,
        },
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        spec+: {
          mesh_owner: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        spec+: {
          resource_owner: value,
        },
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpec(value): {
        spec:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecMixin(value): {
        spec+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      spec+:
        {
          '#': { help: '', name: 'spec' },
          '#withGrpcRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGrpcRoute(value): {
            grpc_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withGrpcRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGrpcRouteMixin(value): {
            grpc_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          grpc_route+:
            {
              '#': { help: '', name: 'grpc_route' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAction(value): {
                action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionMixin(value): {
                action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action+:
                {
                  '#': { help: '', name: 'action' },
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTarget(value): {
                    target:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetMixin(value): {
                    target+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  target+:
                    {
                      '#': { help: '', name: 'target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVirtualService(value): {
                        virtual_service:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVirtualServiceMixin(value): {
                        virtual_service+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      virtual_service+:
                        {
                          '#': { help: '', name: 'virtual_service' },
                          '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withVirtualServiceName(value): {
                            virtual_service_name: value,
                          },
                        },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatch(value): {
                match:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchMixin(value): {
                match+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              match+:
                {
                  '#': { help: '', name: 'match' },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withServiceName(value): {
                    service_name: value,
                  },
                },
            },
          '#withHttp2Route': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttp2Route(value): {
            http2_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHttp2RouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttp2RouteMixin(value): {
            http2_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          http2_route+:
            {
              '#': { help: '', name: 'http2_route' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAction(value): {
                action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionMixin(value): {
                action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action+:
                {
                  '#': { help: '', name: 'action' },
                  '#withRewrite': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRewrite(value): {
                    rewrite:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withRewriteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRewriteMixin(value): {
                    rewrite+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  rewrite+:
                    {
                      '#': { help: '', name: 'rewrite' },
                      '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withHostname(value): {
                        hostname:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withHostnameMixin(value): {
                        hostname+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      hostname+:
                        {
                          '#': { help: '', name: 'hostname' },
                          '#withDefaultTargetHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultTargetHostname(value): {
                            default_target_hostname: value,
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPath(value): {
                        path:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPathMixin(value): {
                        path+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      path+:
                        {
                          '#': { help: '', name: 'path' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                        },
                      '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPrefix(value): {
                        prefix:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPrefixMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPrefixMixin(value): {
                        prefix+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      prefix+:
                        {
                          '#': { help: '', name: 'prefix' },
                          '#withDefaultPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultPrefix(value): {
                            default_prefix: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTarget(value): {
                    target:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetMixin(value): {
                    target+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  target+:
                    {
                      '#': { help: '', name: 'target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVirtualService(value): {
                        virtual_service:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVirtualServiceMixin(value): {
                        virtual_service+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      virtual_service+:
                        {
                          '#': { help: '', name: 'virtual_service' },
                          '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withVirtualServiceName(value): {
                            virtual_service_name: value,
                          },
                        },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatch(value): {
                match:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchMixin(value): {
                match+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              match+:
                {
                  '#': { help: '', name: 'match' },
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    header:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    header+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            prefix: value,
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRange(value): {
                            range:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRangeMixin(value): {
                            range+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          range+:
                            {
                              '#': { help: '', name: 'range' },
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                end: value,
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                start: value,
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            regex: value,
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            suffix: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHostname(value): {
                    hostname:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHostnameMixin(value): {
                    hostname+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  hostname+:
                    {
                      '#': { help: '', name: 'hostname' },
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        exact: value,
                      },
                      '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSuffix(value): {
                        suffix: value,
                      },
                    },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPath(value): {
                    path:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPathMixin(value): {
                    path+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  path+:
                    {
                      '#': { help: '', name: 'path' },
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        exact: value,
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        regex: value,
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    prefix: value,
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    query_parameter:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    query_parameter+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                },
            },
          '#withHttpRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttpRoute(value): {
            http_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHttpRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttpRouteMixin(value): {
            http_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          http_route+:
            {
              '#': { help: '', name: 'http_route' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAction(value): {
                action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionMixin(value): {
                action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action+:
                {
                  '#': { help: '', name: 'action' },
                  '#withRewrite': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRewrite(value): {
                    rewrite:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withRewriteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRewriteMixin(value): {
                    rewrite+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  rewrite+:
                    {
                      '#': { help: '', name: 'rewrite' },
                      '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withHostname(value): {
                        hostname:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withHostnameMixin(value): {
                        hostname+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      hostname+:
                        {
                          '#': { help: '', name: 'hostname' },
                          '#withDefaultTargetHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultTargetHostname(value): {
                            default_target_hostname: value,
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPath(value): {
                        path:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPathMixin(value): {
                        path+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      path+:
                        {
                          '#': { help: '', name: 'path' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                        },
                      '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPrefix(value): {
                        prefix:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPrefixMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPrefixMixin(value): {
                        prefix+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      prefix+:
                        {
                          '#': { help: '', name: 'prefix' },
                          '#withDefaultPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withDefaultPrefix(value): {
                            default_prefix: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTarget(value): {
                    target:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTargetMixin(value): {
                    target+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  target+:
                    {
                      '#': { help: '', name: 'target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVirtualService(value): {
                        virtual_service:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVirtualServiceMixin(value): {
                        virtual_service+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      virtual_service+:
                        {
                          '#': { help: '', name: 'virtual_service' },
                          '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withVirtualServiceName(value): {
                            virtual_service_name: value,
                          },
                        },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatch(value): {
                match:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchMixin(value): {
                match+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              match+:
                {
                  '#': { help: '', name: 'match' },
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    header:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    header+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            prefix: value,
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRange(value): {
                            range:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRangeMixin(value): {
                            range+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          range+:
                            {
                              '#': { help: '', name: 'range' },
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                end: value,
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                start: value,
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            regex: value,
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            suffix: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHostname(value): {
                    hostname:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHostnameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHostnameMixin(value): {
                    hostname+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  hostname+:
                    {
                      '#': { help: '', name: 'hostname' },
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        exact: value,
                      },
                      '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSuffix(value): {
                        suffix: value,
                      },
                    },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPath(value): {
                    path:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPathMixin(value): {
                    path+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  path+:
                    {
                      '#': { help: '', name: 'path' },
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        exact: value,
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        regex: value,
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    prefix: value,
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    query_parameter:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    query_parameter+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                },
            },
          '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPriority(value): {
            priority: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withVirtualGatewayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVirtualGatewayName(value): {
        spec+: {
          virtual_gateway_name: value,
        },
      },
    },
  aws_appmesh_mesh:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        {
          local this = self,
          data: {
            aws_appmesh_mesh: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        spec+: {
          last_updated_date: value,
        },
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        spec+: {
          mesh_owner: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        spec+: {
          resource_owner: value,
        },
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpec(value): {
        spec:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecMixin(value): {
        spec+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      spec+:
        {
          '#': { help: '', name: 'spec' },
          '#withEgressFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEgressFilter(value): {
            egress_filter:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEgressFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEgressFilterMixin(value): {
            egress_filter+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          egress_filter+:
            {
              '#': { help: '', name: 'egress_filter' },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                type: value,
              },
            },
          '#withServiceDiscovery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withServiceDiscovery(value): {
            service_discovery:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withServiceDiscoveryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withServiceDiscoveryMixin(value): {
            service_discovery+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          service_discovery+:
            {
              '#': { help: '', name: 'service_discovery' },
              '#withIpPreference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIpPreference(value): {
                ip_preference: value,
              },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_appmesh_route:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'virtual_router_name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name, virtual_router_name):
        {
          local this = self,
          data: {
            aws_appmesh_route: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name)
        + self.withVirtualRouterName(virtual_router_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        spec+: {
          last_updated_date: value,
        },
      },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        spec+: {
          mesh_name: value,
        },
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        spec+: {
          mesh_owner: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        spec+: {
          resource_owner: value,
        },
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpec(value): {
        spec:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecMixin(value): {
        spec+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      spec+:
        {
          '#': { help: '', name: 'spec' },
          '#withGrpcRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGrpcRoute(value): {
            grpc_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withGrpcRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGrpcRouteMixin(value): {
            grpc_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          grpc_route+:
            {
              '#': { help: '', name: 'grpc_route' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAction(value): {
                action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionMixin(value): {
                action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action+:
                {
                  '#': { help: '', name: 'action' },
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    weighted_target:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    weighted_target+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatch(value): {
                match:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchMixin(value): {
                match+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              match+:
                {
                  '#': { help: '', name: 'match' },
                  '#withMetadata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMetadata(value): {
                    metadata:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMetadataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMetadataMixin(value): {
                    metadata+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  metadata+:
                    {
                      '#': { help: '', name: 'metadata' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            prefix: value,
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRange(value): {
                            range:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRangeMixin(value): {
                            range+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          range+:
                            {
                              '#': { help: '', name: 'range' },
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                end: value,
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                start: value,
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            regex: value,
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            suffix: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withMethodName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMethodName(value): {
                    method_name: value,
                  },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    prefix: value,
                  },
                  '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withServiceName(value): {
                    service_name: value,
                  },
                },
              '#withRetryPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRetryPolicy(value): {
                retry_policy:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withRetryPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRetryPolicyMixin(value): {
                retry_policy+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              retry_policy+:
                {
                  '#': { help: '', name: 'retry_policy' },
                  '#withGrpcRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpcRetryEvents(value): {
                    grpc_retry_events:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withGrpcRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpcRetryEventsMixin(value): {
                    grpc_retry_events+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEvents(value): {
                    http_retry_events:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEventsMixin(value): {
                    http_retry_events+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxRetries(value): {
                    max_retries: value,
                  },
                  '#withPerRetryTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRetryTimeout(value): {
                    per_retry_timeout:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPerRetryTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRetryTimeoutMixin(value): {
                    per_retry_timeout+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  per_retry_timeout+:
                    {
                      '#': { help: '', name: 'per_retry_timeout' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withTcpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEvents(value): {
                    tcp_retry_events:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTcpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEventsMixin(value): {
                    tcp_retry_events+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeout(value): {
                timeout:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutMixin(value): {
                timeout+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout+:
                {
                  '#': { help: '', name: 'timeout' },
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdle(value): {
                    idle:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdleMixin(value): {
                    idle+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  idle+:
                    {
                      '#': { help: '', name: 'idle' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRequest(value): {
                    per_request:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRequestMixin(value): {
                    per_request+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  per_request+:
                    {
                      '#': { help: '', name: 'per_request' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
            },
          '#withHttp2Route': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttp2Route(value): {
            http2_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHttp2RouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttp2RouteMixin(value): {
            http2_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          http2_route+:
            {
              '#': { help: '', name: 'http2_route' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAction(value): {
                action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionMixin(value): {
                action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action+:
                {
                  '#': { help: '', name: 'action' },
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    weighted_target:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    weighted_target+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatch(value): {
                match:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchMixin(value): {
                match+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              match+:
                {
                  '#': { help: '', name: 'match' },
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    header:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    header+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            prefix: value,
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRange(value): {
                            range:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRangeMixin(value): {
                            range+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          range+:
                            {
                              '#': { help: '', name: 'range' },
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                end: value,
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                start: value,
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            regex: value,
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            suffix: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMethod(value): {
                    method: value,
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPath(value): {
                    path:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPathMixin(value): {
                    path+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  path+:
                    {
                      '#': { help: '', name: 'path' },
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        exact: value,
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        regex: value,
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    prefix: value,
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    query_parameter:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    query_parameter+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withScheme': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withScheme(value): {
                    scheme: value,
                  },
                },
              '#withRetryPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRetryPolicy(value): {
                retry_policy:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withRetryPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRetryPolicyMixin(value): {
                retry_policy+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              retry_policy+:
                {
                  '#': { help: '', name: 'retry_policy' },
                  '#withHttpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEvents(value): {
                    http_retry_events:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEventsMixin(value): {
                    http_retry_events+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxRetries(value): {
                    max_retries: value,
                  },
                  '#withPerRetryTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRetryTimeout(value): {
                    per_retry_timeout:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPerRetryTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRetryTimeoutMixin(value): {
                    per_retry_timeout+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  per_retry_timeout+:
                    {
                      '#': { help: '', name: 'per_retry_timeout' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withTcpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEvents(value): {
                    tcp_retry_events:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTcpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEventsMixin(value): {
                    tcp_retry_events+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeout(value): {
                timeout:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutMixin(value): {
                timeout+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout+:
                {
                  '#': { help: '', name: 'timeout' },
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdle(value): {
                    idle:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdleMixin(value): {
                    idle+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  idle+:
                    {
                      '#': { help: '', name: 'idle' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRequest(value): {
                    per_request:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRequestMixin(value): {
                    per_request+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  per_request+:
                    {
                      '#': { help: '', name: 'per_request' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
            },
          '#withHttpRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttpRoute(value): {
            http_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHttpRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHttpRouteMixin(value): {
            http_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          http_route+:
            {
              '#': { help: '', name: 'http_route' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAction(value): {
                action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionMixin(value): {
                action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action+:
                {
                  '#': { help: '', name: 'action' },
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    weighted_target:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    weighted_target+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatch(value): {
                match:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchMixin(value): {
                match+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              match+:
                {
                  '#': { help: '', name: 'match' },
                  '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeader(value): {
                    header:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHeaderMixin(value): {
                    header+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  header+:
                    {
                      '#': { help: '', name: 'header' },
                      '#withInvert': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInvert(value=true): {
                        invert: value,
                      },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrefix(value): {
                            prefix: value,
                          },
                          '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRange(value): {
                            range:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withRangeMixin(value): {
                            range+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          range+:
                            {
                              '#': { help: '', name: 'range' },
                              '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withEnd(value): {
                                end: value,
                              },
                              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                              withStart(value): {
                                start: value,
                              },
                            },
                          '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRegex(value): {
                            regex: value,
                          },
                          '#withSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSuffix(value): {
                            suffix: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMethod(value): {
                    method: value,
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPath(value): {
                    path:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPathMixin(value): {
                    path+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  path+:
                    {
                      '#': { help: '', name: 'path' },
                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withExact(value): {
                        exact: value,
                      },
                      '#withRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withRegex(value): {
                        regex: value,
                      },
                    },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrefix(value): {
                    prefix: value,
                  },
                  '#withQueryParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameter(value): {
                    query_parameter:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withQueryParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withQueryParameterMixin(value): {
                    query_parameter+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  query_parameter+:
                    {
                      '#': { help: '', name: 'query_parameter' },
                      '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatch(value): {
                        match:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchMixin(value): {
                        match+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      match+:
                        {
                          '#': { help: '', name: 'match' },
                          '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withExact(value): {
                            exact: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                  '#withScheme': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withScheme(value): {
                    scheme: value,
                  },
                },
              '#withRetryPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRetryPolicy(value): {
                retry_policy:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withRetryPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withRetryPolicyMixin(value): {
                retry_policy+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              retry_policy+:
                {
                  '#': { help: '', name: 'retry_policy' },
                  '#withHttpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEvents(value): {
                    http_retry_events:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpRetryEventsMixin(value): {
                    http_retry_events+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMaxRetries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxRetries(value): {
                    max_retries: value,
                  },
                  '#withPerRetryTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRetryTimeout(value): {
                    per_retry_timeout:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPerRetryTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRetryTimeoutMixin(value): {
                    per_retry_timeout+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  per_retry_timeout+:
                    {
                      '#': { help: '', name: 'per_retry_timeout' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withTcpRetryEvents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEvents(value): {
                    tcp_retry_events:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTcpRetryEventsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpRetryEventsMixin(value): {
                    tcp_retry_events+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeout(value): {
                timeout:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutMixin(value): {
                timeout+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout+:
                {
                  '#': { help: '', name: 'timeout' },
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdle(value): {
                    idle:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdleMixin(value): {
                    idle+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  idle+:
                    {
                      '#': { help: '', name: 'idle' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRequest(value): {
                    per_request:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPerRequestMixin(value): {
                    per_request+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  per_request+:
                    {
                      '#': { help: '', name: 'per_request' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
            },
          '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPriority(value): {
            priority: value,
          },
          '#withTcpRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTcpRoute(value): {
            tcp_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTcpRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTcpRouteMixin(value): {
            tcp_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          tcp_route+:
            {
              '#': { help: '', name: 'tcp_route' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAction(value): {
                action:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionMixin(value): {
                action+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action+:
                {
                  '#': { help: '', name: 'action' },
                  '#withWeightedTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTarget(value): {
                    weighted_target:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withWeightedTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withWeightedTargetMixin(value): {
                    weighted_target+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  weighted_target+:
                    {
                      '#': { help: '', name: 'weighted_target' },
                      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withPort(value): {
                        port: value,
                      },
                      '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVirtualNode(value): {
                        virtual_node: value,
                      },
                      '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withWeight(value): {
                        weight: value,
                      },
                    },
                },
              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatch(value): {
                match:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchMixin(value): {
                match+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              match+:
                {
                  '#': { help: '', name: 'match' },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeout(value): {
                timeout:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutMixin(value): {
                timeout+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout+:
                {
                  '#': { help: '', name: 'timeout' },
                  '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdle(value): {
                    idle:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIdleMixin(value): {
                    idle+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  idle+:
                    {
                      '#': { help: '', name: 'idle' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withVirtualRouterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVirtualRouterName(value): {
        spec+: {
          virtual_router_name: value,
        },
      },
    },
  aws_appmesh_virtual_gateway:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name):
        {
          local this = self,
          data: {
            aws_appmesh_virtual_gateway: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        spec+: {
          last_updated_date: value,
        },
      },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        spec+: {
          mesh_name: value,
        },
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        spec+: {
          mesh_owner: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        spec+: {
          resource_owner: value,
        },
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpec(value): {
        spec:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecMixin(value): {
        spec+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      spec+:
        {
          '#': { help: '', name: 'spec' },
          '#withBackendDefaults': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackendDefaults(value): {
            backend_defaults:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBackendDefaultsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackendDefaultsMixin(value): {
            backend_defaults+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          backend_defaults+:
            {
              '#': { help: '', name: 'backend_defaults' },
              '#withClientPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withClientPolicy(value): {
                client_policy:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withClientPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withClientPolicyMixin(value): {
                client_policy+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              client_policy+:
                {
                  '#': { help: '', name: 'client_policy' },
                  '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTls(value): {
                    tls:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTlsMixin(value): {
                    tls+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  tls+:
                    {
                      '#': { help: '', name: 'tls' },
                      '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCertificate(value): {
                        certificate:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCertificateMixin(value): {
                        certificate+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      certificate+:
                        {
                          '#': { help: '', name: 'certificate' },
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFile(value): {
                            file:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFileMixin(value): {
                            file+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          file+:
                            {
                              '#': { help: '', name: 'file' },
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                certificate_chain: value,
                              },
                              '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withPrivateKey(value): {
                                private_key: value,
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSds(value): {
                            sds:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSdsMixin(value): {
                            sds+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          sds+:
                            {
                              '#': { help: '', name: 'sds' },
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                secret_name: value,
                              },
                            },
                        },
                      '#withEnforce': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withEnforce(value=true): {
                        enforce: value,
                      },
                      '#withPorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPorts(value): {
                        ports:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPortsMixin(value): {
                        ports+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValidation(value): {
                        validation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValidationMixin(value): {
                        validation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      validation+:
                        {
                          '#': { help: '', name: 'validation' },
                          '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSubjectAlternativeNames(value): {
                            subject_alternative_names:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSubjectAlternativeNamesMixin(value): {
                            subject_alternative_names+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          subject_alternative_names+:
                            {
                              '#': { help: '', name: 'subject_alternative_names' },
                              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMatch(value): {
                                match:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMatchMixin(value): {
                                match+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              match+:
                                {
                                  '#': { help: '', name: 'match' },
                                  '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExact(value): {
                                    exact:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExactMixin(value): {
                                    exact+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                            },
                          '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTrust(value): {
                            trust:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTrustMixin(value): {
                            trust+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          trust+:
                            {
                              '#': { help: '', name: 'trust' },
                              '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withAcm(value): {
                                acm:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withAcmMixin(value): {
                                acm+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              acm+:
                                {
                                  '#': { help: '', name: 'acm' },
                                  '#withCertificateAuthorityArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArns(value): {
                                    certificate_authority_arns:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCertificateAuthorityArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArnsMixin(value): {
                                    certificate_authority_arns+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withFile(value): {
                                file:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withFileMixin(value): {
                                file+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              file+:
                                {
                                  '#': { help: '', name: 'file' },
                                  '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withCertificateChain(value): {
                                    certificate_chain: value,
                                  },
                                },
                              '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSds(value): {
                                sds:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSdsMixin(value): {
                                sds+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              sds+:
                                {
                                  '#': { help: '', name: 'sds' },
                                  '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSecretName(value): {
                                    secret_name: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListener(value): {
            listener:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListenerMixin(value): {
            listener+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          listener+:
            {
              '#': { help: '', name: 'listener' },
              '#withConnectionPool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConnectionPool(value): {
                connection_pool:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withConnectionPoolMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConnectionPoolMixin(value): {
                connection_pool+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              connection_pool+:
                {
                  '#': { help: '', name: 'connection_pool' },
                  '#withGrpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpc(value): {
                    grpc:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withGrpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpcMixin(value): {
                    grpc+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  grpc+:
                    {
                      '#': { help: '', name: 'grpc' },
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        max_requests: value,
                      },
                    },
                  '#withHttp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp(value): {
                    http:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpMixin(value): {
                    http+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  http+:
                    {
                      '#': { help: '', name: 'http' },
                      '#withMaxConnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxConnections(value): {
                        max_connections: value,
                      },
                      '#withMaxPendingRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxPendingRequests(value): {
                        max_pending_requests: value,
                      },
                    },
                  '#withHttp2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2(value): {
                    http2:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttp2Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2Mixin(value): {
                    http2+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  http2+:
                    {
                      '#': { help: '', name: 'http2' },
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        max_requests: value,
                      },
                    },
                },
              '#withHealthCheck': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHealthCheck(value): {
                health_check:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withHealthCheckMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHealthCheckMixin(value): {
                health_check+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              health_check+:
                {
                  '#': { help: '', name: 'health_check' },
                  '#withHealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withHealthyThreshold(value): {
                    healthy_threshold: value,
                  },
                  '#withIntervalMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withIntervalMillis(value): {
                    interval_millis: value,
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPath(value): {
                    path: value,
                  },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    protocol: value,
                  },
                  '#withTimeoutMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTimeoutMillis(value): {
                    timeout_millis: value,
                  },
                  '#withUnhealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withUnhealthyThreshold(value): {
                    unhealthy_threshold: value,
                  },
                },
              '#withPortMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortMapping(value): {
                port_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortMappingMixin(value): {
                port_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_mapping+:
                {
                  '#': { help: '', name: 'port_mapping' },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    protocol: value,
                  },
                },
              '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTls(value): {
                tls:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTlsMixin(value): {
                tls+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              tls+:
                {
                  '#': { help: '', name: 'tls' },
                  '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCertificate(value): {
                    certificate:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCertificateMixin(value): {
                    certificate+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  certificate+:
                    {
                      '#': { help: '', name: 'certificate' },
                      '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcm(value): {
                        acm:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcmMixin(value): {
                        acm+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      acm+:
                        {
                          '#': { help: '', name: 'acm' },
                          '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateArn(value): {
                            certificate_arn: value,
                          },
                        },
                      '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFile(value): {
                        file:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFileMixin(value): {
                        file+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      file+:
                        {
                          '#': { help: '', name: 'file' },
                          '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateChain(value): {
                            certificate_chain: value,
                          },
                          '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrivateKey(value): {
                            private_key: value,
                          },
                        },
                      '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSds(value): {
                        sds:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSdsMixin(value): {
                        sds+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      sds+:
                        {
                          '#': { help: '', name: 'sds' },
                          '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSecretName(value): {
                            secret_name: value,
                          },
                        },
                    },
                  '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMode(value): {
                    mode: value,
                  },
                  '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValidation(value): {
                    validation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValidationMixin(value): {
                    validation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  validation+:
                    {
                      '#': { help: '', name: 'validation' },
                      '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSubjectAlternativeNames(value): {
                        subject_alternative_names:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSubjectAlternativeNamesMixin(value): {
                        subject_alternative_names+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      subject_alternative_names+:
                        {
                          '#': { help: '', name: 'subject_alternative_names' },
                          '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatch(value): {
                            match:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchMixin(value): {
                            match+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          match+:
                            {
                              '#': { help: '', name: 'match' },
                              '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExact(value): {
                                exact:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExactMixin(value): {
                                exact+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                        },
                      '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTrust(value): {
                        trust:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTrustMixin(value): {
                        trust+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      trust+:
                        {
                          '#': { help: '', name: 'trust' },
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFile(value): {
                            file:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFileMixin(value): {
                            file+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          file+:
                            {
                              '#': { help: '', name: 'file' },
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                certificate_chain: value,
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSds(value): {
                            sds:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSdsMixin(value): {
                            sds+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          sds+:
                            {
                              '#': { help: '', name: 'sds' },
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                secret_name: value,
                              },
                            },
                        },
                    },
                },
            },
          '#withLogging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogging(value): {
            logging:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLoggingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLoggingMixin(value): {
            logging+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          logging+:
            {
              '#': { help: '', name: 'logging' },
              '#withAccessLog': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAccessLog(value): {
                access_log:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAccessLogMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAccessLogMixin(value): {
                access_log+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              access_log+:
                {
                  '#': { help: '', name: 'access_log' },
                  '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFile(value): {
                    file:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFileMixin(value): {
                    file+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  file+:
                    {
                      '#': { help: '', name: 'file' },
                      '#withFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFormat(value): {
                        format:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withFormatMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFormatMixin(value): {
                        format+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      format+:
                        {
                          '#': { help: '', name: 'format' },
                          '#withJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJson(value): {
                            json:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withJsonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJsonMixin(value): {
                            json+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          json+:
                            {
                              '#': { help: '', name: 'json' },
                              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withKey(value): {
                                key: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withText(value): {
                            text: value,
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withPath(value): {
                        path: value,
                      },
                    },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_appmesh_virtual_node:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name):
        {
          local this = self,
          data: {
            aws_appmesh_virtual_node: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        spec+: {
          last_updated_date: value,
        },
      },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        spec+: {
          mesh_name: value,
        },
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        spec+: {
          mesh_owner: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        spec+: {
          resource_owner: value,
        },
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpec(value): {
        spec:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecMixin(value): {
        spec+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      spec+:
        {
          '#': { help: '', name: 'spec' },
          '#withBackend': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackend(value): {
            backend:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBackendMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackendMixin(value): {
            backend+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          backend+:
            {
              '#': { help: '', name: 'backend' },
              '#withVirtualService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVirtualService(value): {
                virtual_service:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withVirtualServiceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVirtualServiceMixin(value): {
                virtual_service+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              virtual_service+:
                {
                  '#': { help: '', name: 'virtual_service' },
                  '#withClientPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withClientPolicy(value): {
                    client_policy:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withClientPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withClientPolicyMixin(value): {
                    client_policy+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  client_policy+:
                    {
                      '#': { help: '', name: 'client_policy' },
                      '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTls(value): {
                        tls:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTlsMixin(value): {
                        tls+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tls+:
                        {
                          '#': { help: '', name: 'tls' },
                          '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCertificate(value): {
                            certificate:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withCertificateMixin(value): {
                            certificate+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          certificate+:
                            {
                              '#': { help: '', name: 'certificate' },
                              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withFile(value): {
                                file:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withFileMixin(value): {
                                file+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              file+:
                                {
                                  '#': { help: '', name: 'file' },
                                  '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withCertificateChain(value): {
                                    certificate_chain: value,
                                  },
                                  '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withPrivateKey(value): {
                                    private_key: value,
                                  },
                                },
                              '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSds(value): {
                                sds:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSdsMixin(value): {
                                sds+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              sds+:
                                {
                                  '#': { help: '', name: 'sds' },
                                  '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSecretName(value): {
                                    secret_name: value,
                                  },
                                },
                            },
                          '#withEnforce': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withEnforce(value=true): {
                            enforce: value,
                          },
                          '#withPorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPorts(value): {
                            ports:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPortsMixin(value): {
                            ports+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValidation(value): {
                            validation:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValidationMixin(value): {
                            validation+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          validation+:
                            {
                              '#': { help: '', name: 'validation' },
                              '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSubjectAlternativeNames(value): {
                                subject_alternative_names:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSubjectAlternativeNamesMixin(value): {
                                subject_alternative_names+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              subject_alternative_names+:
                                {
                                  '#': { help: '', name: 'subject_alternative_names' },
                                  '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMatch(value): {
                                    match:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withMatchMixin(value): {
                                    match+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  match+:
                                    {
                                      '#': { help: '', name: 'match' },
                                      '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withExact(value): {
                                        exact:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withExactMixin(value): {
                                        exact+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                    },
                                },
                              '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withTrust(value): {
                                trust:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withTrustMixin(value): {
                                trust+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              trust+:
                                {
                                  '#': { help: '', name: 'trust' },
                                  '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withAcm(value): {
                                    acm:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withAcmMixin(value): {
                                    acm+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  acm+:
                                    {
                                      '#': { help: '', name: 'acm' },
                                      '#withCertificateAuthorityArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCertificateAuthorityArns(value): {
                                        certificate_authority_arns:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                      '#withCertificateAuthorityArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                      withCertificateAuthorityArnsMixin(value): {
                                        certificate_authority_arns+:
                                          (if std.isArray(value)
                                           then value
                                           else [value]),
                                      },
                                    },
                                  '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withFile(value): {
                                    file:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withFileMixin(value): {
                                    file+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  file+:
                                    {
                                      '#': { help: '', name: 'file' },
                                      '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withCertificateChain(value): {
                                        certificate_chain: value,
                                      },
                                    },
                                  '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSds(value): {
                                    sds:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withSdsMixin(value): {
                                    sds+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  sds+:
                                    {
                                      '#': { help: '', name: 'sds' },
                                      '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                      withSecretName(value): {
                                        secret_name: value,
                                      },
                                    },
                                },
                            },
                        },
                    },
                  '#withVirtualServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVirtualServiceName(value): {
                    virtual_service_name: value,
                  },
                },
            },
          '#withBackendDefaults': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackendDefaults(value): {
            backend_defaults:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBackendDefaultsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBackendDefaultsMixin(value): {
            backend_defaults+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          backend_defaults+:
            {
              '#': { help: '', name: 'backend_defaults' },
              '#withClientPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withClientPolicy(value): {
                client_policy:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withClientPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withClientPolicyMixin(value): {
                client_policy+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              client_policy+:
                {
                  '#': { help: '', name: 'client_policy' },
                  '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTls(value): {
                    tls:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTlsMixin(value): {
                    tls+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  tls+:
                    {
                      '#': { help: '', name: 'tls' },
                      '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCertificate(value): {
                        certificate:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCertificateMixin(value): {
                        certificate+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      certificate+:
                        {
                          '#': { help: '', name: 'certificate' },
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFile(value): {
                            file:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFileMixin(value): {
                            file+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          file+:
                            {
                              '#': { help: '', name: 'file' },
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                certificate_chain: value,
                              },
                              '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withPrivateKey(value): {
                                private_key: value,
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSds(value): {
                            sds:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSdsMixin(value): {
                            sds+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          sds+:
                            {
                              '#': { help: '', name: 'sds' },
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                secret_name: value,
                              },
                            },
                        },
                      '#withEnforce': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withEnforce(value=true): {
                        enforce: value,
                      },
                      '#withPorts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPorts(value): {
                        ports:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPortsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPortsMixin(value): {
                        ports+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValidation(value): {
                        validation:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValidationMixin(value): {
                        validation+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      validation+:
                        {
                          '#': { help: '', name: 'validation' },
                          '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSubjectAlternativeNames(value): {
                            subject_alternative_names:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSubjectAlternativeNamesMixin(value): {
                            subject_alternative_names+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          subject_alternative_names+:
                            {
                              '#': { help: '', name: 'subject_alternative_names' },
                              '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMatch(value): {
                                match:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withMatchMixin(value): {
                                match+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              match+:
                                {
                                  '#': { help: '', name: 'match' },
                                  '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExact(value): {
                                    exact:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withExactMixin(value): {
                                    exact+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                            },
                          '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTrust(value): {
                            trust:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withTrustMixin(value): {
                            trust+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          trust+:
                            {
                              '#': { help: '', name: 'trust' },
                              '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withAcm(value): {
                                acm:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withAcmMixin(value): {
                                acm+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              acm+:
                                {
                                  '#': { help: '', name: 'acm' },
                                  '#withCertificateAuthorityArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArns(value): {
                                    certificate_authority_arns:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                  '#withCertificateAuthorityArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                                  withCertificateAuthorityArnsMixin(value): {
                                    certificate_authority_arns+:
                                      (if std.isArray(value)
                                       then value
                                       else [value]),
                                  },
                                },
                              '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withFile(value): {
                                file:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withFileMixin(value): {
                                file+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              file+:
                                {
                                  '#': { help: '', name: 'file' },
                                  '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withCertificateChain(value): {
                                    certificate_chain: value,
                                  },
                                },
                              '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSds(value): {
                                sds:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withSdsMixin(value): {
                                sds+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              sds+:
                                {
                                  '#': { help: '', name: 'sds' },
                                  '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                                  withSecretName(value): {
                                    secret_name: value,
                                  },
                                },
                            },
                        },
                    },
                },
            },
          '#withListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListener(value): {
            listener:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListenerMixin(value): {
            listener+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          listener+:
            {
              '#': { help: '', name: 'listener' },
              '#withConnectionPool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConnectionPool(value): {
                connection_pool:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withConnectionPoolMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withConnectionPoolMixin(value): {
                connection_pool+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              connection_pool+:
                {
                  '#': { help: '', name: 'connection_pool' },
                  '#withGrpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpc(value): {
                    grpc:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withGrpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpcMixin(value): {
                    grpc+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  grpc+:
                    {
                      '#': { help: '', name: 'grpc' },
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        max_requests: value,
                      },
                    },
                  '#withHttp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp(value): {
                    http:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpMixin(value): {
                    http+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  http+:
                    {
                      '#': { help: '', name: 'http' },
                      '#withMaxConnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxConnections(value): {
                        max_connections: value,
                      },
                      '#withMaxPendingRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxPendingRequests(value): {
                        max_pending_requests: value,
                      },
                    },
                  '#withHttp2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2(value): {
                    http2:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttp2Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2Mixin(value): {
                    http2+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  http2+:
                    {
                      '#': { help: '', name: 'http2' },
                      '#withMaxRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxRequests(value): {
                        max_requests: value,
                      },
                    },
                  '#withTcp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcp(value): {
                    tcp:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTcpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpMixin(value): {
                    tcp+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  tcp+:
                    {
                      '#': { help: '', name: 'tcp' },
                      '#withMaxConnections': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxConnections(value): {
                        max_connections: value,
                      },
                    },
                },
              '#withHealthCheck': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHealthCheck(value): {
                health_check:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withHealthCheckMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHealthCheckMixin(value): {
                health_check+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              health_check+:
                {
                  '#': { help: '', name: 'health_check' },
                  '#withHealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withHealthyThreshold(value): {
                    healthy_threshold: value,
                  },
                  '#withIntervalMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withIntervalMillis(value): {
                    interval_millis: value,
                  },
                  '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPath(value): {
                    path: value,
                  },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    protocol: value,
                  },
                  '#withTimeoutMillis': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTimeoutMillis(value): {
                    timeout_millis: value,
                  },
                  '#withUnhealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withUnhealthyThreshold(value): {
                    unhealthy_threshold: value,
                  },
                },
              '#withOutlierDetection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOutlierDetection(value): {
                outlier_detection:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withOutlierDetectionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOutlierDetectionMixin(value): {
                outlier_detection+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              outlier_detection+:
                {
                  '#': { help: '', name: 'outlier_detection' },
                  '#withBaseEjectionDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withBaseEjectionDuration(value): {
                    base_ejection_duration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withBaseEjectionDurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withBaseEjectionDurationMixin(value): {
                    base_ejection_duration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  base_ejection_duration+:
                    {
                      '#': { help: '', name: 'base_ejection_duration' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withInterval(value): {
                    interval:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIntervalMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIntervalMixin(value): {
                    interval+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  interval+:
                    {
                      '#': { help: '', name: 'interval' },
                      '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withUnit(value): {
                        unit: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withMaxEjectionPercent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxEjectionPercent(value): {
                    max_ejection_percent: value,
                  },
                  '#withMaxServerErrors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMaxServerErrors(value): {
                    max_server_errors: value,
                  },
                },
              '#withPortMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortMapping(value): {
                port_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortMappingMixin(value): {
                port_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_mapping+:
                {
                  '#': { help: '', name: 'port_mapping' },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    protocol: value,
                  },
                },
              '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeout(value): {
                timeout:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTimeoutMixin(value): {
                timeout+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              timeout+:
                {
                  '#': { help: '', name: 'timeout' },
                  '#withGrpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpc(value): {
                    grpc:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withGrpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withGrpcMixin(value): {
                    grpc+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  grpc+:
                    {
                      '#': { help: '', name: 'grpc' },
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdle(value): {
                        idle:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdleMixin(value): {
                        idle+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      idle+:
                        {
                          '#': { help: '', name: 'idle' },
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            unit: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPerRequest(value): {
                        per_request:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPerRequestMixin(value): {
                        per_request+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      per_request+:
                        {
                          '#': { help: '', name: 'per_request' },
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            unit: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withHttp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp(value): {
                    http:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttpMixin(value): {
                    http+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  http+:
                    {
                      '#': { help: '', name: 'http' },
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdle(value): {
                        idle:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdleMixin(value): {
                        idle+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      idle+:
                        {
                          '#': { help: '', name: 'idle' },
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            unit: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPerRequest(value): {
                        per_request:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPerRequestMixin(value): {
                        per_request+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      per_request+:
                        {
                          '#': { help: '', name: 'per_request' },
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            unit: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withHttp2': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2(value): {
                    http2:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHttp2Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHttp2Mixin(value): {
                    http2+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  http2+:
                    {
                      '#': { help: '', name: 'http2' },
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdle(value): {
                        idle:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdleMixin(value): {
                        idle+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      idle+:
                        {
                          '#': { help: '', name: 'idle' },
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            unit: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                      '#withPerRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPerRequest(value): {
                        per_request:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withPerRequestMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withPerRequestMixin(value): {
                        per_request+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      per_request+:
                        {
                          '#': { help: '', name: 'per_request' },
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            unit: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                  '#withTcp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcp(value): {
                    tcp:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTcpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTcpMixin(value): {
                    tcp+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  tcp+:
                    {
                      '#': { help: '', name: 'tcp' },
                      '#withIdle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdle(value): {
                        idle:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withIdleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withIdleMixin(value): {
                        idle+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      idle+:
                        {
                          '#': { help: '', name: 'idle' },
                          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withUnit(value): {
                            unit: value,
                          },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
              '#withTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTls(value): {
                tls:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTlsMixin(value): {
                tls+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              tls+:
                {
                  '#': { help: '', name: 'tls' },
                  '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCertificate(value): {
                    certificate:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCertificateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCertificateMixin(value): {
                    certificate+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  certificate+:
                    {
                      '#': { help: '', name: 'certificate' },
                      '#withAcm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcm(value): {
                        acm:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcmMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcmMixin(value): {
                        acm+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      acm+:
                        {
                          '#': { help: '', name: 'acm' },
                          '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateArn(value): {
                            certificate_arn: value,
                          },
                        },
                      '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFile(value): {
                        file:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFileMixin(value): {
                        file+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      file+:
                        {
                          '#': { help: '', name: 'file' },
                          '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withCertificateChain(value): {
                            certificate_chain: value,
                          },
                          '#withPrivateKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withPrivateKey(value): {
                            private_key: value,
                          },
                        },
                      '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSds(value): {
                        sds:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSdsMixin(value): {
                        sds+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      sds+:
                        {
                          '#': { help: '', name: 'sds' },
                          '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSecretName(value): {
                            secret_name: value,
                          },
                        },
                    },
                  '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withMode(value): {
                    mode: value,
                  },
                  '#withValidation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValidation(value): {
                    validation:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValidationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValidationMixin(value): {
                    validation+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  validation+:
                    {
                      '#': { help: '', name: 'validation' },
                      '#withSubjectAlternativeNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSubjectAlternativeNames(value): {
                        subject_alternative_names:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSubjectAlternativeNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSubjectAlternativeNamesMixin(value): {
                        subject_alternative_names+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      subject_alternative_names+:
                        {
                          '#': { help: '', name: 'subject_alternative_names' },
                          '#withMatch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatch(value): {
                            match:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchMixin(value): {
                            match+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          match+:
                            {
                              '#': { help: '', name: 'match' },
                              '#withExact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExact(value): {
                                exact:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                              '#withExactMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                              withExactMixin(value): {
                                exact+:
                                  (if std.isArray(value)
                                   then value
                                   else [value]),
                              },
                            },
                        },
                      '#withTrust': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTrust(value): {
                        trust:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTrustMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTrustMixin(value): {
                        trust+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      trust+:
                        {
                          '#': { help: '', name: 'trust' },
                          '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFile(value): {
                            file:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withFileMixin(value): {
                            file+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          file+:
                            {
                              '#': { help: '', name: 'file' },
                              '#withCertificateChain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withCertificateChain(value): {
                                certificate_chain: value,
                              },
                            },
                          '#withSds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSds(value): {
                            sds:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withSdsMixin(value): {
                            sds+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          sds+:
                            {
                              '#': { help: '', name: 'sds' },
                              '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withSecretName(value): {
                                secret_name: value,
                              },
                            },
                        },
                    },
                },
            },
          '#withLogging': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLogging(value): {
            logging:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLoggingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLoggingMixin(value): {
            logging+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          logging+:
            {
              '#': { help: '', name: 'logging' },
              '#withAccessLog': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAccessLog(value): {
                access_log:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAccessLogMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAccessLogMixin(value): {
                access_log+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              access_log+:
                {
                  '#': { help: '', name: 'access_log' },
                  '#withFile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFile(value): {
                    file:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFileMixin(value): {
                    file+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  file+:
                    {
                      '#': { help: '', name: 'file' },
                      '#withFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFormat(value): {
                        format:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withFormatMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withFormatMixin(value): {
                        format+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      format+:
                        {
                          '#': { help: '', name: 'format' },
                          '#withJson': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJson(value): {
                            json:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withJsonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withJsonMixin(value): {
                            json+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          json+:
                            {
                              '#': { help: '', name: 'json' },
                              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withKey(value): {
                                key: value,
                              },
                              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withValue(value): {
                                value: value,
                              },
                            },
                          '#withText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withText(value): {
                            text: value,
                          },
                        },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withPath(value): {
                        path: value,
                      },
                    },
                },
            },
          '#withServiceDiscovery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withServiceDiscovery(value): {
            service_discovery:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withServiceDiscoveryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withServiceDiscoveryMixin(value): {
            service_discovery+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          service_discovery+:
            {
              '#': { help: '', name: 'service_discovery' },
              '#withAwsCloudMap': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAwsCloudMap(value): {
                aws_cloud_map:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAwsCloudMapMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAwsCloudMapMixin(value): {
                aws_cloud_map+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              aws_cloud_map+:
                {
                  '#': { help: '', name: 'aws_cloud_map' },
                  '#withAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withAttributes(value): {
                    attributes: value,
                  },
                  '#withAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withAttributesMixin(value): {
                    attributes+: value,
                  },
                  '#withNamespaceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withNamespaceName(value): {
                    namespace_name: value,
                  },
                  '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withServiceName(value): {
                    service_name: value,
                  },
                },
              '#withDns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDns(value): {
                dns:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDnsMixin(value): {
                dns+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dns+:
                {
                  '#': { help: '', name: 'dns' },
                  '#withHostname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withHostname(value): {
                    hostname: value,
                  },
                  '#withIpPreference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withIpPreference(value): {
                    ip_preference: value,
                  },
                  '#withResponseType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withResponseType(value): {
                    response_type: value,
                  },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_appmesh_virtual_router:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name):
        {
          local this = self,
          data: {
            aws_appmesh_virtual_router: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        spec+: {
          last_updated_date: value,
        },
      },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        spec+: {
          mesh_name: value,
        },
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        spec+: {
          mesh_owner: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        spec+: {
          resource_owner: value,
        },
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpec(value): {
        spec:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecMixin(value): {
        spec+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      spec+:
        {
          '#': { help: '', name: 'spec' },
          '#withListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListener(value): {
            listener:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withListenerMixin(value): {
            listener+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          listener+:
            {
              '#': { help: '', name: 'listener' },
              '#withPortMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortMapping(value): {
                port_mapping:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortMappingMixin(value): {
                port_mapping+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_mapping+:
                {
                  '#': { help: '', name: 'port_mapping' },
                  '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withPort(value): {
                    port: value,
                  },
                  '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withProtocol(value): {
                    protocol: value,
                  },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_appmesh_virtual_service:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'mesh_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, mesh_name, name):
        {
          local this = self,
          data: {
            aws_appmesh_virtual_service: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withMeshName(mesh_name)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastUpdatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedDate(value): {
        spec+: {
          last_updated_date: value,
        },
      },
      '#withMeshName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshName(value): {
        spec+: {
          mesh_name: value,
        },
      },
      '#withMeshOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMeshOwner(value): {
        spec+: {
          mesh_owner: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withResourceOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwner(value): {
        spec+: {
          resource_owner: value,
        },
      },
      '#withSpec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpec(value): {
        spec:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpecMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSpecMixin(value): {
        spec+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      spec+:
        {
          '#': { help: '', name: 'spec' },
          '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProvider(value): {
            provider:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withProviderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProviderMixin(value): {
            provider+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          provider+:
            {
              '#': { help: '', name: 'provider' },
              '#withVirtualNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVirtualNode(value): {
                virtual_node:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withVirtualNodeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVirtualNodeMixin(value): {
                virtual_node+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              virtual_node+:
                {
                  '#': { help: '', name: 'virtual_node' },
                  '#withVirtualNodeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVirtualNodeName(value): {
                    virtual_node_name: value,
                  },
                },
              '#withVirtualRouter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVirtualRouter(value): {
                virtual_router:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withVirtualRouterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVirtualRouterMixin(value): {
                virtual_router+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              virtual_router+:
                {
                  '#': { help: '', name: 'virtual_router' },
                  '#withVirtualRouterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVirtualRouterName(value): {
                    virtual_router_name: value,
                  },
                },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
}
