// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'batch',
  },
  aws_batch_compute_environment:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'compute_environment_name', type: 'string' }], help: '' } },
      new(tf_resource_key, compute_environment_name):
        {
          local this = self,
          data: {
            aws_batch_compute_environment: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withComputeEnvironmentName(compute_environment_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withComputeEnvironmentName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComputeEnvironmentName(value): {
        spec+: {
          compute_environment_name: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEcsClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEcsClusterArn(value): {
        spec+: {
          ecs_cluster_arn: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withServiceRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServiceRole(value): {
        spec+: {
          service_role: value,
        },
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        spec+: {
          state: value,
        },
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withStatusReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatusReason(value): {
        spec+: {
          status_reason: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        spec+: {
          type: value,
        },
      },
      '#withUpdatePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUpdatePolicy(value): {
        spec+: {
          update_policy:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withUpdatePolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUpdatePolicyMixin(value): {
        spec+: {
          update_policy+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      update_policy+:
        {
          '#': { help: '', name: 'update_policy' },
          '#withJobExecutionTimeoutMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withJobExecutionTimeoutMinutes(value): {
            job_execution_timeout_minutes: value,
          },
          '#withTerminateJobsOnUpdate': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withTerminateJobsOnUpdate(value=true): {
            terminate_jobs_on_update: value,
          },
        },
    },
  aws_batch_job_definition:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          data: {
            aws_batch_job_definition: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withArnPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArnPrefix(value): {
        spec+: {
          arn_prefix: value,
        },
      },
      '#withContainerOrchestrationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContainerOrchestrationType(value): {
        spec+: {
          container_orchestration_type: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEksProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEksProperties(value): {
        spec+: {
          eks_properties:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEksPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEksPropertiesMixin(value): {
        spec+: {
          eks_properties+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      eks_properties+:
        {
          '#': { help: '', name: 'eks_properties' },
          '#withPodProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPodProperties(value): {
            pod_properties:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPodPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPodPropertiesMixin(value): {
            pod_properties+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          pod_properties+:
            {
              '#': { help: '', name: 'pod_properties' },
              '#withContainers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainers(value): {
                containers:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withContainersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainersMixin(value): {
                containers+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              containers+:
                {
                  '#': { help: '', name: 'containers' },
                  '#withArgs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withArgs(value): {
                    args:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withArgsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withArgsMixin(value): {
                    args+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCommand': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommand(value): {
                    command:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCommandMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommandMixin(value): {
                    command+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEnv': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnv(value): {
                    env:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEnvMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnvMixin(value): {
                    env+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  env+:
                    {
                      '#': { help: '', name: 'env' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImage(value): {
                    image: value,
                  },
                  '#withImagePullPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImagePullPolicy(value): {
                    image_pull_policy: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withResources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResources(value): {
                    resources:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResourcesMixin(value): {
                    resources+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  resources+:
                    {
                      '#': { help: '', name: 'resources' },
                      '#withLimits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withLimits(value): {
                        limits: value,
                      },
                      '#withLimitsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withLimitsMixin(value): {
                        limits+: value,
                      },
                      '#withRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withRequests(value): {
                        requests: value,
                      },
                      '#withRequestsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withRequestsMixin(value): {
                        requests+: value,
                      },
                    },
                  '#withSecurityContext': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecurityContext(value): {
                    security_context:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSecurityContextMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecurityContextMixin(value): {
                    security_context+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  security_context+:
                    {
                      '#': { help: '', name: 'security_context' },
                      '#withPrivileged': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withPrivileged(value=true): {
                        privileged: value,
                      },
                      '#withReadOnlyRootFileSystem': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withReadOnlyRootFileSystem(value=true): {
                        read_only_root_file_system: value,
                      },
                      '#withRunAsGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withRunAsGroup(value): {
                        run_as_group: value,
                      },
                      '#withRunAsNonRoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withRunAsNonRoot(value=true): {
                        run_as_non_root: value,
                      },
                      '#withRunAsUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withRunAsUser(value): {
                        run_as_user: value,
                      },
                    },
                  '#withVolumeMounts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVolumeMounts(value): {
                    volume_mounts:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVolumeMountsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVolumeMountsMixin(value): {
                    volume_mounts+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  volume_mounts+:
                    {
                      '#': { help: '', name: 'volume_mounts' },
                      '#withMountPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMountPath(value): {
                        mount_path: value,
                      },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withReadOnly': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withReadOnly(value=true): {
                        read_only: value,
                      },
                    },
                },
              '#withDnsPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDnsPolicy(value): {
                dns_policy: value,
              },
              '#withHostNetwork': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withHostNetwork(value=true): {
                host_network: value,
              },
              '#withImagePullSecrets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withImagePullSecrets(value): {
                image_pull_secrets:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withImagePullSecretsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withImagePullSecretsMixin(value): {
                image_pull_secrets+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              image_pull_secrets+:
                {
                  '#': { help: '', name: 'image_pull_secrets' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                },
              '#withInitContainers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withInitContainers(value): {
                init_containers:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withInitContainersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withInitContainersMixin(value): {
                init_containers+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              init_containers+:
                {
                  '#': { help: '', name: 'init_containers' },
                  '#withArgs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withArgs(value): {
                    args:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withArgsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withArgsMixin(value): {
                    args+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCommand': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommand(value): {
                    command:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCommandMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommandMixin(value): {
                    command+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEnv': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnv(value): {
                    env:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEnvMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnvMixin(value): {
                    env+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  env+:
                    {
                      '#': { help: '', name: 'env' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImage(value): {
                    image: value,
                  },
                  '#withImagePullPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImagePullPolicy(value): {
                    image_pull_policy: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withResources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResources(value): {
                    resources:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResourcesMixin(value): {
                    resources+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  resources+:
                    {
                      '#': { help: '', name: 'resources' },
                      '#withLimits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withLimits(value): {
                        limits: value,
                      },
                      '#withLimitsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withLimitsMixin(value): {
                        limits+: value,
                      },
                      '#withRequests': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withRequests(value): {
                        requests: value,
                      },
                      '#withRequestsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withRequestsMixin(value): {
                        requests+: value,
                      },
                    },
                  '#withSecurityContext': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecurityContext(value): {
                    security_context:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSecurityContextMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecurityContextMixin(value): {
                    security_context+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  security_context+:
                    {
                      '#': { help: '', name: 'security_context' },
                      '#withPrivileged': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withPrivileged(value=true): {
                        privileged: value,
                      },
                      '#withReadOnlyRootFileSystem': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withReadOnlyRootFileSystem(value=true): {
                        read_only_root_file_system: value,
                      },
                      '#withRunAsGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withRunAsGroup(value): {
                        run_as_group: value,
                      },
                      '#withRunAsNonRoot': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withRunAsNonRoot(value=true): {
                        run_as_non_root: value,
                      },
                      '#withRunAsUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withRunAsUser(value): {
                        run_as_user: value,
                      },
                    },
                  '#withVolumeMounts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVolumeMounts(value): {
                    volume_mounts:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVolumeMountsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVolumeMountsMixin(value): {
                    volume_mounts+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  volume_mounts+:
                    {
                      '#': { help: '', name: 'volume_mounts' },
                      '#withMountPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMountPath(value): {
                        mount_path: value,
                      },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withReadOnly': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withReadOnly(value=true): {
                        read_only: value,
                      },
                    },
                },
              '#withMetadata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMetadata(value): {
                metadata:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withMetadataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMetadataMixin(value): {
                metadata+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              metadata+:
                {
                  '#': { help: '', name: 'metadata' },
                  '#withLabels': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withLabels(value): {
                    labels: value,
                  },
                  '#withLabelsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                  withLabelsMixin(value): {
                    labels+: value,
                  },
                },
              '#withServiceAccountName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withServiceAccountName(value): {
                service_account_name: value,
              },
              '#withShareProcessNamespace': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withShareProcessNamespace(value=true): {
                share_process_namespace: value,
              },
              '#withVolumes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVolumes(value): {
                volumes:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withVolumesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVolumesMixin(value): {
                volumes+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              volumes+:
                {
                  '#': { help: '', name: 'volumes' },
                  '#withEmptyDir': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEmptyDir(value): {
                    empty_dir:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEmptyDirMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEmptyDirMixin(value): {
                    empty_dir+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  empty_dir+:
                    {
                      '#': { help: '', name: 'empty_dir' },
                      '#withMedium': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withMedium(value): {
                        medium: value,
                      },
                      '#withSizeLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSizeLimit(value): {
                        size_limit: value,
                      },
                    },
                  '#withHostPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHostPath(value): {
                    host_path:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withHostPathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withHostPathMixin(value): {
                    host_path+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  host_path+:
                    {
                      '#': { help: '', name: 'host_path' },
                      '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withPath(value): {
                        path: value,
                      },
                    },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withSecret': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecret(value): {
                    secret:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSecretMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecretMixin(value): {
                    secret+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  secret+:
                    {
                      '#': { help: '', name: 'secret' },
                      '#withOptional': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withOptional(value=true): {
                        optional: value,
                      },
                      '#withSecretName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSecretName(value): {
                        secret_name: value,
                      },
                    },
                },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withNodeProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNodeProperties(value): {
        spec+: {
          node_properties:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withNodePropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNodePropertiesMixin(value): {
        spec+: {
          node_properties+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      node_properties+:
        {
          '#': { help: '', name: 'node_properties' },
          '#withMainNode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMainNode(value): {
            main_node: value,
          },
          '#withNodeRangeProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNodeRangeProperties(value): {
            node_range_properties:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNodeRangePropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNodeRangePropertiesMixin(value): {
            node_range_properties+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          node_range_properties+:
            {
              '#': { help: '', name: 'node_range_properties' },
              '#withContainer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainer(value): {
                container:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withContainerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContainerMixin(value): {
                container+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              container+:
                {
                  '#': { help: '', name: 'container' },
                  '#withCommand': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommand(value): {
                    command:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCommandMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCommandMixin(value): {
                    command+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnvironment(value): {
                    environment:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnvironmentMixin(value): {
                    environment+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  environment+:
                    {
                      '#': { help: '', name: 'environment' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withEphemeralStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEphemeralStorage(value): {
                    ephemeral_storage:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEphemeralStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEphemeralStorageMixin(value): {
                    ephemeral_storage+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  ephemeral_storage+:
                    {
                      '#': { help: '', name: 'ephemeral_storage' },
                      '#withSizeInGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withSizeInGib(value): {
                        size_in_gib: value,
                      },
                    },
                  '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withExecutionRoleArn(value): {
                    execution_role_arn: value,
                  },
                  '#withFargatePlatformConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFargatePlatformConfiguration(value): {
                    fargate_platform_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withFargatePlatformConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withFargatePlatformConfigurationMixin(value): {
                    fargate_platform_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  fargate_platform_configuration+:
                    {
                      '#': { help: '', name: 'fargate_platform_configuration' },
                      '#withPlatformVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withPlatformVersion(value): {
                        platform_version: value,
                      },
                    },
                  '#withImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withImage(value): {
                    image: value,
                  },
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    instance_type: value,
                  },
                  '#withJobRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withJobRoleArn(value): {
                    job_role_arn: value,
                  },
                  '#withLinuxParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLinuxParameters(value): {
                    linux_parameters:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withLinuxParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLinuxParametersMixin(value): {
                    linux_parameters+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  linux_parameters+:
                    {
                      '#': { help: '', name: 'linux_parameters' },
                      '#withDevices': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDevices(value): {
                        devices:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDevicesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDevicesMixin(value): {
                        devices+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      devices+:
                        {
                          '#': { help: '', name: 'devices' },
                          '#withContainerPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withContainerPath(value): {
                            container_path: value,
                          },
                          '#withHostPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withHostPath(value): {
                            host_path: value,
                          },
                          '#withPermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPermissions(value): {
                            permissions:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withPermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withPermissionsMixin(value): {
                            permissions+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withInitProcessEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withInitProcessEnabled(value=true): {
                        init_process_enabled: value,
                      },
                      '#withMaxSwap': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxSwap(value): {
                        max_swap: value,
                      },
                      '#withSharedMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withSharedMemorySize(value): {
                        shared_memory_size: value,
                      },
                      '#withSwappiness': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withSwappiness(value): {
                        swappiness: value,
                      },
                      '#withTmpfs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTmpfs(value): {
                        tmpfs:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTmpfsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTmpfsMixin(value): {
                        tmpfs+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tmpfs+:
                        {
                          '#': { help: '', name: 'tmpfs' },
                          '#withContainerPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withContainerPath(value): {
                            container_path: value,
                          },
                          '#withMountOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMountOptions(value): {
                            mount_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMountOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMountOptionsMixin(value): {
                            mount_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withSize(value): {
                            size: value,
                          },
                        },
                    },
                  '#withLogConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLogConfiguration(value): {
                    log_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withLogConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLogConfigurationMixin(value): {
                    log_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  log_configuration+:
                    {
                      '#': { help: '', name: 'log_configuration' },
                      '#withLogDriver': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLogDriver(value): {
                        log_driver: value,
                      },
                      '#withOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withOptions(value): {
                        options: value,
                      },
                      '#withOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
                      withOptionsMixin(value): {
                        options+: value,
                      },
                      '#withSecretOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSecretOptions(value): {
                        secret_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSecretOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSecretOptionsMixin(value): {
                        secret_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      secret_options+:
                        {
                          '#': { help: '', name: 'secret_options' },
                          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withName(value): {
                            name: value,
                          },
                          '#withValueFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValueFrom(value): {
                            value_from: value,
                          },
                        },
                    },
                  '#withMountPoints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMountPoints(value): {
                    mount_points:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMountPointsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMountPointsMixin(value): {
                    mount_points+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  mount_points+:
                    {
                      '#': { help: '', name: 'mount_points' },
                      '#withContainerPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withContainerPath(value): {
                        container_path: value,
                      },
                      '#withReadOnly': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withReadOnly(value=true): {
                        read_only: value,
                      },
                      '#withSourceVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withSourceVolume(value): {
                        source_volume: value,
                      },
                    },
                  '#withNetworkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNetworkConfiguration(value): {
                    network_configuration:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNetworkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNetworkConfigurationMixin(value): {
                    network_configuration+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  network_configuration+:
                    {
                      '#': { help: '', name: 'network_configuration' },
                      '#withAssignPublicIp': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withAssignPublicIp(value=true): {
                        assign_public_ip: value,
                      },
                    },
                  '#withPrivileged': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withPrivileged(value=true): {
                    privileged: value,
                  },
                  '#withReadonlyRootFilesystem': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withReadonlyRootFilesystem(value=true): {
                    readonly_root_filesystem: value,
                  },
                  '#withResourceRequirements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResourceRequirements(value): {
                    resource_requirements:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withResourceRequirementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withResourceRequirementsMixin(value): {
                    resource_requirements+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  resource_requirements+:
                    {
                      '#': { help: '', name: 'resource_requirements' },
                      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withType(value): {
                        type: value,
                      },
                      '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValue(value): {
                        value: value,
                      },
                    },
                  '#withRuntimePlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRuntimePlatform(value): {
                    runtime_platform:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withRuntimePlatformMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withRuntimePlatformMixin(value): {
                    runtime_platform+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  runtime_platform+:
                    {
                      '#': { help: '', name: 'runtime_platform' },
                      '#withCpuArchitecture': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withCpuArchitecture(value): {
                        cpu_architecture: value,
                      },
                      '#withOperatingSystemFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withOperatingSystemFamily(value): {
                        operating_system_family: value,
                      },
                    },
                  '#withSecrets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecrets(value): {
                    secrets:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withSecretsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withSecretsMixin(value): {
                    secrets+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  secrets+:
                    {
                      '#': { help: '', name: 'secrets' },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withValueFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withValueFrom(value): {
                        value_from: value,
                      },
                    },
                  '#withUlimits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withUlimits(value): {
                    ulimits:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withUlimitsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withUlimitsMixin(value): {
                    ulimits+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  ulimits+:
                    {
                      '#': { help: '', name: 'ulimits' },
                      '#withHardLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withHardLimit(value): {
                        hard_limit: value,
                      },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                      '#withSoftLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withSoftLimit(value): {
                        soft_limit: value,
                      },
                    },
                  '#withUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withUser(value): {
                    user: value,
                  },
                  '#withVolumes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVolumes(value): {
                    volumes:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withVolumesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withVolumesMixin(value): {
                    volumes+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  volumes+:
                    {
                      '#': { help: '', name: 'volumes' },
                      '#withEfsVolumeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withEfsVolumeConfiguration(value): {
                        efs_volume_configuration:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withEfsVolumeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withEfsVolumeConfigurationMixin(value): {
                        efs_volume_configuration+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      efs_volume_configuration+:
                        {
                          '#': { help: '', name: 'efs_volume_configuration' },
                          '#withAuthorizationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withAuthorizationConfig(value): {
                            authorization_config:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withAuthorizationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withAuthorizationConfigMixin(value): {
                            authorization_config+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          authorization_config+:
                            {
                              '#': { help: '', name: 'authorization_config' },
                              '#withAccessPointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withAccessPointId(value): {
                                access_point_id: value,
                              },
                              '#withIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                              withIam(value): {
                                iam: value,
                              },
                            },
                          '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withFileSystemId(value): {
                            file_system_id: value,
                          },
                          '#withRootDirectory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withRootDirectory(value): {
                            root_directory: value,
                          },
                          '#withTransitEncryption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withTransitEncryption(value): {
                            transit_encryption: value,
                          },
                          '#withTransitEncryptionPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withTransitEncryptionPort(value): {
                            transit_encryption_port: value,
                          },
                        },
                      '#withHost': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withHost(value): {
                        host:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withHostMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withHostMixin(value): {
                        host+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      host+:
                        {
                          '#': { help: '', name: 'host' },
                          '#withSourcePath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withSourcePath(value): {
                            source_path: value,
                          },
                        },
                      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withName(value): {
                        name: value,
                      },
                    },
                },
              '#withTargetNodes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTargetNodes(value): {
                target_nodes: value,
              },
            },
          '#withNumNodes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumNodes(value): {
            num_nodes: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRetryStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRetryStrategy(value): {
        spec+: {
          retry_strategy:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRetryStrategyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRetryStrategyMixin(value): {
        spec+: {
          retry_strategy+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      retry_strategy+:
        {
          '#': { help: '', name: 'retry_strategy' },
          '#withAttempts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withAttempts(value): {
            attempts: value,
          },
          '#withEvaluateOnExit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEvaluateOnExit(value): {
            evaluate_on_exit:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEvaluateOnExitMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEvaluateOnExitMixin(value): {
            evaluate_on_exit+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          evaluate_on_exit+:
            {
              '#': { help: '', name: 'evaluate_on_exit' },
              '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAction(value): {
                action: value,
              },
              '#withOnExitCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnExitCode(value): {
                on_exit_code: value,
              },
              '#withOnReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnReason(value): {
                on_reason: value,
              },
              '#withOnStatusReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnStatusReason(value): {
                on_status_reason: value,
              },
            },
        },
      '#withRevision': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRevision(value): {
        spec+: {
          revision: value,
        },
      },
      '#withSchedulingPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSchedulingPriority(value): {
        spec+: {
          scheduling_priority: value,
        },
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTimeout(value): {
        spec+: {
          timeout:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTimeoutMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTimeoutMixin(value): {
        spec+: {
          timeout+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      timeout+:
        {
          '#': { help: '', name: 'timeout' },
          '#withAttemptDurationSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withAttemptDurationSeconds(value): {
            attempt_duration_seconds: value,
          },
        },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        spec+: {
          type: value,
        },
      },
    },
  aws_batch_job_queue:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        {
          local this = self,
          data: {
            aws_batch_job_queue: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withComputeEnvironmentOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withComputeEnvironmentOrder(value): {
        spec+: {
          compute_environment_order:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withComputeEnvironmentOrderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withComputeEnvironmentOrderMixin(value): {
        spec+: {
          compute_environment_order+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      compute_environment_order+:
        {
          '#': { help: '', name: 'compute_environment_order' },
          '#withComputeEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withComputeEnvironment(value): {
            compute_environment: value,
          },
          '#withOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withOrder(value): {
            order: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withJobStateTimeLimitAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withJobStateTimeLimitAction(value): {
        spec+: {
          job_state_time_limit_action:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withJobStateTimeLimitActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withJobStateTimeLimitActionMixin(value): {
        spec+: {
          job_state_time_limit_action+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      job_state_time_limit_action+:
        {
          '#': { help: '', name: 'job_state_time_limit_action' },
          '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAction(value): {
            action: value,
          },
          '#withMaxTimeSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxTimeSeconds(value): {
            max_time_seconds: value,
          },
          '#withReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withReason(value): {
            reason: value,
          },
          '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withState(value): {
            state: value,
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPriority(value): {
        spec+: {
          priority: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSchedulingPolicyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSchedulingPolicyArn(value): {
        spec+: {
          scheduling_policy_arn: value,
        },
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        spec+: {
          state: value,
        },
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withStatusReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatusReason(value): {
        spec+: {
          status_reason: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_batch_scheduling_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        {
          local this = self,
          data: {
            aws_batch_scheduling_policy: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFairSharePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFairSharePolicy(value): {
        spec+: {
          fair_share_policy:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFairSharePolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFairSharePolicyMixin(value): {
        spec+: {
          fair_share_policy+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      fair_share_policy+:
        {
          '#': { help: '', name: 'fair_share_policy' },
          '#withComputeReservation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withComputeReservation(value): {
            compute_reservation: value,
          },
          '#withShareDecaySeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withShareDecaySeconds(value): {
            share_decay_seconds: value,
          },
          '#withShareDistribution': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withShareDistribution(value): {
            share_distribution:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withShareDistributionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withShareDistributionMixin(value): {
            share_distribution+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          share_distribution+:
            {
              '#': { help: '', name: 'share_distribution' },
              '#withShareIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withShareIdentifier(value): {
                share_identifier: value,
              },
              '#withWeightFactor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withWeightFactor(value): {
                weight_factor: value,
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
}
