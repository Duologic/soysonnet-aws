// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'cognito',
  },
  aws_cognito_identity_pool:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'identity_pool_name', type: 'string' }], help: '' } },
      new(tf_resource_key, identity_pool_name):
        {
          local this = self,
          data: {
            aws_cognito_identity_pool: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withIdentityPoolName(identity_pool_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAllowClassicFlow': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowClassicFlow(value=true): {
        spec+: {
          allow_classic_flow: value,
        },
      },
      '#withAllowUnauthenticatedIdentities': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowUnauthenticatedIdentities(value=true): {
        spec+: {
          allow_unauthenticated_identities: value,
        },
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCognitoIdentityProviders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCognitoIdentityProviders(value): {
        spec+: {
          cognito_identity_providers:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCognitoIdentityProvidersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCognitoIdentityProvidersMixin(value): {
        spec+: {
          cognito_identity_providers+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      cognito_identity_providers+:
        {
          '#': { help: '', name: 'cognito_identity_providers' },
          '#withClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClientId(value): {
            client_id: value,
          },
          '#withProviderName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProviderName(value): {
            provider_name: value,
          },
          '#withServerSideTokenCheck': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withServerSideTokenCheck(value=true): {
            server_side_token_check: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDeveloperProviderName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeveloperProviderName(value): {
        spec+: {
          developer_provider_name: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIdentityPoolName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIdentityPoolName(value): {
        spec+: {
          identity_pool_name: value,
        },
      },
      '#withOpenidConnectProviderArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOpenidConnectProviderArns(value): {
        spec+: {
          openid_connect_provider_arns:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withOpenidConnectProviderArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOpenidConnectProviderArnsMixin(value): {
        spec+: {
          openid_connect_provider_arns+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSamlProviderArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSamlProviderArns(value): {
        spec+: {
          saml_provider_arns:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSamlProviderArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSamlProviderArnsMixin(value): {
        spec+: {
          saml_provider_arns+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSupportedLoginProviders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSupportedLoginProviders(value): {
        spec+: {
          supported_login_providers: value,
        },
      },
      '#withSupportedLoginProvidersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withSupportedLoginProvidersMixin(value): {
        spec+: {
          supported_login_providers+: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_cognito_user_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'user_pool_id', type: 'string' }], help: '' } },
      new(tf_resource_key, name, user_pool_id):
        {
          local this = self,
          data: {
            aws_cognito_user_group: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withUserPoolId(user_pool_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withPrecedence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPrecedence(value): {
        spec+: {
          precedence: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        spec+: {
          role_arn: value,
        },
      },
      '#withUserPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserPoolId(value): {
        spec+: {
          user_pool_id: value,
        },
      },
    },
  aws_cognito_user_groups:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'user_pool_id', type: 'string' }], help: '' } },
      new(tf_resource_key, user_pool_id):
        {
          local this = self,
          data: {
            aws_cognito_user_groups: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withUserPoolId(user_pool_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGroups(value): {
        spec+: {
          groups:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGroupsMixin(value): {
        spec+: {
          groups+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      groups+:
        {
          '#': { help: '', name: 'groups' },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            description: value,
          },
          '#withGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGroupName(value): {
            group_name: value,
          },
          '#withPrecedence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPrecedence(value): {
            precedence: value,
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            role_arn: value,
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withUserPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserPoolId(value): {
        spec+: {
          user_pool_id: value,
        },
      },
    },
  aws_cognito_user_pool:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'user_pool_id', type: 'string' }], help: '' } },
      new(tf_resource_key, user_pool_id):
        {
          local this = self,
          data: {
            aws_cognito_user_pool: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withUserPoolId(user_pool_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAccountRecoverySetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAccountRecoverySetting(value): {
        spec+: {
          account_recovery_setting:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAccountRecoverySettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAccountRecoverySettingMixin(value): {
        spec+: {
          account_recovery_setting+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      account_recovery_setting+:
        {
          '#': { help: '', name: 'account_recovery_setting' },
          '#withRecoveryMechanism': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecoveryMechanism(value): {
            recovery_mechanism:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRecoveryMechanismMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRecoveryMechanismMixin(value): {
            recovery_mechanism+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          recovery_mechanism+:
            {
              '#': { help: '', name: 'recovery_mechanism' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withPriority(value): {
                priority: value,
              },
            },
        },
      '#withAdminCreateUserConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdminCreateUserConfig(value): {
        spec+: {
          admin_create_user_config:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAdminCreateUserConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdminCreateUserConfigMixin(value): {
        spec+: {
          admin_create_user_config+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      admin_create_user_config+:
        {
          '#': { help: '', name: 'admin_create_user_config' },
          '#withAllowAdminCreateUserOnly': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAllowAdminCreateUserOnly(value=true): {
            allow_admin_create_user_only: value,
          },
          '#withInviteMessageTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInviteMessageTemplate(value): {
            invite_message_template:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInviteMessageTemplateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInviteMessageTemplateMixin(value): {
            invite_message_template+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          invite_message_template+:
            {
              '#': { help: '', name: 'invite_message_template' },
              '#withEmailMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEmailMessage(value): {
                email_message: value,
              },
              '#withEmailSubject': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEmailSubject(value): {
                email_subject: value,
              },
              '#withSmsMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSmsMessage(value): {
                sms_message: value,
              },
            },
          '#withUnusedAccountValidityDays': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withUnusedAccountValidityDays(value): {
            unused_account_validity_days: value,
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withAutoVerifiedAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAutoVerifiedAttributes(value): {
        spec+: {
          auto_verified_attributes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAutoVerifiedAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAutoVerifiedAttributesMixin(value): {
        spec+: {
          auto_verified_attributes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreationDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationDate(value): {
        spec+: {
          creation_date: value,
        },
      },
      '#withCustomDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomDomain(value): {
        spec+: {
          custom_domain: value,
        },
      },
      '#withDeletionProtection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeletionProtection(value): {
        spec+: {
          deletion_protection: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDeviceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDeviceConfiguration(value): {
        spec+: {
          device_configuration:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDeviceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDeviceConfigurationMixin(value): {
        spec+: {
          device_configuration+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      device_configuration+:
        {
          '#': { help: '', name: 'device_configuration' },
          '#withChallengeRequiredOnNewDevice': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withChallengeRequiredOnNewDevice(value=true): {
            challenge_required_on_new_device: value,
          },
          '#withDeviceOnlyRememberedOnUserPrompt': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDeviceOnlyRememberedOnUserPrompt(value=true): {
            device_only_remembered_on_user_prompt: value,
          },
        },
      '#withDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomain(value): {
        spec+: {
          domain: value,
        },
      },
      '#withEmailConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEmailConfiguration(value): {
        spec+: {
          email_configuration:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEmailConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEmailConfigurationMixin(value): {
        spec+: {
          email_configuration+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      email_configuration+:
        {
          '#': { help: '', name: 'email_configuration' },
          '#withConfigurationSet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withConfigurationSet(value): {
            configuration_set: value,
          },
          '#withEmailSendingAccount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEmailSendingAccount(value): {
            email_sending_account: value,
          },
          '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFrom(value): {
            from: value,
          },
          '#withReplyToEmailAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withReplyToEmailAddress(value): {
            reply_to_email_address: value,
          },
          '#withSourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSourceArn(value): {
            source_arn: value,
          },
        },
      '#withEstimatedNumberOfUsers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEstimatedNumberOfUsers(value): {
        spec+: {
          estimated_number_of_users: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLambdaConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLambdaConfig(value): {
        spec+: {
          lambda_config:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withLambdaConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLambdaConfigMixin(value): {
        spec+: {
          lambda_config+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      lambda_config+:
        {
          '#': { help: '', name: 'lambda_config' },
          '#withCreateAuthChallenge': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreateAuthChallenge(value): {
            create_auth_challenge: value,
          },
          '#withCustomEmailSender': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomEmailSender(value): {
            custom_email_sender:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCustomEmailSenderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomEmailSenderMixin(value): {
            custom_email_sender+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          custom_email_sender+:
            {
              '#': { help: '', name: 'custom_email_sender' },
              '#withLambdaArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLambdaArn(value): {
                lambda_arn: value,
              },
              '#withLambdaVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLambdaVersion(value): {
                lambda_version: value,
              },
            },
          '#withCustomMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCustomMessage(value): {
            custom_message: value,
          },
          '#withCustomSmsSender': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomSmsSender(value): {
            custom_sms_sender:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCustomSmsSenderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomSmsSenderMixin(value): {
            custom_sms_sender+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          custom_sms_sender+:
            {
              '#': { help: '', name: 'custom_sms_sender' },
              '#withLambdaArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLambdaArn(value): {
                lambda_arn: value,
              },
              '#withLambdaVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLambdaVersion(value): {
                lambda_version: value,
              },
            },
          '#withDefineAuthChallenge': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDefineAuthChallenge(value): {
            define_auth_challenge: value,
          },
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            kms_key_id: value,
          },
          '#withPostAuthentication': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostAuthentication(value): {
            post_authentication: value,
          },
          '#withPostConfirmation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostConfirmation(value): {
            post_confirmation: value,
          },
          '#withPreAuthentication': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPreAuthentication(value): {
            pre_authentication: value,
          },
          '#withPreSignUp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPreSignUp(value): {
            pre_sign_up: value,
          },
          '#withPreTokenGeneration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPreTokenGeneration(value): {
            pre_token_generation: value,
          },
          '#withPreTokenGenerationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPreTokenGenerationConfig(value): {
            pre_token_generation_config:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPreTokenGenerationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPreTokenGenerationConfigMixin(value): {
            pre_token_generation_config+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          pre_token_generation_config+:
            {
              '#': { help: '', name: 'pre_token_generation_config' },
              '#withLambdaArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLambdaArn(value): {
                lambda_arn: value,
              },
              '#withLambdaVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLambdaVersion(value): {
                lambda_version: value,
              },
            },
          '#withUserMigration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserMigration(value): {
            user_migration: value,
          },
          '#withVerifyAuthChallengeResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVerifyAuthChallengeResponse(value): {
            verify_auth_challenge_response: value,
          },
        },
      '#withLastModifiedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModifiedDate(value): {
        spec+: {
          last_modified_date: value,
        },
      },
      '#withMfaConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMfaConfiguration(value): {
        spec+: {
          mfa_configuration: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSchemaAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSchemaAttributes(value): {
        spec+: {
          schema_attributes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSchemaAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSchemaAttributesMixin(value): {
        spec+: {
          schema_attributes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      schema_attributes+:
        {
          '#': { help: '', name: 'schema_attributes' },
          '#withAttributeDataType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAttributeDataType(value): {
            attribute_data_type: value,
          },
          '#withDeveloperOnlyAttribute': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDeveloperOnlyAttribute(value=true): {
            developer_only_attribute: value,
          },
          '#withMutable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withMutable(value=true): {
            mutable: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withNumberAttributeConstraints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNumberAttributeConstraints(value): {
            number_attribute_constraints:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNumberAttributeConstraintsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNumberAttributeConstraintsMixin(value): {
            number_attribute_constraints+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          number_attribute_constraints+:
            {
              '#': { help: '', name: 'number_attribute_constraints' },
              '#withMaxValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMaxValue(value): {
                max_value: value,
              },
              '#withMinValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMinValue(value): {
                min_value: value,
              },
            },
          '#withRequired': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withRequired(value=true): {
            required: value,
          },
          '#withStringAttributeConstraints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStringAttributeConstraints(value): {
            string_attribute_constraints:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStringAttributeConstraintsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStringAttributeConstraintsMixin(value): {
            string_attribute_constraints+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          string_attribute_constraints+:
            {
              '#': { help: '', name: 'string_attribute_constraints' },
              '#withMaxLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMaxLength(value): {
                max_length: value,
              },
              '#withMinLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMinLength(value): {
                min_length: value,
              },
            },
        },
      '#withSmsAuthenticationMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSmsAuthenticationMessage(value): {
        spec+: {
          sms_authentication_message: value,
        },
      },
      '#withSmsConfigurationFailure': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSmsConfigurationFailure(value): {
        spec+: {
          sms_configuration_failure: value,
        },
      },
      '#withSmsVerificationMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSmsVerificationMessage(value): {
        spec+: {
          sms_verification_message: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withUserPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserPoolId(value): {
        spec+: {
          user_pool_id: value,
        },
      },
      '#withUserPoolTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withUserPoolTags(value): {
        spec+: {
          user_pool_tags: value,
        },
      },
      '#withUserPoolTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withUserPoolTagsMixin(value): {
        spec+: {
          user_pool_tags+: value,
        },
      },
      '#withUsernameAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUsernameAttributes(value): {
        spec+: {
          username_attributes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withUsernameAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUsernameAttributesMixin(value): {
        spec+: {
          username_attributes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_cognito_user_pool_client:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'client_id', type: 'string' }, { default: null, enums: null, name: 'user_pool_id', type: 'string' }], help: '' } },
      new(tf_resource_key, client_id, user_pool_id):
        {
          local this = self,
          data: {
            aws_cognito_user_pool_client: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withClientId(client_id)
        + self.withUserPoolId(user_pool_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAccessTokenValidity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withAccessTokenValidity(value): {
        spec+: {
          access_token_validity: value,
        },
      },
      '#withAllowedOauthFlows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedOauthFlows(value): {
        spec+: {
          allowed_oauth_flows:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAllowedOauthFlowsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedOauthFlowsMixin(value): {
        spec+: {
          allowed_oauth_flows+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAllowedOauthFlowsUserPoolClient': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowedOauthFlowsUserPoolClient(value=true): {
        spec+: {
          allowed_oauth_flows_user_pool_client: value,
        },
      },
      '#withAllowedOauthScopes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedOauthScopes(value): {
        spec+: {
          allowed_oauth_scopes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAllowedOauthScopesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedOauthScopesMixin(value): {
        spec+: {
          allowed_oauth_scopes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAnalyticsConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAnalyticsConfiguration(value): {
        spec+: {
          analytics_configuration:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAnalyticsConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAnalyticsConfigurationMixin(value): {
        spec+: {
          analytics_configuration+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      analytics_configuration+:
        {
          '#': { help: '', name: 'analytics_configuration' },
          '#withApplicationArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withApplicationArn(value): {
            application_arn: value,
          },
          '#withApplicationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withApplicationId(value): {
            application_id: value,
          },
          '#withExternalId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExternalId(value): {
            external_id: value,
          },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            role_arn: value,
          },
          '#withUserDataShared': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUserDataShared(value=true): {
            user_data_shared: value,
          },
        },
      '#withCallbackUrls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCallbackUrls(value): {
        spec+: {
          callback_urls:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCallbackUrlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCallbackUrlsMixin(value): {
        spec+: {
          callback_urls+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClientId(value): {
        spec+: {
          client_id: value,
        },
      },
      '#withClientSecret': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClientSecret(value): {
        spec+: {
          client_secret: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDefaultRedirectUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultRedirectUri(value): {
        spec+: {
          default_redirect_uri: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEnablePropagateAdditionalUserContextData': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnablePropagateAdditionalUserContextData(value=true): {
        spec+: {
          enable_propagate_additional_user_context_data: value,
        },
      },
      '#withEnableTokenRevocation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableTokenRevocation(value=true): {
        spec+: {
          enable_token_revocation: value,
        },
      },
      '#withExplicitAuthFlows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExplicitAuthFlows(value): {
        spec+: {
          explicit_auth_flows:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withExplicitAuthFlowsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExplicitAuthFlowsMixin(value): {
        spec+: {
          explicit_auth_flows+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withGenerateSecret': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withGenerateSecret(value=true): {
        spec+: {
          generate_secret: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIdTokenValidity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withIdTokenValidity(value): {
        spec+: {
          id_token_validity: value,
        },
      },
      '#withLogoutUrls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLogoutUrls(value): {
        spec+: {
          logout_urls:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withLogoutUrlsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLogoutUrlsMixin(value): {
        spec+: {
          logout_urls+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withPreventUserExistenceErrors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreventUserExistenceErrors(value): {
        spec+: {
          prevent_user_existence_errors: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withReadAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReadAttributes(value): {
        spec+: {
          read_attributes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withReadAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReadAttributesMixin(value): {
        spec+: {
          read_attributes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRefreshTokenValidity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRefreshTokenValidity(value): {
        spec+: {
          refresh_token_validity: value,
        },
      },
      '#withSupportedIdentityProviders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedIdentityProviders(value): {
        spec+: {
          supported_identity_providers:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSupportedIdentityProvidersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedIdentityProvidersMixin(value): {
        spec+: {
          supported_identity_providers+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTokenValidityUnits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTokenValidityUnits(value): {
        spec+: {
          token_validity_units:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTokenValidityUnitsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTokenValidityUnitsMixin(value): {
        spec+: {
          token_validity_units+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      token_validity_units+:
        {
          '#': { help: '', name: 'token_validity_units' },
          '#withAccessToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAccessToken(value): {
            access_token: value,
          },
          '#withIdToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIdToken(value): {
            id_token: value,
          },
          '#withRefreshToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRefreshToken(value): {
            refresh_token: value,
          },
        },
      '#withUserPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserPoolId(value): {
        spec+: {
          user_pool_id: value,
        },
      },
      '#withWriteAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWriteAttributes(value): {
        spec+: {
          write_attributes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withWriteAttributesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWriteAttributesMixin(value): {
        spec+: {
          write_attributes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
    },
  aws_cognito_user_pool_clients:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'user_pool_id', type: 'string' }], help: '' } },
      new(tf_resource_key, user_pool_id):
        {
          local this = self,
          data: {
            aws_cognito_user_pool_clients: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withUserPoolId(user_pool_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withClientIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientIds(value): {
        spec+: {
          client_ids:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withClientIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientIdsMixin(value): {
        spec+: {
          client_ids+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withClientNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientNames(value): {
        spec+: {
          client_names:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withClientNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientNamesMixin(value): {
        spec+: {
          client_names+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withUserPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserPoolId(value): {
        spec+: {
          user_pool_id: value,
        },
      },
    },
  aws_cognito_user_pool_signing_certificate:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'user_pool_id', type: 'string' }], help: '' } },
      new(tf_resource_key, user_pool_id):
        {
          local this = self,
          data: {
            aws_cognito_user_pool_signing_certificate: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withUserPoolId(user_pool_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCertificate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificate(value): {
        spec+: {
          certificate: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withUserPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserPoolId(value): {
        spec+: {
          user_pool_id: value,
        },
      },
    },
  aws_cognito_user_pools:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        {
          local this = self,
          data: {
            aws_cognito_user_pools: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArns(value): {
        spec+: {
          arns:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArnsMixin(value): {
        spec+: {
          arns+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        spec+: {
          ids:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        spec+: {
          ids+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
}
