// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'ip',
  },
  aws_ip_ranges:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'services', type: 'array' }], help: '' } },
      new(tf_resource_key, services):
        self.withTfResourceKey(tf_resource_key)
        + self.withServices(services),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ip_ranges+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCidrBlocks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCidrBlocks(value): {
        cidr_blocks:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCidrBlocksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCidrBlocksMixin(value): {
        cidr_blocks+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreateDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreateDate(value): {
        create_date: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIpv6CidrBlocks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIpv6CidrBlocks(value): {
        ipv6_cidr_blocks:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIpv6CidrBlocksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIpv6CidrBlocksMixin(value): {
        ipv6_cidr_blocks+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRegions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRegions(value): {
        regions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRegionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRegionsMixin(value): {
        regions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServices': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServices(value): {
        services:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServicesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServicesMixin(value): {
        services+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSyncToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSyncToken(value): {
        sync_token: value,
      },
      '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUrl(value): {
        url: value,
      },
    },
}
