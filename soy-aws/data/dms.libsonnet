// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'dms',
  },
  aws_dms_certificate:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'certificate_id', type: 'string' }], help: '' } },
      new(tf_resource_key, certificate_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withCertificateId(certificate_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_dms_certificate+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateArn(value): {
        certificate_arn: value,
      },
      '#withCertificateCreationDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateCreationDate(value): {
        certificate_creation_date: value,
      },
      '#withCertificateId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateId(value): {
        certificate_id: value,
      },
      '#withCertificateOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateOwner(value): {
        certificate_owner: value,
      },
      '#withCertificatePem': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificatePem(value): {
        certificate_pem: value,
      },
      '#withCertificateWallet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateWallet(value): {
        certificate_wallet: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKeyLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withKeyLength(value): {
        key_length: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSigningAlgorithm': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSigningAlgorithm(value): {
        signing_algorithm: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withValidFromDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withValidFromDate(value): {
        valid_from_date: value,
      },
      '#withValidToDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withValidToDate(value): {
        valid_to_date: value,
      },
    },
  aws_dms_endpoint:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'endpoint_id', type: 'string' }], help: '' } },
      new(tf_resource_key, endpoint_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withEndpointId(endpoint_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_dms_endpoint+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateArn(value): {
        certificate_arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDatabaseName(value): {
        database_name: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withElasticsearchSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElasticsearchSettings(value): {
        elasticsearch_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withElasticsearchSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElasticsearchSettingsMixin(value): {
        elasticsearch_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      elasticsearch_settings+:
        {
          '#': { help: '', name: 'elasticsearch_settings' },
          '#withEndpointUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEndpointUri(value): {
            endpoint_uri: value,
          },
          '#withErrorRetryDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withErrorRetryDuration(value): {
            error_retry_duration: value,
          },
          '#withFullLoadErrorPercentage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withFullLoadErrorPercentage(value): {
            full_load_error_percentage: value,
          },
          '#withServiceAccessRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceAccessRoleArn(value): {
            service_access_role_arn: value,
          },
        },
      '#withEndpointArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndpointArn(value): {
        endpoint_arn: value,
      },
      '#withEndpointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndpointId(value): {
        endpoint_id: value,
      },
      '#withEndpointType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndpointType(value): {
        endpoint_type: value,
      },
      '#withEngineName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineName(value): {
        engine_name: value,
      },
      '#withExtraConnectionAttributes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExtraConnectionAttributes(value): {
        extra_connection_attributes: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKafkaSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKafkaSettings(value): {
        kafka_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKafkaSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKafkaSettingsMixin(value): {
        kafka_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      kafka_settings+:
        {
          '#': { help: '', name: 'kafka_settings' },
          '#withBroker': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBroker(value): {
            broker: value,
          },
          '#withIncludeControlDetails': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeControlDetails(value=true): {
            include_control_details: value,
          },
          '#withIncludeNullAndEmpty': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeNullAndEmpty(value=true): {
            include_null_and_empty: value,
          },
          '#withIncludePartitionValue': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludePartitionValue(value=true): {
            include_partition_value: value,
          },
          '#withIncludeTableAlterOperations': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeTableAlterOperations(value=true): {
            include_table_alter_operations: value,
          },
          '#withIncludeTransactionDetails': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeTransactionDetails(value=true): {
            include_transaction_details: value,
          },
          '#withMessageFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMessageFormat(value): {
            message_format: value,
          },
          '#withMessageMaxBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMessageMaxBytes(value): {
            message_max_bytes: value,
          },
          '#withNoHexPrefix': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withNoHexPrefix(value=true): {
            no_hex_prefix: value,
          },
          '#withPartitionIncludeSchemaTable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPartitionIncludeSchemaTable(value=true): {
            partition_include_schema_table: value,
          },
          '#withSaslMechanism': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSaslMechanism(value): {
            sasl_mechanism: value,
          },
          '#withSaslPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSaslPassword(value): {
            sasl_password: value,
          },
          '#withSaslUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSaslUsername(value): {
            sasl_username: value,
          },
          '#withSecurityProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSecurityProtocol(value): {
            security_protocol: value,
          },
          '#withSslCaCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSslCaCertificateArn(value): {
            ssl_ca_certificate_arn: value,
          },
          '#withSslClientCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSslClientCertificateArn(value): {
            ssl_client_certificate_arn: value,
          },
          '#withSslClientKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSslClientKeyArn(value): {
            ssl_client_key_arn: value,
          },
          '#withSslClientKeyPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSslClientKeyPassword(value): {
            ssl_client_key_password: value,
          },
          '#withTopic': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTopic(value): {
            topic: value,
          },
        },
      '#withKinesisSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKinesisSettings(value): {
        kinesis_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKinesisSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKinesisSettingsMixin(value): {
        kinesis_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      kinesis_settings+:
        {
          '#': { help: '', name: 'kinesis_settings' },
          '#withIncludeControlDetails': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeControlDetails(value=true): {
            include_control_details: value,
          },
          '#withIncludeNullAndEmpty': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeNullAndEmpty(value=true): {
            include_null_and_empty: value,
          },
          '#withIncludePartitionValue': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludePartitionValue(value=true): {
            include_partition_value: value,
          },
          '#withIncludeTableAlterOperations': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeTableAlterOperations(value=true): {
            include_table_alter_operations: value,
          },
          '#withIncludeTransactionDetails': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeTransactionDetails(value=true): {
            include_transaction_details: value,
          },
          '#withMessageFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMessageFormat(value): {
            message_format: value,
          },
          '#withPartitionIncludeSchemaTable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPartitionIncludeSchemaTable(value=true): {
            partition_include_schema_table: value,
          },
          '#withServiceAccessRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceAccessRoleArn(value): {
            service_access_role_arn: value,
          },
          '#withStreamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStreamArn(value): {
            stream_arn: value,
          },
        },
      '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyArn(value): {
        kms_key_arn: value,
      },
      '#withMongodbSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMongodbSettings(value): {
        mongodb_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMongodbSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMongodbSettingsMixin(value): {
        mongodb_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      mongodb_settings+:
        {
          '#': { help: '', name: 'mongodb_settings' },
          '#withAuthMechanism': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthMechanism(value): {
            auth_mechanism: value,
          },
          '#withAuthSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthSource(value): {
            auth_source: value,
          },
          '#withAuthType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthType(value): {
            auth_type: value,
          },
          '#withDocsToInvestigate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDocsToInvestigate(value): {
            docs_to_investigate: value,
          },
          '#withExtractDocId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExtractDocId(value): {
            extract_doc_id: value,
          },
          '#withNestingLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNestingLevel(value): {
            nesting_level: value,
          },
        },
      '#withPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPassword(value): {
        password: value,
      },
      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPort(value): {
        port: value,
      },
      '#withPostgresSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPostgresSettings(value): {
        postgres_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPostgresSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPostgresSettingsMixin(value): {
        postgres_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      postgres_settings+:
        {
          '#': { help: '', name: 'postgres_settings' },
          '#withAfterConnectScript': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAfterConnectScript(value): {
            after_connect_script: value,
          },
          '#withBabelfishDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBabelfishDatabaseName(value): {
            babelfish_database_name: value,
          },
          '#withCaptureDdls': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCaptureDdls(value=true): {
            capture_ddls: value,
          },
          '#withDatabaseMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatabaseMode(value): {
            database_mode: value,
          },
          '#withDdlArtifactsSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDdlArtifactsSchema(value): {
            ddl_artifacts_schema: value,
          },
          '#withExecuteTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withExecuteTimeout(value): {
            execute_timeout: value,
          },
          '#withFailTasksOnLobTruncation': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withFailTasksOnLobTruncation(value=true): {
            fail_tasks_on_lob_truncation: value,
          },
          '#withHeartbeatEnable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withHeartbeatEnable(value=true): {
            heartbeat_enable: value,
          },
          '#withHeartbeatFrequency': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withHeartbeatFrequency(value): {
            heartbeat_frequency: value,
          },
          '#withHeartbeatSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHeartbeatSchema(value): {
            heartbeat_schema: value,
          },
          '#withMapBooleanAsBoolean': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withMapBooleanAsBoolean(value=true): {
            map_boolean_as_boolean: value,
          },
          '#withMapJsonbAsClob': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withMapJsonbAsClob(value=true): {
            map_jsonb_as_clob: value,
          },
          '#withMapLongVarcharAs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMapLongVarcharAs(value): {
            map_long_varchar_as: value,
          },
          '#withMaxFileSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxFileSize(value): {
            max_file_size: value,
          },
          '#withPluginName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPluginName(value): {
            plugin_name: value,
          },
          '#withSlotName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSlotName(value): {
            slot_name: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRedisSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRedisSettings(value): {
        redis_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRedisSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRedisSettingsMixin(value): {
        redis_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      redis_settings+:
        {
          '#': { help: '', name: 'redis_settings' },
          '#withAuthPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthPassword(value): {
            auth_password: value,
          },
          '#withAuthType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthType(value): {
            auth_type: value,
          },
          '#withAuthUserName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthUserName(value): {
            auth_user_name: value,
          },
          '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPort(value): {
            port: value,
          },
          '#withServerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServerName(value): {
            server_name: value,
          },
          '#withSslCaCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSslCaCertificateArn(value): {
            ssl_ca_certificate_arn: value,
          },
          '#withSslSecurityProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSslSecurityProtocol(value): {
            ssl_security_protocol: value,
          },
        },
      '#withRedshiftSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRedshiftSettings(value): {
        redshift_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRedshiftSettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRedshiftSettingsMixin(value): {
        redshift_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      redshift_settings+:
        {
          '#': { help: '', name: 'redshift_settings' },
          '#withBucketFolder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucketFolder(value): {
            bucket_folder: value,
          },
          '#withBucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucketName(value): {
            bucket_name: value,
          },
          '#withEncryptionMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEncryptionMode(value): {
            encryption_mode: value,
          },
          '#withServerSideEncryptionKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServerSideEncryptionKmsKeyId(value): {
            server_side_encryption_kms_key_id: value,
          },
          '#withServiceAccessRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceAccessRoleArn(value): {
            service_access_role_arn: value,
          },
        },
      '#withS3Settings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withS3Settings(value): {
        s3_settings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withS3SettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withS3SettingsMixin(value): {
        s3_settings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      s3_settings+:
        {
          '#': { help: '', name: 's3_settings' },
          '#withAddColumnName': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAddColumnName(value=true): {
            add_column_name: value,
          },
          '#withBucketFolder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucketFolder(value): {
            bucket_folder: value,
          },
          '#withBucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucketName(value): {
            bucket_name: value,
          },
          '#withCannedAclForObjects': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCannedAclForObjects(value): {
            canned_acl_for_objects: value,
          },
          '#withCdcInsertsAndUpdates': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCdcInsertsAndUpdates(value=true): {
            cdc_inserts_and_updates: value,
          },
          '#withCdcInsertsOnly': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withCdcInsertsOnly(value=true): {
            cdc_inserts_only: value,
          },
          '#withCdcMaxBatchInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCdcMaxBatchInterval(value): {
            cdc_max_batch_interval: value,
          },
          '#withCdcMinFileSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCdcMinFileSize(value): {
            cdc_min_file_size: value,
          },
          '#withCdcPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCdcPath(value): {
            cdc_path: value,
          },
          '#withCompressionType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCompressionType(value): {
            compression_type: value,
          },
          '#withCsvDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCsvDelimiter(value): {
            csv_delimiter: value,
          },
          '#withCsvNoSupValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCsvNoSupValue(value): {
            csv_no_sup_value: value,
          },
          '#withCsvNullValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCsvNullValue(value): {
            csv_null_value: value,
          },
          '#withCsvRowDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCsvRowDelimiter(value): {
            csv_row_delimiter: value,
          },
          '#withDataFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDataFormat(value): {
            data_format: value,
          },
          '#withDataPageSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withDataPageSize(value): {
            data_page_size: value,
          },
          '#withDatePartitionDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatePartitionDelimiter(value): {
            date_partition_delimiter: value,
          },
          '#withDatePartitionEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDatePartitionEnabled(value=true): {
            date_partition_enabled: value,
          },
          '#withDatePartitionSequence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatePartitionSequence(value): {
            date_partition_sequence: value,
          },
          '#withDictPageSizeLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withDictPageSizeLimit(value): {
            dict_page_size_limit: value,
          },
          '#withEnableStatistics': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableStatistics(value=true): {
            enable_statistics: value,
          },
          '#withEncodingType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEncodingType(value): {
            encoding_type: value,
          },
          '#withEncryptionMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEncryptionMode(value): {
            encryption_mode: value,
          },
          '#withExternalTableDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExternalTableDefinition(value): {
            external_table_definition: value,
          },
          '#withGlueCatalogGeneration': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withGlueCatalogGeneration(value=true): {
            glue_catalog_generation: value,
          },
          '#withIgnoreHeaderRows': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIgnoreHeaderRows(value): {
            ignore_header_rows: value,
          },
          '#withIgnoreHeadersRow': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIgnoreHeadersRow(value): {
            ignore_headers_row: value,
          },
          '#withIncludeOpForFullLoad': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeOpForFullLoad(value=true): {
            include_op_for_full_load: value,
          },
          '#withMaxFileSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxFileSize(value): {
            max_file_size: value,
          },
          '#withParquetTimestampInMillisecond': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withParquetTimestampInMillisecond(value=true): {
            parquet_timestamp_in_millisecond: value,
          },
          '#withParquetVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withParquetVersion(value): {
            parquet_version: value,
          },
          '#withPreserveTransactions': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPreserveTransactions(value=true): {
            preserve_transactions: value,
          },
          '#withRfc4180': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withRfc4180(value=true): {
            rfc_4180: value,
          },
          '#withRowGroupLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRowGroupLength(value): {
            row_group_length: value,
          },
          '#withServerSideEncryptionKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServerSideEncryptionKmsKeyId(value): {
            server_side_encryption_kms_key_id: value,
          },
          '#withServiceAccessRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceAccessRoleArn(value): {
            service_access_role_arn: value,
          },
          '#withTimestampColumnName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTimestampColumnName(value): {
            timestamp_column_name: value,
          },
          '#withUseCsvNoSupValue': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUseCsvNoSupValue(value=true): {
            use_csv_no_sup_value: value,
          },
          '#withUseTaskStartTimeForFullLoadTimestamp': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUseTaskStartTimeForFullLoadTimestamp(value=true): {
            use_task_start_time_for_full_load_timestamp: value,
          },
        },
      '#withSecretsManagerAccessRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSecretsManagerAccessRoleArn(value): {
        secrets_manager_access_role_arn: value,
      },
      '#withSecretsManagerArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSecretsManagerArn(value): {
        secrets_manager_arn: value,
      },
      '#withServerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServerName(value): {
        server_name: value,
      },
      '#withServiceAccessRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServiceAccessRole(value): {
        service_access_role: value,
      },
      '#withSslMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSslMode(value): {
        ssl_mode: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUsername(value): {
        username: value,
      },
    },
  aws_dms_replication_instance:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'replication_instance_id', type: 'string' }], help: '' } },
      new(tf_resource_key, replication_instance_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withReplicationInstanceId(replication_instance_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_dms_replication_instance+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAllocatedStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withAllocatedStorage(value): {
        allocated_storage: value,
      },
      '#withAutoMinorVersionUpgrade': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoMinorVersionUpgrade(value=true): {
        auto_minor_version_upgrade: value,
      },
      '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAvailabilityZone(value): {
        availability_zone: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEngineVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineVersion(value): {
        engine_version: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyArn(value): {
        kms_key_arn: value,
      },
      '#withMultiAz': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withMultiAz(value=true): {
        multi_az: value,
      },
      '#withNetworkType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkType(value): {
        network_type: value,
      },
      '#withPreferredMaintenanceWindow': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreferredMaintenanceWindow(value): {
        preferred_maintenance_window: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withPubliclyAccessible': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPubliclyAccessible(value=true): {
        publicly_accessible: value,
      },
      '#withReplicationInstanceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationInstanceArn(value): {
        replication_instance_arn: value,
      },
      '#withReplicationInstanceClass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationInstanceClass(value): {
        replication_instance_class: value,
      },
      '#withReplicationInstanceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationInstanceId(value): {
        replication_instance_id: value,
      },
      '#withReplicationInstancePrivateIps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReplicationInstancePrivateIps(value): {
        replication_instance_private_ips:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withReplicationInstancePrivateIpsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReplicationInstancePrivateIpsMixin(value): {
        replication_instance_private_ips+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withReplicationInstancePublicIps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReplicationInstancePublicIps(value): {
        replication_instance_public_ips:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withReplicationInstancePublicIpsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReplicationInstancePublicIpsMixin(value): {
        replication_instance_public_ips+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withReplicationSubnetGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationSubnetGroupId(value): {
        replication_subnet_group_id: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withVpcSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcSecurityGroupIds(value): {
        vpc_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVpcSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcSecurityGroupIdsMixin(value): {
        vpc_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_dms_replication_subnet_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'replication_subnet_group_id', type: 'string' }], help: '' } },
      new(tf_resource_key, replication_subnet_group_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withReplicationSubnetGroupId(replication_subnet_group_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_dms_replication_subnet_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withReplicationSubnetGroupArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationSubnetGroupArn(value): {
        replication_subnet_group_arn: value,
      },
      '#withReplicationSubnetGroupDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationSubnetGroupDescription(value): {
        replication_subnet_group_description: value,
      },
      '#withReplicationSubnetGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationSubnetGroupId(value): {
        replication_subnet_group_id: value,
      },
      '#withSubnetGroupStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSubnetGroupStatus(value): {
        subnet_group_status: value,
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
    },
  aws_dms_replication_task:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'replication_task_id', type: 'string' }], help: '' } },
      new(tf_resource_key, replication_task_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withReplicationTaskId(replication_task_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_dms_replication_task+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCdcStartPosition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCdcStartPosition(value): {
        cdc_start_position: value,
      },
      '#withCdcStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCdcStartTime(value): {
        cdc_start_time: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withMigrationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMigrationType(value): {
        migration_type: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withReplicationInstanceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationInstanceArn(value): {
        replication_instance_arn: value,
      },
      '#withReplicationTaskArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationTaskArn(value): {
        replication_task_arn: value,
      },
      '#withReplicationTaskId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationTaskId(value): {
        replication_task_id: value,
      },
      '#withReplicationTaskSettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationTaskSettings(value): {
        replication_task_settings: value,
      },
      '#withSourceEndpointArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSourceEndpointArn(value): {
        source_endpoint_arn: value,
      },
      '#withStartReplicationTask': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withStartReplicationTask(value=true): {
        start_replication_task: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withTableMappings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTableMappings(value): {
        table_mappings: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTargetEndpointArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTargetEndpointArn(value): {
        target_endpoint_arn: value,
      },
    },
}
