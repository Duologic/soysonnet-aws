// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'resourceexplorer2',
  },
  aws_resourceexplorer2_search:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'query_string', type: 'string' }], help: '' } },
      new(tf_resource_key, query_string):
        self.withTfResourceKey(tf_resource_key)
        + self.withQueryString(query_string),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_resourceexplorer2_search: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withQueryString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQueryString(value): {
        query_string: value,
      },
      '#withResourceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceCount(value): {
        resource_count:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceCountMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceCountMixin(value): {
        resource_count+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      resource_count+:
        {
          '#': { help: '', name: 'resource_count' },
          '#withComplete': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withComplete(value=true): {
            complete: value,
          },
          '#withTotalResources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTotalResources(value): {
            total_resources: value,
          },
        },
      '#withResources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResources(value): {
        resources:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourcesMixin(value): {
        resources+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      resources+:
        {
          '#': { help: '', name: 'resources' },
          '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withArn(value): {
            arn: value,
          },
          '#withLastReportedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLastReportedAt(value): {
            last_reported_at: value,
          },
          '#withOwningAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withOwningAccountId(value): {
            owning_account_id: value,
          },
          '#withProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProperties(value): {
            properties:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPropertiesMixin(value): {
            properties+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          properties+:
            {
              '#': { help: '', name: 'properties' },
              '#withData': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withData(value): {
                data: value,
              },
              '#withLastReportedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withLastReportedAt(value): {
                last_reported_at: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRegion(value): {
            region: value,
          },
          '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withResourceType(value): {
            resource_type: value,
          },
          '#withService': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withService(value): {
            service: value,
          },
        },
      '#withViewArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withViewArn(value): {
        view_arn: value,
      },
    },
}
