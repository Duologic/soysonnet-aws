// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'redshiftserverless',
  },
  aws_redshiftserverless_credentials:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'workgroup_name', type: 'string' }], help: '' } },
      new(tf_resource_key, workgroup_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withWorkgroupName(workgroup_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_redshiftserverless_credentials+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDbName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbName(value): {
        db_name: value,
      },
      '#withDbPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbPassword(value): {
        db_password: value,
      },
      '#withDbUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbUser(value): {
        db_user: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDurationSeconds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDurationSeconds(value): {
        duration_seconds: value,
      },
      '#withExpiration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpiration(value): {
        expiration: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withWorkgroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkgroupName(value): {
        workgroup_name: value,
      },
    },
  aws_redshiftserverless_namespace:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'namespace_name', type: 'string' }], help: '' } },
      new(tf_resource_key, namespace_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withNamespaceName(namespace_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_redshiftserverless_namespace+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAdminUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAdminUsername(value): {
        admin_username: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDbName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbName(value): {
        db_name: value,
      },
      '#withDefaultIamRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultIamRoleArn(value): {
        default_iam_role_arn: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIamRoles': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamRoles(value): {
        iam_roles:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIamRolesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamRolesMixin(value): {
        iam_roles+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withLogExports': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLogExports(value): {
        log_exports:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLogExportsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLogExportsMixin(value): {
        log_exports+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNamespaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNamespaceId(value): {
        namespace_id: value,
      },
      '#withNamespaceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNamespaceName(value): {
        namespace_name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_redshiftserverless_workgroup:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'workgroup_name', type: 'string' }], help: '' } },
      new(tf_resource_key, workgroup_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withWorkgroupName(workgroup_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_redshiftserverless_workgroup+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpoint(value): {
        endpoint:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpointMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpointMixin(value): {
        endpoint+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      endpoint+:
        {
          '#': { help: '', name: 'endpoint' },
          '#withAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress(value): {
            address: value,
          },
          '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPort(value): {
            port: value,
          },
          '#withVpcEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcEndpoint(value): {
            vpc_endpoint:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcEndpointMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcEndpointMixin(value): {
            vpc_endpoint+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpc_endpoint+:
            {
              '#': { help: '', name: 'vpc_endpoint' },
              '#withNetworkInterface': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNetworkInterface(value): {
                network_interface:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withNetworkInterfaceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNetworkInterfaceMixin(value): {
                network_interface+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              network_interface+:
                {
                  '#': { help: '', name: 'network_interface' },
                  '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAvailabilityZone(value): {
                    availability_zone: value,
                  },
                  '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withNetworkInterfaceId(value): {
                    network_interface_id: value,
                  },
                  '#withPrivateIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withPrivateIpAddress(value): {
                    private_ip_address: value,
                  },
                  '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSubnetId(value): {
                    subnet_id: value,
                  },
                },
              '#withVpcEndpointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcEndpointId(value): {
                vpc_endpoint_id: value,
              },
              '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcId(value): {
                vpc_id: value,
              },
            },
        },
      '#withEnhancedVpcRouting': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnhancedVpcRouting(value=true): {
        enhanced_vpc_routing: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withNamespaceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNamespaceName(value): {
        namespace_name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withPubliclyAccessible': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPubliclyAccessible(value=true): {
        publicly_accessible: value,
      },
      '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIds(value): {
        security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIdsMixin(value): {
        security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withWorkgroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkgroupId(value): {
        workgroup_id: value,
      },
      '#withWorkgroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWorkgroupName(value): {
        workgroup_name: value,
      },
    },
}
