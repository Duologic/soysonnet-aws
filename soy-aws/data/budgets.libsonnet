// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'budgets',
  },
  aws_budgets_budget:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        {
          local this = self,
          data: {
            aws_budgets_budget: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAccountId(value): {
        spec+: {
          account_id: value,
        },
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withAutoAdjustData': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAutoAdjustData(value): {
        spec+: {
          auto_adjust_data:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAutoAdjustDataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAutoAdjustDataMixin(value): {
        spec+: {
          auto_adjust_data+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      auto_adjust_data+:
        {
          '#': { help: '', name: 'auto_adjust_data' },
          '#withAutoAdjustType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAutoAdjustType(value): {
            auto_adjust_type: value,
          },
          '#withHistoricalOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHistoricalOptions(value): {
            historical_options:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHistoricalOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHistoricalOptionsMixin(value): {
            historical_options+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          historical_options+:
            {
              '#': { help: '', name: 'historical_options' },
              '#withBudgetAdjustmentPeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBudgetAdjustmentPeriod(value): {
                budget_adjustment_period: value,
              },
              '#withLookbackAvailablePeriods': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLookbackAvailablePeriods(value): {
                lookback_available_periods: value,
              },
            },
          '#withLastAutoAdjustTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLastAutoAdjustTime(value): {
            last_auto_adjust_time: value,
          },
        },
      '#withBudgetExceeded': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withBudgetExceeded(value=true): {
        spec+: {
          budget_exceeded: value,
        },
      },
      '#withBudgetLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBudgetLimit(value): {
        spec+: {
          budget_limit:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withBudgetLimitMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBudgetLimitMixin(value): {
        spec+: {
          budget_limit+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      budget_limit+:
        {
          '#': { help: '', name: 'budget_limit' },
          '#withAmount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAmount(value): {
            amount: value,
          },
          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUnit(value): {
            unit: value,
          },
        },
      '#withBudgetType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBudgetType(value): {
        spec+: {
          budget_type: value,
        },
      },
      '#withCalculatedSpend': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCalculatedSpend(value): {
        spec+: {
          calculated_spend:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCalculatedSpendMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCalculatedSpendMixin(value): {
        spec+: {
          calculated_spend+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      calculated_spend+:
        {
          '#': { help: '', name: 'calculated_spend' },
          '#withActualSpend': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withActualSpend(value): {
            actual_spend:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withActualSpendMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withActualSpendMixin(value): {
            actual_spend+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          actual_spend+:
            {
              '#': { help: '', name: 'actual_spend' },
              '#withAmount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAmount(value): {
                amount: value,
              },
              '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUnit(value): {
                unit: value,
              },
            },
        },
      '#withCostFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCostFilter(value): {
        spec+: {
          cost_filter:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCostFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCostFilterMixin(value): {
        spec+: {
          cost_filter+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      cost_filter+:
        {
          '#': { help: '', name: 'cost_filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withCostTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCostTypes(value): {
        spec+: {
          cost_types:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCostTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCostTypesMixin(value): {
        spec+: {
          cost_types+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      cost_types+:
        {
          '#': { help: '', name: 'cost_types' },
          '#withIncludeCredit': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeCredit(value=true): {
            include_credit: value,
          },
          '#withIncludeDiscount': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeDiscount(value=true): {
            include_discount: value,
          },
          '#withIncludeOtherSubscription': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeOtherSubscription(value=true): {
            include_other_subscription: value,
          },
          '#withIncludeRecurring': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeRecurring(value=true): {
            include_recurring: value,
          },
          '#withIncludeRefund': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeRefund(value=true): {
            include_refund: value,
          },
          '#withIncludeSubscription': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeSubscription(value=true): {
            include_subscription: value,
          },
          '#withIncludeSupport': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeSupport(value=true): {
            include_support: value,
          },
          '#withIncludeTax': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeTax(value=true): {
            include_tax: value,
          },
          '#withIncludeUpfront': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIncludeUpfront(value=true): {
            include_upfront: value,
          },
          '#withUseAmortized': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUseAmortized(value=true): {
            use_amortized: value,
          },
          '#withUseBlended': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUseBlended(value=true): {
            use_blended: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withNamePrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNamePrefix(value): {
        spec+: {
          name_prefix: value,
        },
      },
      '#withNotification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNotification(value): {
        spec+: {
          notification:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withNotificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNotificationMixin(value): {
        spec+: {
          notification+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      notification+:
        {
          '#': { help: '', name: 'notification' },
          '#withComparisonOperator': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withComparisonOperator(value): {
            comparison_operator: value,
          },
          '#withNotificationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNotificationType(value): {
            notification_type: value,
          },
          '#withSubscriberEmailAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubscriberEmailAddresses(value): {
            subscriber_email_addresses:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubscriberEmailAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubscriberEmailAddressesMixin(value): {
            subscriber_email_addresses+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubscriberSnsTopicArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubscriberSnsTopicArns(value): {
            subscriber_sns_topic_arns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubscriberSnsTopicArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubscriberSnsTopicArnsMixin(value): {
            subscriber_sns_topic_arns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withThreshold(value): {
            threshold: value,
          },
          '#withThresholdType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withThresholdType(value): {
            threshold_type: value,
          },
        },
      '#withPlannedLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlannedLimit(value): {
        spec+: {
          planned_limit:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPlannedLimitMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlannedLimitMixin(value): {
        spec+: {
          planned_limit+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      planned_limit+:
        {
          '#': { help: '', name: 'planned_limit' },
          '#withAmount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAmount(value): {
            amount: value,
          },
          '#withStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStartTime(value): {
            start_time: value,
          },
          '#withUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUnit(value): {
            unit: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTimePeriodEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTimePeriodEnd(value): {
        spec+: {
          time_period_end: value,
        },
      },
      '#withTimePeriodStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTimePeriodStart(value): {
        spec+: {
          time_period_start: value,
        },
      },
      '#withTimeUnit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTimeUnit(value): {
        spec+: {
          time_unit: value,
        },
      },
    },
}
