// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'ssmincidents',
  },
  aws_ssmincidents_replication_set:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          data: {
            aws_ssmincidents_replication_set: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedBy(value): {
        spec+: {
          created_by: value,
        },
      },
      '#withDeletionProtected': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDeletionProtected(value=true): {
        spec+: {
          deletion_protected: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastModifiedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModifiedBy(value): {
        spec+: {
          last_modified_by: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRegion(value): {
        spec+: {
          region:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRegionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRegionMixin(value): {
        spec+: {
          region+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      region+:
        {
          '#': { help: '', name: 'region' },
          '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyArn(value): {
            kms_key_arn: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatus(value): {
            status: value,
          },
          '#withStatusMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatusMessage(value): {
            status_message: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_ssmincidents_response_plan:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        {
          local this = self,
          data: {
            aws_ssmincidents_response_plan: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAction(value): {
        spec+: {
          action:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActionMixin(value): {
        spec+: {
          action+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      action+:
        {
          '#': { help: '', name: 'action' },
          '#withSsmAutomation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSsmAutomation(value): {
            ssm_automation:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSsmAutomationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSsmAutomationMixin(value): {
            ssm_automation+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          ssm_automation+:
            {
              '#': { help: '', name: 'ssm_automation' },
              '#withDocumentName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDocumentName(value): {
                document_name: value,
              },
              '#withDocumentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDocumentVersion(value): {
                document_version: value,
              },
              '#withDynamicParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDynamicParameters(value): {
                dynamic_parameters: value,
              },
              '#withDynamicParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDynamicParametersMixin(value): {
                dynamic_parameters+: value,
              },
              '#withParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withParameter(value): {
                parameter:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withParameterMixin(value): {
                parameter+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              parameter+:
                {
                  '#': { help: '', name: 'parameter' },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                role_arn: value,
              },
              '#withTargetAccount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTargetAccount(value): {
                target_account: value,
              },
            },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withChatChannel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withChatChannel(value): {
        spec+: {
          chat_channel:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withChatChannelMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withChatChannelMixin(value): {
        spec+: {
          chat_channel+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDisplayName(value): {
        spec+: {
          display_name: value,
        },
      },
      '#withEngagements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEngagements(value): {
        spec+: {
          engagements:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEngagementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEngagementsMixin(value): {
        spec+: {
          engagements+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIncidentTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIncidentTemplate(value): {
        spec+: {
          incident_template:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withIncidentTemplateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIncidentTemplateMixin(value): {
        spec+: {
          incident_template+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      incident_template+:
        {
          '#': { help: '', name: 'incident_template' },
          '#withDedupeString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDedupeString(value): {
            dedupe_string: value,
          },
          '#withImpact': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withImpact(value): {
            impact: value,
          },
          '#withIncidentTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withIncidentTags(value): {
            incident_tags: value,
          },
          '#withIncidentTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withIncidentTagsMixin(value): {
            incident_tags+: value,
          },
          '#withNotificationTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNotificationTarget(value): {
            notification_target:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNotificationTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNotificationTargetMixin(value): {
            notification_target+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          notification_target+:
            {
              '#': { help: '', name: 'notification_target' },
              '#withSnsTopicArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSnsTopicArn(value): {
                sns_topic_arn: value,
              },
            },
          '#withSummary': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSummary(value): {
            summary: value,
          },
          '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTitle(value): {
            title: value,
          },
        },
      '#withIntegration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIntegration(value): {
        spec+: {
          integration:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withIntegrationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIntegrationMixin(value): {
        spec+: {
          integration+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      integration+:
        {
          '#': { help: '', name: 'integration' },
          '#withPagerduty': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPagerduty(value): {
            pagerduty:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPagerdutyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPagerdutyMixin(value): {
            pagerduty+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          pagerduty+:
            {
              '#': { help: '', name: 'pagerduty' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withSecretId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecretId(value): {
                secret_id: value,
              },
              '#withServiceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withServiceId(value): {
                service_id: value,
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
}
