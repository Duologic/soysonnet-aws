// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'fsx',
  },
  aws_fsx_ontap_file_system:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_fsx_ontap_file_system+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAutomaticBackupRetentionDays': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withAutomaticBackupRetentionDays(value): {
        automatic_backup_retention_days: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDailyAutomaticBackupStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDailyAutomaticBackupStartTime(value): {
        daily_automatic_backup_start_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeploymentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentType(value): {
        deployment_type: value,
      },
      '#withDiskIopsConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDiskIopsConfiguration(value): {
        disk_iops_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDiskIopsConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDiskIopsConfigurationMixin(value): {
        disk_iops_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      disk_iops_configuration+:
        {
          '#': { help: '', name: 'disk_iops_configuration' },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMode(value): {
            mode: value,
          },
        },
      '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDnsName(value): {
        dns_name: value,
      },
      '#withEndpointIpAddressRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndpointIpAddressRange(value): {
        endpoint_ip_address_range: value,
      },
      '#withEndpoints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpoints(value): {
        endpoints:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpointsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpointsMixin(value): {
        endpoints+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      endpoints+:
        {
          '#': { help: '', name: 'endpoints' },
          '#withIntercluster': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIntercluster(value): {
            intercluster:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInterclusterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInterclusterMixin(value): {
            intercluster+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          intercluster+:
            {
              '#': { help: '', name: 'intercluster' },
              '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDnsName(value): {
                dns_name: value,
              },
              '#withIpAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddresses(value): {
                ip_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIpAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddressesMixin(value): {
                ip_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withManagement(value): {
            management:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withManagementMixin(value): {
            management+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          management+:
            {
              '#': { help: '', name: 'management' },
              '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDnsName(value): {
                dns_name: value,
              },
              '#withIpAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddresses(value): {
                ip_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIpAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddressesMixin(value): {
                ip_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
        },
      '#withHaPairs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withHaPairs(value): {
        ha_pairs: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withNetworkInterfaceIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkInterfaceIds(value): {
        network_interface_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNetworkInterfaceIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkInterfaceIdsMixin(value): {
        network_interface_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwnerId(value): {
        owner_id: value,
      },
      '#withPreferredSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreferredSubnetId(value): {
        preferred_subnet_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRouteTableIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRouteTableIds(value): {
        route_table_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRouteTableIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRouteTableIdsMixin(value): {
        route_table_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStorageCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withStorageCapacity(value): {
        storage_capacity: value,
      },
      '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageType(value): {
        storage_type: value,
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withThroughputCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withThroughputCapacity(value): {
        throughput_capacity: value,
      },
      '#withThroughputCapacityPerHaPair': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withThroughputCapacityPerHaPair(value): {
        throughput_capacity_per_ha_pair: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
      '#withWeeklyMaintenanceStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWeeklyMaintenanceStartTime(value): {
        weekly_maintenance_start_time: value,
      },
    },
  aws_fsx_ontap_storage_virtual_machine:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_fsx_ontap_storage_virtual_machine+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withActiveDirectoryConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActiveDirectoryConfiguration(value): {
        active_directory_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withActiveDirectoryConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActiveDirectoryConfigurationMixin(value): {
        active_directory_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      active_directory_configuration+:
        {
          '#': { help: '', name: 'active_directory_configuration' },
          '#withNetbiosName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNetbiosName(value): {
            netbios_name: value,
          },
          '#withSelfManagedActiveDirectoryConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSelfManagedActiveDirectoryConfiguration(value): {
            self_managed_active_directory_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSelfManagedActiveDirectoryConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSelfManagedActiveDirectoryConfigurationMixin(value): {
            self_managed_active_directory_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          self_managed_active_directory_configuration+:
            {
              '#': { help: '', name: 'self_managed_active_directory_configuration' },
              '#withDnsIps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDnsIps(value): {
                dns_ips:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDnsIpsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDnsIpsMixin(value): {
                dns_ips+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDomainName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDomainName(value): {
                domain_name: value,
              },
              '#withFileSystemAdministratorsGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileSystemAdministratorsGroup(value): {
                file_system_administrators_group: value,
              },
              '#withOrganizationalUnitDistinguishedName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOrganizationalUnitDistinguishedName(value): {
                organizational_unit_distinguished_name: value,
              },
              '#withUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUsername(value): {
                username: value,
              },
            },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTime(value): {
        creation_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpoints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpoints(value): {
        endpoints:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpointsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpointsMixin(value): {
        endpoints+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      endpoints+:
        {
          '#': { help: '', name: 'endpoints' },
          '#withIscsi': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIscsi(value): {
            iscsi:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIscsiMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIscsiMixin(value): {
            iscsi+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          iscsi+:
            {
              '#': { help: '', name: 'iscsi' },
              '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDnsName(value): {
                dns_name: value,
              },
              '#withIpAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddresses(value): {
                ip_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIpAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddressesMixin(value): {
                ip_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withManagement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withManagement(value): {
            management:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withManagementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withManagementMixin(value): {
            management+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          management+:
            {
              '#': { help: '', name: 'management' },
              '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDnsName(value): {
                dns_name: value,
              },
              '#withIpAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddresses(value): {
                ip_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIpAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddressesMixin(value): {
                ip_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withNfs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNfs(value): {
            nfs:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNfsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNfsMixin(value): {
            nfs+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          nfs+:
            {
              '#': { help: '', name: 'nfs' },
              '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDnsName(value): {
                dns_name: value,
              },
              '#withIpAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddresses(value): {
                ip_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIpAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddressesMixin(value): {
                ip_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withSmb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSmb(value): {
            smb:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSmbMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSmbMixin(value): {
            smb+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          smb+:
            {
              '#': { help: '', name: 'smb' },
              '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDnsName(value): {
                dns_name: value,
              },
              '#withIpAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddresses(value): {
                ip_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withIpAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withIpAddressesMixin(value): {
                ip_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
        },
      '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFileSystemId(value): {
        file_system_id: value,
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLifecycleStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLifecycleStatus(value): {
        lifecycle_status: value,
      },
      '#withLifecycleTransitionReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLifecycleTransitionReason(value): {
        lifecycle_transition_reason:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLifecycleTransitionReasonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLifecycleTransitionReasonMixin(value): {
        lifecycle_transition_reason+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      lifecycle_transition_reason+:
        {
          '#': { help: '', name: 'lifecycle_transition_reason' },
          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMessage(value): {
            message: value,
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSubtype': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSubtype(value): {
        subtype: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUuid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUuid(value): {
        uuid: value,
      },
    },
  aws_fsx_ontap_storage_virtual_machines:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_fsx_ontap_storage_virtual_machines+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_fsx_openzfs_snapshot:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_fsx_openzfs_snapshot+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTime(value): {
        creation_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withMostRecent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withMostRecent(value=true): {
        most_recent: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSnapshotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSnapshotId(value): {
        snapshot_id: value,
      },
      '#withSnapshotIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSnapshotIds(value): {
        snapshot_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSnapshotIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSnapshotIdsMixin(value): {
        snapshot_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withVolumeId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVolumeId(value): {
        volume_id: value,
      },
    },
  aws_fsx_windows_file_system:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_fsx_windows_file_system+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withActiveDirectoryId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withActiveDirectoryId(value): {
        active_directory_id: value,
      },
      '#withAliases': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAliases(value): {
        aliases:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAliasesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAliasesMixin(value): {
        aliases+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAuditLogConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAuditLogConfiguration(value): {
        audit_log_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAuditLogConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAuditLogConfigurationMixin(value): {
        audit_log_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      audit_log_configuration+:
        {
          '#': { help: '', name: 'audit_log_configuration' },
          '#withAuditLogDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuditLogDestination(value): {
            audit_log_destination: value,
          },
          '#withFileAccessAuditLogLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFileAccessAuditLogLevel(value): {
            file_access_audit_log_level: value,
          },
          '#withFileShareAccessAuditLogLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFileShareAccessAuditLogLevel(value): {
            file_share_access_audit_log_level: value,
          },
        },
      '#withAutomaticBackupRetentionDays': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withAutomaticBackupRetentionDays(value): {
        automatic_backup_retention_days: value,
      },
      '#withBackupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBackupId(value): {
        backup_id: value,
      },
      '#withCopyTagsToBackups': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withCopyTagsToBackups(value=true): {
        copy_tags_to_backups: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDailyAutomaticBackupStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDailyAutomaticBackupStartTime(value): {
        daily_automatic_backup_start_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeploymentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentType(value): {
        deployment_type: value,
      },
      '#withDiskIopsConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDiskIopsConfiguration(value): {
        disk_iops_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDiskIopsConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDiskIopsConfigurationMixin(value): {
        disk_iops_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      disk_iops_configuration+:
        {
          '#': { help: '', name: 'disk_iops_configuration' },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMode(value): {
            mode: value,
          },
        },
      '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDnsName(value): {
        dns_name: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withNetworkInterfaceIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkInterfaceIds(value): {
        network_interface_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNetworkInterfaceIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkInterfaceIdsMixin(value): {
        network_interface_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwnerId(value): {
        owner_id: value,
      },
      '#withPreferredFileServerIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreferredFileServerIp(value): {
        preferred_file_server_ip: value,
      },
      '#withPreferredSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreferredSubnetId(value): {
        preferred_subnet_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIds(value): {
        security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIdsMixin(value): {
        security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSkipFinalBackup': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSkipFinalBackup(value=true): {
        skip_final_backup: value,
      },
      '#withStorageCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withStorageCapacity(value): {
        storage_capacity: value,
      },
      '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageType(value): {
        storage_type: value,
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withThroughputCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withThroughputCapacity(value): {
        throughput_capacity: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
      '#withWeeklyMaintenanceStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWeeklyMaintenanceStartTime(value): {
        weekly_maintenance_start_time: value,
      },
    },
}
