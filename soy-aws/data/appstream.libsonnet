// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'appstream',
  },
  aws_appstream_image:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_appstream_image: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withApplications': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withApplications(value): {
        applications:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withApplicationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withApplicationsMixin(value): {
        applications+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      applications+:
        {
          '#': { help: '', name: 'applications' },
          '#withAppBlockArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAppBlockArn(value): {
            app_block_arn: value,
          },
          '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withArn(value): {
            arn: value,
          },
          '#withCreatedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreatedTime(value): {
            created_time: value,
          },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            description: value,
          },
          '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDisplayName(value): {
            display_name: value,
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withIconS3Location': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIconS3Location(value): {
            icon_s3_location:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIconS3LocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIconS3LocationMixin(value): {
            icon_s3_location+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          icon_s3_location+:
            {
              '#': { help: '', name: 'icon_s3_location' },
              '#withS3Bucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3Bucket(value): {
                s3_bucket: value,
              },
              '#withS3Key': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3Key(value): {
                s3_key: value,
              },
            },
          '#withIconUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIconUrl(value): {
            icon_url: value,
          },
          '#withInstanceFamilies': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstanceFamilies(value): {
            instance_families:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInstanceFamiliesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstanceFamiliesMixin(value): {
            instance_families+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLaunchParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLaunchParameters(value): {
            launch_parameters: value,
          },
          '#withLaunchPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLaunchPath(value): {
            launch_path: value,
          },
          '#withMetadata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMetadata(value): {
            metadata: value,
          },
          '#withMetadataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withMetadataMixin(value): {
            metadata+: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withPlatforms': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPlatforms(value): {
            platforms:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPlatformsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPlatformsMixin(value): {
            platforms+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withWorkingDirectory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withWorkingDirectory(value): {
            working_directory: value,
          },
        },
      '#withAppstreamAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAppstreamAgentVersion(value): {
        appstream_agent_version: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBaseImageArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBaseImageArn(value): {
        base_image_arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedTime(value): {
        created_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDisplayName(value): {
        display_name: value,
      },
      '#withImageBuilderName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageBuilderName(value): {
        image_builder_name: value,
      },
      '#withImageBuilderSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withImageBuilderSupported(value=true): {
        image_builder_supported: value,
      },
      '#withImagePermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withImagePermissions(value): {
        image_permissions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withImagePermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withImagePermissionsMixin(value): {
        image_permissions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      image_permissions+:
        {
          '#': { help: '', name: 'image_permissions' },
          '#withAllowFleet': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAllowFleet(value=true): {
            allow_fleet: value,
          },
          '#withAllowImageBuilder': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAllowImageBuilder(value=true): {
            allow_image_builder: value,
          },
        },
      '#withMostRecent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withMostRecent(value=true): {
        most_recent: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNameRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNameRegex(value): {
        name_regex: value,
      },
      '#withPlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatform(value): {
        platform: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withPublicBaseImageReleasedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPublicBaseImageReleasedDate(value): {
        public_base_image_released_date: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withStateChangeReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStateChangeReason(value): {
        state_change_reason:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStateChangeReasonMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStateChangeReasonMixin(value): {
        state_change_reason+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      state_change_reason+:
        {
          '#': { help: '', name: 'state_change_reason' },
          '#withCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCode(value): {
            code: value,
          },
          '#withMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMessage(value): {
            message: value,
          },
        },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        type: value,
      },
    },
}
