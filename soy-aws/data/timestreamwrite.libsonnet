// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'timestreamwrite',
  },
  aws_timestreamwrite_database:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        {
          local this = self,
          data: {
            aws_timestreamwrite_database: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedTime(value): {
        spec+: {
          created_time: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        spec+: {
          kms_key_id: value,
        },
      },
      '#withLastUpdatedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedTime(value): {
        spec+: {
          last_updated_time: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTableCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTableCount(value): {
        spec+: {
          table_count: value,
        },
      },
    },
  aws_timestreamwrite_table:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'database_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, database_name, name):
        {
          local this = self,
          data: {
            aws_timestreamwrite_table: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withDatabaseName(database_name)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTime(value): {
        spec+: {
          creation_time: value,
        },
      },
      '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDatabaseName(value): {
        spec+: {
          database_name: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withLastUpdatedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedTime(value): {
        spec+: {
          last_updated_time: value,
        },
      },
      '#withMagneticStoreWriteProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMagneticStoreWriteProperties(value): {
        spec+: {
          magnetic_store_write_properties:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withMagneticStoreWritePropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMagneticStoreWritePropertiesMixin(value): {
        spec+: {
          magnetic_store_write_properties+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      magnetic_store_write_properties+:
        {
          '#': { help: '', name: 'magnetic_store_write_properties' },
          '#withEnableMagneticStoreWrites': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableMagneticStoreWrites(value=true): {
            enable_magnetic_store_writes: value,
          },
          '#withMagneticStoreRejectedDataLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMagneticStoreRejectedDataLocation(value): {
            magnetic_store_rejected_data_location:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMagneticStoreRejectedDataLocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMagneticStoreRejectedDataLocationMixin(value): {
            magnetic_store_rejected_data_location+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          magnetic_store_rejected_data_location+:
            {
              '#': { help: '', name: 'magnetic_store_rejected_data_location' },
              '#withS3Configuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3Configuration(value): {
                s3_configuration:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withS3ConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withS3ConfigurationMixin(value): {
                s3_configuration+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              s3_configuration+:
                {
                  '#': { help: '', name: 's3_configuration' },
                  '#withBucketName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withBucketName(value): {
                    bucket_name: value,
                  },
                  '#withEncryptionOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withEncryptionOption(value): {
                    encryption_option: value,
                  },
                  '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKmsKeyId(value): {
                    kms_key_id: value,
                  },
                  '#withObjectKeyPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withObjectKeyPrefix(value): {
                    object_key_prefix: value,
                  },
                },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRetentionProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRetentionProperties(value): {
        spec+: {
          retention_properties:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRetentionPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRetentionPropertiesMixin(value): {
        spec+: {
          retention_properties+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      retention_properties+:
        {
          '#': { help: '', name: 'retention_properties' },
          '#withMagneticStoreRetentionPeriodInDays': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMagneticStoreRetentionPeriodInDays(value): {
            magnetic_store_retention_period_in_days: value,
          },
          '#withMemoryStoreRetentionPeriodInHours': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMemoryStoreRetentionPeriodInHours(value): {
            memory_store_retention_period_in_hours: value,
          },
        },
      '#withSchema': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSchema(value): {
        spec+: {
          schema:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSchemaMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSchemaMixin(value): {
        spec+: {
          schema+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      schema+:
        {
          '#': { help: '', name: 'schema' },
          '#withCompositePartitionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCompositePartitionKey(value): {
            composite_partition_key:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCompositePartitionKeyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCompositePartitionKeyMixin(value): {
            composite_partition_key+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          composite_partition_key+:
            {
              '#': { help: '', name: 'composite_partition_key' },
              '#withEnforcementInRecord': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEnforcementInRecord(value): {
                enforcement_in_record: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                type: value,
              },
            },
        },
      '#withTableStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTableStatus(value): {
        spec+: {
          table_status: value,
        },
      },
    },
}
