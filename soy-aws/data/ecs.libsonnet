// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'ecs',
  },
  aws_ecs_cluster:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_name', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_name):
        {
          local this = self,
          data: {
            aws_ecs_cluster: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withClusterName(cluster_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withClusterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterName(value): {
        spec+: {
          cluster_name: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withPendingTasksCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPendingTasksCount(value): {
        spec+: {
          pending_tasks_count: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRegisteredContainerInstancesCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRegisteredContainerInstancesCount(value): {
        spec+: {
          registered_container_instances_count: value,
        },
      },
      '#withRunningTasksCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRunningTasksCount(value): {
        spec+: {
          running_tasks_count: value,
        },
      },
      '#withServiceConnectDefaults': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServiceConnectDefaults(value): {
        spec+: {
          service_connect_defaults:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withServiceConnectDefaultsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServiceConnectDefaultsMixin(value): {
        spec+: {
          service_connect_defaults+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      service_connect_defaults+:
        {
          '#': { help: '', name: 'service_connect_defaults' },
          '#withNamespace': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNamespace(value): {
            namespace: value,
          },
        },
      '#withSetting': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSetting(value): {
        spec+: {
          setting:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSettingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSettingMixin(value): {
        spec+: {
          setting+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      setting+:
        {
          '#': { help: '', name: 'setting' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
    },
  aws_ecs_clusters:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          data: {
            aws_ecs_clusters: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withClusterArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterArns(value): {
        spec+: {
          cluster_arns:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withClusterArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterArnsMixin(value): {
        spec+: {
          cluster_arns+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_ecs_container_definition:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'container_name', type: 'string' }, { default: null, enums: null, name: 'task_definition', type: 'string' }], help: '' } },
      new(tf_resource_key, container_name, task_definition):
        {
          local this = self,
          data: {
            aws_ecs_container_definition: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withContainerName(container_name)
        + self.withTaskDefinition(task_definition),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withContainerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContainerName(value): {
        spec+: {
          container_name: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCpu(value): {
        spec+: {
          cpu: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDisableNetworking': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDisableNetworking(value=true): {
        spec+: {
          disable_networking: value,
        },
      },
      '#withDockerLabels': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDockerLabels(value): {
        spec+: {
          docker_labels: value,
        },
      },
      '#withDockerLabelsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDockerLabelsMixin(value): {
        spec+: {
          docker_labels+: value,
        },
      },
      '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEnvironment(value): {
        spec+: {
          environment: value,
        },
      },
      '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withEnvironmentMixin(value): {
        spec+: {
          environment+: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withImage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImage(value): {
        spec+: {
          image: value,
        },
      },
      '#withImageDigest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageDigest(value): {
        spec+: {
          image_digest: value,
        },
      },
      '#withMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMemory(value): {
        spec+: {
          memory: value,
        },
      },
      '#withMemoryReservation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMemoryReservation(value): {
        spec+: {
          memory_reservation: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTaskDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTaskDefinition(value): {
        spec+: {
          task_definition: value,
        },
      },
    },
  aws_ecs_service:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_arn', type: 'string' }, { default: null, enums: null, name: 'service_name', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_arn, service_name):
        {
          local this = self,
          data: {
            aws_ecs_service: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withClusterArn(cluster_arn)
        + self.withServiceName(service_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withAvailabilityZoneRebalancing': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAvailabilityZoneRebalancing(value): {
        spec+: {
          availability_zone_rebalancing: value,
        },
      },
      '#withClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterArn(value): {
        spec+: {
          cluster_arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDesiredCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDesiredCount(value): {
        spec+: {
          desired_count: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLaunchType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLaunchType(value): {
        spec+: {
          launch_type: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSchedulingStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSchedulingStrategy(value): {
        spec+: {
          scheduling_strategy: value,
        },
      },
      '#withServiceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServiceName(value): {
        spec+: {
          service_name: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTaskDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTaskDefinition(value): {
        spec+: {
          task_definition: value,
        },
      },
    },
  aws_ecs_task_definition:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'task_definition', type: 'string' }], help: '' } },
      new(tf_resource_key, task_definition):
        {
          local this = self,
          data: {
            aws_ecs_task_definition: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withTaskDefinition(task_definition),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withArnWithoutRevision': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArnWithoutRevision(value): {
        spec+: {
          arn_without_revision: value,
        },
      },
      '#withContainerDefinitions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContainerDefinitions(value): {
        spec+: {
          container_definitions: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCpu(value): {
        spec+: {
          cpu: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEnableFaultInjection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableFaultInjection(value=true): {
        spec+: {
          enable_fault_injection: value,
        },
      },
      '#withEphemeralStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralStorage(value): {
        spec+: {
          ephemeral_storage:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEphemeralStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralStorageMixin(value): {
        spec+: {
          ephemeral_storage+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      ephemeral_storage+:
        {
          '#': { help: '', name: 'ephemeral_storage' },
          '#withSizeInGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSizeInGib(value): {
            size_in_gib: value,
          },
        },
      '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExecutionRoleArn(value): {
        spec+: {
          execution_role_arn: value,
        },
      },
      '#withFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFamily(value): {
        spec+: {
          family: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withInferenceAccelerator': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceAccelerator(value): {
        spec+: {
          inference_accelerator:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withInferenceAcceleratorMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceAcceleratorMixin(value): {
        spec+: {
          inference_accelerator+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      inference_accelerator+:
        {
          '#': { help: '', name: 'inference_accelerator' },
          '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceName(value): {
            device_name: value,
          },
          '#withDeviceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceType(value): {
            device_type: value,
          },
        },
      '#withIpcMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIpcMode(value): {
        spec+: {
          ipc_mode: value,
        },
      },
      '#withMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMemory(value): {
        spec+: {
          memory: value,
        },
      },
      '#withNetworkMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkMode(value): {
        spec+: {
          network_mode: value,
        },
      },
      '#withPidMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPidMode(value): {
        spec+: {
          pid_mode: value,
        },
      },
      '#withPlacementConstraints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacementConstraints(value): {
        spec+: {
          placement_constraints:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPlacementConstraintsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacementConstraintsMixin(value): {
        spec+: {
          placement_constraints+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      placement_constraints+:
        {
          '#': { help: '', name: 'placement_constraints' },
          '#withExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExpression(value): {
            expression: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withProxyConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProxyConfiguration(value): {
        spec+: {
          proxy_configuration:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProxyConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProxyConfigurationMixin(value): {
        spec+: {
          proxy_configuration+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      proxy_configuration+:
        {
          '#': { help: '', name: 'proxy_configuration' },
          '#withContainerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withContainerName(value): {
            container_name: value,
          },
          '#withProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withProperties(value): {
            properties: value,
          },
          '#withPropertiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPropertiesMixin(value): {
            properties+: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withRequiresCompatibilities': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRequiresCompatibilities(value): {
        spec+: {
          requires_compatibilities:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRequiresCompatibilitiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRequiresCompatibilitiesMixin(value): {
        spec+: {
          requires_compatibilities+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRevision': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withRevision(value): {
        spec+: {
          revision: value,
        },
      },
      '#withRuntimePlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRuntimePlatform(value): {
        spec+: {
          runtime_platform:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRuntimePlatformMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRuntimePlatformMixin(value): {
        spec+: {
          runtime_platform+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      runtime_platform+:
        {
          '#': { help: '', name: 'runtime_platform' },
          '#withCpuArchitecture': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCpuArchitecture(value): {
            cpu_architecture: value,
          },
          '#withOperatingSystemFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withOperatingSystemFamily(value): {
            operating_system_family: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withTaskDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTaskDefinition(value): {
        spec+: {
          task_definition: value,
        },
      },
      '#withTaskRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTaskRoleArn(value): {
        spec+: {
          task_role_arn: value,
        },
      },
      '#withVolume': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVolume(value): {
        spec+: {
          volume:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withVolumeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVolumeMixin(value): {
        spec+: {
          volume+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      volume+:
        {
          '#': { help: '', name: 'volume' },
          '#withConfigureAtLaunch': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withConfigureAtLaunch(value=true): {
            configure_at_launch: value,
          },
          '#withDockerVolumeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDockerVolumeConfiguration(value): {
            docker_volume_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDockerVolumeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDockerVolumeConfigurationMixin(value): {
            docker_volume_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          docker_volume_configuration+:
            {
              '#': { help: '', name: 'docker_volume_configuration' },
              '#withAutoprovision': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withAutoprovision(value=true): {
                autoprovision: value,
              },
              '#withDriver': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDriver(value): {
                driver: value,
              },
              '#withDriverOpts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDriverOpts(value): {
                driver_opts: value,
              },
              '#withDriverOptsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDriverOptsMixin(value): {
                driver_opts+: value,
              },
              '#withLabels': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withLabels(value): {
                labels: value,
              },
              '#withLabelsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withLabelsMixin(value): {
                labels+: value,
              },
              '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withScope(value): {
                scope: value,
              },
            },
          '#withEfsVolumeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEfsVolumeConfiguration(value): {
            efs_volume_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEfsVolumeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEfsVolumeConfigurationMixin(value): {
            efs_volume_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          efs_volume_configuration+:
            {
              '#': { help: '', name: 'efs_volume_configuration' },
              '#withAuthorizationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAuthorizationConfig(value): {
                authorization_config:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAuthorizationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAuthorizationConfigMixin(value): {
                authorization_config+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              authorization_config+:
                {
                  '#': { help: '', name: 'authorization_config' },
                  '#withAccessPointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAccessPointId(value): {
                    access_point_id: value,
                  },
                  '#withIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withIam(value): {
                    iam: value,
                  },
                },
              '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileSystemId(value): {
                file_system_id: value,
              },
              '#withRootDirectory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRootDirectory(value): {
                root_directory: value,
              },
              '#withTransitEncryption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTransitEncryption(value): {
                transit_encryption: value,
              },
              '#withTransitEncryptionPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withTransitEncryptionPort(value): {
                transit_encryption_port: value,
              },
            },
          '#withFsxWindowsFileServerVolumeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFsxWindowsFileServerVolumeConfiguration(value): {
            fsx_windows_file_server_volume_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFsxWindowsFileServerVolumeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFsxWindowsFileServerVolumeConfigurationMixin(value): {
            fsx_windows_file_server_volume_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          fsx_windows_file_server_volume_configuration+:
            {
              '#': { help: '', name: 'fsx_windows_file_server_volume_configuration' },
              '#withAuthorizationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAuthorizationConfig(value): {
                authorization_config:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAuthorizationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAuthorizationConfigMixin(value): {
                authorization_config+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              authorization_config+:
                {
                  '#': { help: '', name: 'authorization_config' },
                  '#withCredentialsParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withCredentialsParameter(value): {
                    credentials_parameter: value,
                  },
                  '#withDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withDomain(value): {
                    domain: value,
                  },
                },
              '#withFileSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFileSystemId(value): {
                file_system_id: value,
              },
              '#withRootDirectory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRootDirectory(value): {
                root_directory: value,
              },
            },
          '#withHostPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHostPath(value): {
            host_path: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
    },
  aws_ecs_task_execution:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster', type: 'string' }, { default: null, enums: null, name: 'task_definition', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster, task_definition):
        {
          local this = self,
          data: {
            aws_ecs_task_execution: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withCluster(cluster)
        + self.withTaskDefinition(task_definition),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCapacityProviderStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCapacityProviderStrategy(value): {
        spec+: {
          capacity_provider_strategy:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCapacityProviderStrategyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCapacityProviderStrategyMixin(value): {
        spec+: {
          capacity_provider_strategy+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      capacity_provider_strategy+:
        {
          '#': { help: '', name: 'capacity_provider_strategy' },
          '#withBase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBase(value): {
            base: value,
          },
          '#withCapacityProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCapacityProvider(value): {
            capacity_provider: value,
          },
          '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withWeight(value): {
            weight: value,
          },
        },
      '#withClientToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClientToken(value): {
        spec+: {
          client_token: value,
        },
      },
      '#withCluster': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCluster(value): {
        spec+: {
          cluster: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDesiredCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDesiredCount(value): {
        spec+: {
          desired_count: value,
        },
      },
      '#withEnableEcsManagedTags': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableEcsManagedTags(value=true): {
        spec+: {
          enable_ecs_managed_tags: value,
        },
      },
      '#withEnableExecuteCommand': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableExecuteCommand(value=true): {
        spec+: {
          enable_execute_command: value,
        },
      },
      '#withGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withGroup(value): {
        spec+: {
          group: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLaunchType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLaunchType(value): {
        spec+: {
          launch_type: value,
        },
      },
      '#withNetworkConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withNetworkConfiguration(value): {
        spec+: {
          network_configuration: value,
        },
      },
      '#withNetworkConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withNetworkConfigurationMixin(value): {
        spec+: {
          network_configuration+: value,
        },
      },
      network_configuration+:
        {
          '#withAssignPublicIp': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAssignPublicIp(value=true): {
            spec+: {
              network_configuration+: {
                assign_public_ip: value,
              },
            },
          },
          '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroups(value): {
            spec+: {
              network_configuration+: {
                security_groups:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupsMixin(value): {
            spec+: {
              network_configuration+: {
                security_groups+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnets(value): {
            spec+: {
              network_configuration+: {
                subnets:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetsMixin(value): {
            spec+: {
              network_configuration+: {
                subnets+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
        },
      '#withOverrides': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOverrides(value): {
        spec+: {
          overrides: value,
        },
      },
      '#withOverridesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withOverridesMixin(value): {
        spec+: {
          overrides+: value,
        },
      },
      overrides+:
        {
          '#withContainerOverrides': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContainerOverrides(value): {
            spec+: {
              overrides+: {
                container_overrides:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withContainerOverridesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContainerOverridesMixin(value): {
            spec+: {
              overrides+: {
                container_overrides+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          container_overrides+:
            {
              '#': { help: '', name: 'container_overrides' },
              '#withCommand': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCommand(value): {
                command:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCommandMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCommandMixin(value): {
                command+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withCpu(value): {
                cpu: value,
              },
              '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEnvironment(value): {
                environment:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEnvironmentMixin(value): {
                environment+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              environment+:
                {
                  '#': { help: '', name: 'environment' },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
              '#withMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemory(value): {
                memory: value,
              },
              '#withMemoryReservation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMemoryReservation(value): {
                memory_reservation: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
              '#withResourceRequirements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withResourceRequirements(value): {
                resource_requirements:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withResourceRequirementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withResourceRequirementsMixin(value): {
                resource_requirements+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              resource_requirements+:
                {
                  '#': { help: '', name: 'resource_requirements' },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
            },
          '#withCpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCpu(value): {
            spec+: {
              overrides+: {
                cpu: value,
              },
            },
          },
          '#withExecutionRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExecutionRoleArn(value): {
            spec+: {
              overrides+: {
                execution_role_arn: value,
              },
            },
          },
          '#withInferenceAcceleratorOverrides': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInferenceAcceleratorOverrides(value): {
            spec+: {
              overrides+: {
                inference_accelerator_overrides:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          '#withInferenceAcceleratorOverridesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInferenceAcceleratorOverridesMixin(value): {
            spec+: {
              overrides+: {
                inference_accelerator_overrides+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          },
          inference_accelerator_overrides+:
            {
              '#': { help: '', name: 'inference_accelerator_overrides' },
              '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDeviceName(value): {
                device_name: value,
              },
              '#withDeviceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDeviceType(value): {
                device_type: value,
              },
            },
          '#withMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMemory(value): {
            spec+: {
              overrides+: {
                memory: value,
              },
            },
          },
          '#withTaskRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTaskRoleArn(value): {
            spec+: {
              overrides+: {
                task_role_arn: value,
              },
            },
          },
        },
      '#withPlacementConstraints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacementConstraints(value): {
        spec+: {
          placement_constraints:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPlacementConstraintsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacementConstraintsMixin(value): {
        spec+: {
          placement_constraints+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      placement_constraints+:
        {
          '#': { help: '', name: 'placement_constraints' },
          '#withExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExpression(value): {
            expression: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withPlacementStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacementStrategy(value): {
        spec+: {
          placement_strategy:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPlacementStrategyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacementStrategyMixin(value): {
        spec+: {
          placement_strategy+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      placement_strategy+:
        {
          '#': { help: '', name: 'placement_strategy' },
          '#withField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withField(value): {
            field: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withPlatformVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatformVersion(value): {
        spec+: {
          platform_version: value,
        },
      },
      '#withPropagateTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPropagateTags(value): {
        spec+: {
          propagate_tags: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withReferenceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReferenceId(value): {
        spec+: {
          reference_id: value,
        },
      },
      '#withStartedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStartedBy(value): {
        spec+: {
          started_by: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTaskArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTaskArns(value): {
        spec+: {
          task_arns:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTaskArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTaskArnsMixin(value): {
        spec+: {
          task_arns+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTaskDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTaskDefinition(value): {
        spec+: {
          task_definition: value,
        },
      },
    },
}
