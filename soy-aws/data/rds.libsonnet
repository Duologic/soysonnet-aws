// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'rds',
  },
  aws_rds_certificate:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_rds_certificate+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCertificateType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateType(value): {
        certificate_type: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomerOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withCustomerOverride(value=true): {
        customer_override: value,
      },
      '#withCustomerOverrideValidTill': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomerOverrideValidTill(value): {
        customer_override_valid_till: value,
      },
      '#withDefaultForNewLaunches': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDefaultForNewLaunches(value=true): {
        default_for_new_launches: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLatestValidTill': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withLatestValidTill(value=true): {
        latest_valid_till: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withThumbprint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withThumbprint(value): {
        thumbprint: value,
      },
      '#withValidFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withValidFrom(value): {
        valid_from: value,
      },
      '#withValidTill': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withValidTill(value): {
        valid_till: value,
      },
    },
  aws_rds_cluster:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_identifier', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_identifier):
        self.withTfResourceKey(tf_resource_key)
        + self.withClusterIdentifier(cluster_identifier),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_rds_cluster+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAvailabilityZones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZones(value): {
        availability_zones:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAvailabilityZonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZonesMixin(value): {
        availability_zones+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBacktrackWindow': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withBacktrackWindow(value): {
        backtrack_window: value,
      },
      '#withBackupRetentionPeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withBackupRetentionPeriod(value): {
        backup_retention_period: value,
      },
      '#withClusterIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterIdentifier(value): {
        cluster_identifier: value,
      },
      '#withClusterMembers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterMembers(value): {
        cluster_members:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClusterMembersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterMembersMixin(value): {
        cluster_members+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClusterResourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterResourceId(value): {
        cluster_resource_id: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDatabaseName(value): {
        database_name: value,
      },
      '#withDbClusterParameterGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbClusterParameterGroupName(value): {
        db_cluster_parameter_group_name: value,
      },
      '#withDbSubnetGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbSubnetGroupName(value): {
        db_subnet_group_name: value,
      },
      '#withDbSystemId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbSystemId(value): {
        db_system_id: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnabledCloudwatchLogsExports': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnabledCloudwatchLogsExports(value): {
        enabled_cloudwatch_logs_exports:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnabledCloudwatchLogsExportsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnabledCloudwatchLogsExportsMixin(value): {
        enabled_cloudwatch_logs_exports+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndpoint(value): {
        endpoint: value,
      },
      '#withEngine': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngine(value): {
        engine: value,
      },
      '#withEngineMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineMode(value): {
        engine_mode: value,
      },
      '#withEngineVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineVersion(value): {
        engine_version: value,
      },
      '#withFinalSnapshotIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFinalSnapshotIdentifier(value): {
        final_snapshot_identifier: value,
      },
      '#withHostedZoneId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostedZoneId(value): {
        hosted_zone_id: value,
      },
      '#withIamDatabaseAuthenticationEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withIamDatabaseAuthenticationEnabled(value=true): {
        iam_database_authentication_enabled: value,
      },
      '#withIamRoles': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamRoles(value): {
        iam_roles:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIamRolesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamRolesMixin(value): {
        iam_roles+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyId(value): {
        kms_key_id: value,
      },
      '#withMasterUserSecret': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMasterUserSecret(value): {
        master_user_secret:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMasterUserSecretMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMasterUserSecretMixin(value): {
        master_user_secret+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      master_user_secret+:
        {
          '#': { help: '', name: 'master_user_secret' },
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            kms_key_id: value,
          },
          '#withSecretArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSecretArn(value): {
            secret_arn: value,
          },
          '#withSecretStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSecretStatus(value): {
            secret_status: value,
          },
        },
      '#withMasterUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMasterUsername(value): {
        master_username: value,
      },
      '#withMonitoringInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMonitoringInterval(value): {
        monitoring_interval: value,
      },
      '#withMonitoringRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMonitoringRoleArn(value): {
        monitoring_role_arn: value,
      },
      '#withNetworkType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkType(value): {
        network_type: value,
      },
      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPort(value): {
        port: value,
      },
      '#withPreferredBackupWindow': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreferredBackupWindow(value): {
        preferred_backup_window: value,
      },
      '#withPreferredMaintenanceWindow': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreferredMaintenanceWindow(value): {
        preferred_maintenance_window: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withReaderEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReaderEndpoint(value): {
        reader_endpoint: value,
      },
      '#withReplicationSourceIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReplicationSourceIdentifier(value): {
        replication_source_identifier: value,
      },
      '#withStorageEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withStorageEncrypted(value=true): {
        storage_encrypted: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withVpcSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcSecurityGroupIds(value): {
        vpc_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVpcSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcSecurityGroupIdsMixin(value): {
        vpc_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_rds_cluster_parameter_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_rds_cluster_parameter_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFamily(value): {
        family: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_rds_clusters:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_rds_clusters+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withClusterArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterArns(value): {
        cluster_arns:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClusterArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterArnsMixin(value): {
        cluster_arns+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClusterIdentifiers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterIdentifiers(value): {
        cluster_identifiers:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClusterIdentifiersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClusterIdentifiersMixin(value): {
        cluster_identifiers+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_rds_engine_version:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'engine', type: 'string' }], help: '' } },
      new(tf_resource_key, engine):
        self.withTfResourceKey(tf_resource_key)
        + self.withEngine(engine),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_rds_engine_version+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultCharacterSet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultCharacterSet(value): {
        default_character_set: value,
      },
      '#withDefaultOnly': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDefaultOnly(value=true): {
        default_only: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEngine': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngine(value): {
        engine: value,
      },
      '#withEngineDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineDescription(value): {
        engine_description: value,
      },
      '#withExportableLogTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExportableLogTypes(value): {
        exportable_log_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExportableLogTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExportableLogTypesMixin(value): {
        exportable_log_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withHasMajorTarget': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withHasMajorTarget(value=true): {
        has_major_target: value,
      },
      '#withHasMinorTarget': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withHasMinorTarget(value=true): {
        has_minor_target: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIncludeAll': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withIncludeAll(value=true): {
        include_all: value,
      },
      '#withLatest': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withLatest(value=true): {
        latest: value,
      },
      '#withParameterGroupFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParameterGroupFamily(value): {
        parameter_group_family: value,
      },
      '#withPreferredMajorTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredMajorTargets(value): {
        preferred_major_targets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredMajorTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredMajorTargetsMixin(value): {
        preferred_major_targets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredUpgradeTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredUpgradeTargets(value): {
        preferred_upgrade_targets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredUpgradeTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredUpgradeTargetsMixin(value): {
        preferred_upgrade_targets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredVersions(value): {
        preferred_versions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredVersionsMixin(value): {
        preferred_versions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withSupportedCharacterSets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedCharacterSets(value): {
        supported_character_sets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedCharacterSetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedCharacterSetsMixin(value): {
        supported_character_sets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedFeatureNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedFeatureNames(value): {
        supported_feature_names:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedFeatureNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedFeatureNamesMixin(value): {
        supported_feature_names+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedModes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedModes(value): {
        supported_modes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedModesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedModesMixin(value): {
        supported_modes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedTimezones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedTimezones(value): {
        supported_timezones:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedTimezonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedTimezonesMixin(value): {
        supported_timezones+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportsCertificateRotationWithoutRestart': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsCertificateRotationWithoutRestart(value=true): {
        supports_certificate_rotation_without_restart: value,
      },
      '#withSupportsGlobalDatabases': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsGlobalDatabases(value=true): {
        supports_global_databases: value,
      },
      '#withSupportsIntegrations': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsIntegrations(value=true): {
        supports_integrations: value,
      },
      '#withSupportsLimitlessDatabase': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsLimitlessDatabase(value=true): {
        supports_limitless_database: value,
      },
      '#withSupportsLocalWriteForwarding': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsLocalWriteForwarding(value=true): {
        supports_local_write_forwarding: value,
      },
      '#withSupportsLogExportsToCloudwatch': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsLogExportsToCloudwatch(value=true): {
        supports_log_exports_to_cloudwatch: value,
      },
      '#withSupportsParallelQuery': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsParallelQuery(value=true): {
        supports_parallel_query: value,
      },
      '#withSupportsReadReplica': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsReadReplica(value=true): {
        supports_read_replica: value,
      },
      '#withValidMajorTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidMajorTargets(value): {
        valid_major_targets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidMajorTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidMajorTargetsMixin(value): {
        valid_major_targets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidMinorTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidMinorTargets(value): {
        valid_minor_targets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidMinorTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidMinorTargetsMixin(value): {
        valid_minor_targets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidUpgradeTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidUpgradeTargets(value): {
        valid_upgrade_targets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidUpgradeTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidUpgradeTargetsMixin(value): {
        valid_upgrade_targets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
      '#withVersionActual': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersionActual(value): {
        version_actual: value,
      },
      '#withVersionDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersionDescription(value): {
        version_description: value,
      },
    },
  aws_rds_orderable_db_instance:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'engine', type: 'string' }], help: '' } },
      new(tf_resource_key, engine):
        self.withTfResourceKey(tf_resource_key)
        + self.withEngine(engine),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_rds_orderable_db_instance+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAvailabilityZoneGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAvailabilityZoneGroup(value): {
        availability_zone_group: value,
      },
      '#withAvailabilityZones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZones(value): {
        availability_zones:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAvailabilityZonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZonesMixin(value): {
        availability_zones+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEngine': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngine(value): {
        engine: value,
      },
      '#withEngineLatestVersion': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEngineLatestVersion(value=true): {
        engine_latest_version: value,
      },
      '#withEngineVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineVersion(value): {
        engine_version: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceClass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceClass(value): {
        instance_class: value,
      },
      '#withLicenseModel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLicenseModel(value): {
        license_model: value,
      },
      '#withMaxIopsPerDbInstance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxIopsPerDbInstance(value): {
        max_iops_per_db_instance: value,
      },
      '#withMaxIopsPerGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxIopsPerGib(value): {
        max_iops_per_gib: value,
      },
      '#withMaxStorageSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxStorageSize(value): {
        max_storage_size: value,
      },
      '#withMinIopsPerDbInstance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinIopsPerDbInstance(value): {
        min_iops_per_db_instance: value,
      },
      '#withMinIopsPerGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinIopsPerGib(value): {
        min_iops_per_gib: value,
      },
      '#withMinStorageSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinStorageSize(value): {
        min_storage_size: value,
      },
      '#withMultiAzCapable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withMultiAzCapable(value=true): {
        multi_az_capable: value,
      },
      '#withOutpostCapable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withOutpostCapable(value=true): {
        outpost_capable: value,
      },
      '#withPreferredEngineVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredEngineVersions(value): {
        preferred_engine_versions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredEngineVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredEngineVersionsMixin(value): {
        preferred_engine_versions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredInstanceClasses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredInstanceClasses(value): {
        preferred_instance_classes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredInstanceClassesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredInstanceClassesMixin(value): {
        preferred_instance_classes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withReadReplicaCapable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withReadReplicaCapable(value=true): {
        read_replica_capable: value,
      },
      '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageType(value): {
        storage_type: value,
      },
      '#withSupportedEngineModes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedEngineModes(value): {
        supported_engine_modes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedEngineModesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedEngineModesMixin(value): {
        supported_engine_modes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedNetworkTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedNetworkTypes(value): {
        supported_network_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedNetworkTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedNetworkTypesMixin(value): {
        supported_network_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportsClusters': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsClusters(value=true): {
        supports_clusters: value,
      },
      '#withSupportsEnhancedMonitoring': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsEnhancedMonitoring(value=true): {
        supports_enhanced_monitoring: value,
      },
      '#withSupportsGlobalDatabases': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsGlobalDatabases(value=true): {
        supports_global_databases: value,
      },
      '#withSupportsIamDatabaseAuthentication': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsIamDatabaseAuthentication(value=true): {
        supports_iam_database_authentication: value,
      },
      '#withSupportsIops': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsIops(value=true): {
        supports_iops: value,
      },
      '#withSupportsKerberosAuthentication': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsKerberosAuthentication(value=true): {
        supports_kerberos_authentication: value,
      },
      '#withSupportsMultiAz': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsMultiAz(value=true): {
        supports_multi_az: value,
      },
      '#withSupportsPerformanceInsights': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsPerformanceInsights(value=true): {
        supports_performance_insights: value,
      },
      '#withSupportsStorageAutoscaling': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsStorageAutoscaling(value=true): {
        supports_storage_autoscaling: value,
      },
      '#withSupportsStorageEncryption': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsStorageEncryption(value=true): {
        supports_storage_encryption: value,
      },
      '#withVpc': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withVpc(value=true): {
        vpc: value,
      },
    },
  aws_rds_reserved_instance_offering:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'db_instance_class', type: 'string' }, { default: null, enums: null, name: 'duration', type: 'number' }, { default: null, enums: null, name: 'multi_az', type: 'boolean' }, { default: null, enums: null, name: 'offering_type', type: 'string' }, { default: null, enums: null, name: 'product_description', type: 'string' }], help: '' } },
      new(tf_resource_key, db_instance_class, duration, multi_az, offering_type, product_description):
        self.withTfResourceKey(tf_resource_key)
        + self.withDbInstanceClass(db_instance_class)
        + self.withDuration(duration)
        + self.withMultiAz(multi_az)
        + self.withOfferingType(offering_type)
        + self.withProductDescription(product_description),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_rds_reserved_instance_offering+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCurrencyCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCurrencyCode(value): {
        currency_code: value,
      },
      '#withDbInstanceClass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDbInstanceClass(value): {
        db_instance_class: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDuration(value): {
        duration: value,
      },
      '#withFixedPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withFixedPrice(value): {
        fixed_price: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withMultiAz': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withMultiAz(value=true): {
        multi_az: value,
      },
      '#withOfferingId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOfferingId(value): {
        offering_id: value,
      },
      '#withOfferingType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOfferingType(value): {
        offering_type: value,
      },
      '#withProductDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProductDescription(value): {
        product_description: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
}
