// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'mq',
  },
  aws_mq_broker:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_mq_broker: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAuthenticationStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAuthenticationStrategy(value): {
        authentication_strategy: value,
      },
      '#withAutoMinorVersionUpgrade': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoMinorVersionUpgrade(value=true): {
        auto_minor_version_upgrade: value,
      },
      '#withBrokerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBrokerId(value): {
        broker_id: value,
      },
      '#withBrokerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBrokerName(value): {
        broker_name: value,
      },
      '#withConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConfiguration(value): {
        configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConfigurationMixin(value): {
        configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      configuration+:
        {
          '#': { help: '', name: 'configuration' },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withRevision': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRevision(value): {
            revision: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeploymentMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeploymentMode(value): {
        deployment_mode: value,
      },
      '#withEncryptionOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEncryptionOptions(value): {
        encryption_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEncryptionOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEncryptionOptionsMixin(value): {
        encryption_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      encryption_options+:
        {
          '#': { help: '', name: 'encryption_options' },
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            kms_key_id: value,
          },
          '#withUseAwsOwnedKey': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUseAwsOwnedKey(value=true): {
            use_aws_owned_key: value,
          },
        },
      '#withEngineType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineType(value): {
        engine_type: value,
      },
      '#withEngineVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineVersion(value): {
        engine_version: value,
      },
      '#withHostInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostInstanceType(value): {
        host_instance_type: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstances': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstances(value): {
        instances:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstancesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstancesMixin(value): {
        instances+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      instances+:
        {
          '#': { help: '', name: 'instances' },
          '#withConsoleUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withConsoleUrl(value): {
            console_url: value,
          },
          '#withEndpoints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEndpoints(value): {
            endpoints:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEndpointsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEndpointsMixin(value): {
            endpoints+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIpAddress(value): {
            ip_address: value,
          },
        },
      '#withLdapServerMetadata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLdapServerMetadata(value): {
        ldap_server_metadata:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLdapServerMetadataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLdapServerMetadataMixin(value): {
        ldap_server_metadata+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ldap_server_metadata+:
        {
          '#': { help: '', name: 'ldap_server_metadata' },
          '#withHosts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHosts(value): {
            hosts:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHostsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHostsMixin(value): {
            hosts+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRoleBase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleBase(value): {
            role_base: value,
          },
          '#withRoleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleName(value): {
            role_name: value,
          },
          '#withRoleSearchMatching': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleSearchMatching(value): {
            role_search_matching: value,
          },
          '#withRoleSearchSubtree': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withRoleSearchSubtree(value=true): {
            role_search_subtree: value,
          },
          '#withServiceAccountPassword': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceAccountPassword(value): {
            service_account_password: value,
          },
          '#withServiceAccountUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceAccountUsername(value): {
            service_account_username: value,
          },
          '#withUserBase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserBase(value): {
            user_base: value,
          },
          '#withUserRoleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserRoleName(value): {
            user_role_name: value,
          },
          '#withUserSearchMatching': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserSearchMatching(value): {
            user_search_matching: value,
          },
          '#withUserSearchSubtree': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withUserSearchSubtree(value=true): {
            user_search_subtree: value,
          },
        },
      '#withLogs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLogs(value): {
        logs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLogsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLogsMixin(value): {
        logs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      logs+:
        {
          '#': { help: '', name: 'logs' },
          '#withAudit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAudit(value): {
            audit: value,
          },
          '#withGeneral': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withGeneral(value=true): {
            general: value,
          },
        },
      '#withMaintenanceWindowStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMaintenanceWindowStartTime(value): {
        maintenance_window_start_time:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMaintenanceWindowStartTimeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMaintenanceWindowStartTimeMixin(value): {
        maintenance_window_start_time+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      maintenance_window_start_time+:
        {
          '#': { help: '', name: 'maintenance_window_start_time' },
          '#withDayOfWeek': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDayOfWeek(value): {
            day_of_week: value,
          },
          '#withTimeOfDay': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTimeOfDay(value): {
            time_of_day: value,
          },
          '#withTimeZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTimeZone(value): {
            time_zone: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withPubliclyAccessible': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPubliclyAccessible(value=true): {
        publicly_accessible: value,
      },
      '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroups(value): {
        security_groups:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupsMixin(value): {
        security_groups+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageType(value): {
        storage_type: value,
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUser': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUser(value): {
        user:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withUserMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUserMixin(value): {
        user+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      user+:
        {
          '#': { help: '', name: 'user' },
          '#withConsoleAccess': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withConsoleAccess(value=true): {
            console_access: value,
          },
          '#withGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGroups(value): {
            groups:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGroupsMixin(value): {
            groups+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withReplicationUser': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withReplicationUser(value=true): {
            replication_user: value,
          },
          '#withUsername': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUsername(value): {
            username: value,
          },
        },
    },
  aws_mq_broker_engine_types:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_mq_broker_engine_types: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBrokerEngineTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBrokerEngineTypes(value): {
        broker_engine_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBrokerEngineTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBrokerEngineTypesMixin(value): {
        broker_engine_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      broker_engine_types+:
        {
          '#': { help: '', name: 'broker_engine_types' },
          '#withEngineType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEngineType(value): {
            engine_type: value,
          },
          '#withEngineVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEngineVersions(value): {
            engine_versions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEngineVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEngineVersionsMixin(value): {
            engine_versions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          engine_versions+:
            {
              '#': { help: '', name: 'engine_versions' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEngineType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineType(value): {
        engine_type: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_mq_broker_instance_type_offerings:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_mq_broker_instance_type_offerings: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBrokerInstanceOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBrokerInstanceOptions(value): {
        broker_instance_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBrokerInstanceOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBrokerInstanceOptionsMixin(value): {
        broker_instance_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      broker_instance_options+:
        {
          '#': { help: '', name: 'broker_instance_options' },
          '#withAvailabilityZones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAvailabilityZones(value): {
            availability_zones:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAvailabilityZonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAvailabilityZonesMixin(value): {
            availability_zones+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          availability_zones+:
            {
              '#': { help: '', name: 'availability_zones' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withEngineType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEngineType(value): {
            engine_type: value,
          },
          '#withHostInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHostInstanceType(value): {
            host_instance_type: value,
          },
          '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStorageType(value): {
            storage_type: value,
          },
          '#withSupportedDeploymentModes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSupportedDeploymentModes(value): {
            supported_deployment_modes:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSupportedDeploymentModesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSupportedDeploymentModesMixin(value): {
            supported_deployment_modes+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSupportedEngineVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSupportedEngineVersions(value): {
            supported_engine_versions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSupportedEngineVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSupportedEngineVersionsMixin(value): {
            supported_engine_versions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEngineType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineType(value): {
        engine_type: value,
      },
      '#withHostInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostInstanceType(value): {
        host_instance_type: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageType(value): {
        storage_type: value,
      },
    },
}
