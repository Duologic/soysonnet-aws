// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'launch',
  },
  aws_launch_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_launch_configuration+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAssociatePublicIpAddress': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAssociatePublicIpAddress(value=true): {
        associate_public_ip_address: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsBlockDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsBlockDevice(value): {
        ebs_block_device:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsBlockDeviceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEbsBlockDeviceMixin(value): {
        ebs_block_device+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ebs_block_device+:
        {
          '#': { help: '', name: 'ebs_block_device' },
          '#withDeleteOnTermination': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDeleteOnTermination(value=true): {
            delete_on_termination: value,
          },
          '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceName(value): {
            device_name: value,
          },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withNoDevice': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withNoDevice(value=true): {
            no_device: value,
          },
          '#withSnapshotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSnapshotId(value): {
            snapshot_id: value,
          },
          '#withThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withThroughput(value): {
            throughput: value,
          },
          '#withVolumeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withVolumeSize(value): {
            volume_size: value,
          },
          '#withVolumeType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVolumeType(value): {
            volume_type: value,
          },
        },
      '#withEbsOptimized': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEbsOptimized(value=true): {
        ebs_optimized: value,
      },
      '#withEnableMonitoring': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableMonitoring(value=true): {
        enable_monitoring: value,
      },
      '#withEphemeralBlockDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralBlockDevice(value): {
        ephemeral_block_device:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEphemeralBlockDeviceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralBlockDeviceMixin(value): {
        ephemeral_block_device+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ephemeral_block_device+:
        {
          '#': { help: '', name: 'ephemeral_block_device' },
          '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceName(value): {
            device_name: value,
          },
          '#withVirtualName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVirtualName(value): {
            virtual_name: value,
          },
        },
      '#withIamInstanceProfile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIamInstanceProfile(value): {
        iam_instance_profile: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withImageId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageId(value): {
        image_id: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withKeyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKeyName(value): {
        key_name: value,
      },
      '#withMetadataOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMetadataOptions(value): {
        metadata_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMetadataOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMetadataOptionsMixin(value): {
        metadata_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      metadata_options+:
        {
          '#': { help: '', name: 'metadata_options' },
          '#withHttpEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHttpEndpoint(value): {
            http_endpoint: value,
          },
          '#withHttpPutResponseHopLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withHttpPutResponseHopLimit(value): {
            http_put_response_hop_limit: value,
          },
          '#withHttpTokens': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHttpTokens(value): {
            http_tokens: value,
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withPlacementTenancy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlacementTenancy(value): {
        placement_tenancy: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRootBlockDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRootBlockDevice(value): {
        root_block_device:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRootBlockDeviceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRootBlockDeviceMixin(value): {
        root_block_device+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      root_block_device+:
        {
          '#': { help: '', name: 'root_block_device' },
          '#withDeleteOnTermination': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withDeleteOnTermination(value=true): {
            delete_on_termination: value,
          },
          '#withEncrypted': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEncrypted(value=true): {
            encrypted: value,
          },
          '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIops(value): {
            iops: value,
          },
          '#withThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withThroughput(value): {
            throughput: value,
          },
          '#withVolumeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withVolumeSize(value): {
            volume_size: value,
          },
          '#withVolumeType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVolumeType(value): {
            volume_type: value,
          },
        },
      '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroups(value): {
        security_groups:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupsMixin(value): {
        security_groups+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSpotPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSpotPrice(value): {
        spot_price: value,
      },
      '#withUserData': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserData(value): {
        user_data: value,
      },
    },
  aws_launch_template:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_launch_template+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBlockDeviceMappings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBlockDeviceMappings(value): {
        block_device_mappings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBlockDeviceMappingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBlockDeviceMappingsMixin(value): {
        block_device_mappings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      block_device_mappings+:
        {
          '#': { help: '', name: 'block_device_mappings' },
          '#withDeviceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeviceName(value): {
            device_name: value,
          },
          '#withEbs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEbs(value): {
            ebs:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEbsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEbsMixin(value): {
            ebs+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          ebs+:
            {
              '#': { help: '', name: 'ebs' },
              '#withDeleteOnTermination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDeleteOnTermination(value): {
                delete_on_termination: value,
              },
              '#withEncrypted': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEncrypted(value): {
                encrypted: value,
              },
              '#withIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIops(value): {
                iops: value,
              },
              '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKmsKeyId(value): {
                kms_key_id: value,
              },
              '#withSnapshotId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSnapshotId(value): {
                snapshot_id: value,
              },
              '#withThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withThroughput(value): {
                throughput: value,
              },
              '#withVolumeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withVolumeSize(value): {
                volume_size: value,
              },
              '#withVolumeType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVolumeType(value): {
                volume_type: value,
              },
            },
          '#withNoDevice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNoDevice(value): {
            no_device: value,
          },
          '#withVirtualName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVirtualName(value): {
            virtual_name: value,
          },
        },
      '#withCapacityReservationSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCapacityReservationSpecification(value): {
        capacity_reservation_specification:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCapacityReservationSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCapacityReservationSpecificationMixin(value): {
        capacity_reservation_specification+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      capacity_reservation_specification+:
        {
          '#': { help: '', name: 'capacity_reservation_specification' },
          '#withCapacityReservationPreference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCapacityReservationPreference(value): {
            capacity_reservation_preference: value,
          },
          '#withCapacityReservationTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCapacityReservationTarget(value): {
            capacity_reservation_target:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCapacityReservationTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCapacityReservationTargetMixin(value): {
            capacity_reservation_target+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          capacity_reservation_target+:
            {
              '#': { help: '', name: 'capacity_reservation_target' },
              '#withCapacityReservationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCapacityReservationId(value): {
                capacity_reservation_id: value,
              },
              '#withCapacityReservationResourceGroupArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCapacityReservationResourceGroupArn(value): {
                capacity_reservation_resource_group_arn: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCpuOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCpuOptions(value): {
        cpu_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCpuOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCpuOptionsMixin(value): {
        cpu_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      cpu_options+:
        {
          '#': { help: '', name: 'cpu_options' },
          '#withAmdSevSnp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAmdSevSnp(value): {
            amd_sev_snp: value,
          },
          '#withCoreCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCoreCount(value): {
            core_count: value,
          },
          '#withThreadsPerCore': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withThreadsPerCore(value): {
            threads_per_core: value,
          },
        },
      '#withCreditSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCreditSpecification(value): {
        credit_specification:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCreditSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCreditSpecificationMixin(value): {
        credit_specification+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      credit_specification+:
        {
          '#': { help: '', name: 'credit_specification' },
          '#withCpuCredits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCpuCredits(value): {
            cpu_credits: value,
          },
        },
      '#withDefaultVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultVersion(value): {
        default_version: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDisableApiStop': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDisableApiStop(value=true): {
        disable_api_stop: value,
      },
      '#withDisableApiTermination': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDisableApiTermination(value=true): {
        disable_api_termination: value,
      },
      '#withEbsOptimized': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEbsOptimized(value): {
        ebs_optimized: value,
      },
      '#withElasticGpuSpecifications': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElasticGpuSpecifications(value): {
        elastic_gpu_specifications:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withElasticGpuSpecificationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElasticGpuSpecificationsMixin(value): {
        elastic_gpu_specifications+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      elastic_gpu_specifications+:
        {
          '#': { help: '', name: 'elastic_gpu_specifications' },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withElasticInferenceAccelerator': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElasticInferenceAccelerator(value): {
        elastic_inference_accelerator:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withElasticInferenceAcceleratorMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withElasticInferenceAcceleratorMixin(value): {
        elastic_inference_accelerator+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      elastic_inference_accelerator+:
        {
          '#': { help: '', name: 'elastic_inference_accelerator' },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withEnclaveOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnclaveOptions(value): {
        enclave_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnclaveOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnclaveOptionsMixin(value): {
        enclave_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      enclave_options+:
        {
          '#': { help: '', name: 'enclave_options' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
        },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withHibernationOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHibernationOptions(value): {
        hibernation_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHibernationOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHibernationOptionsMixin(value): {
        hibernation_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      hibernation_options+:
        {
          '#': { help: '', name: 'hibernation_options' },
          '#withConfigured': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withConfigured(value=true): {
            configured: value,
          },
        },
      '#withIamInstanceProfile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamInstanceProfile(value): {
        iam_instance_profile:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIamInstanceProfileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamInstanceProfileMixin(value): {
        iam_instance_profile+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      iam_instance_profile+:
        {
          '#': { help: '', name: 'iam_instance_profile' },
          '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withArn(value): {
            arn: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withImageId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageId(value): {
        image_id: value,
      },
      '#withInstanceInitiatedShutdownBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceInitiatedShutdownBehavior(value): {
        instance_initiated_shutdown_behavior: value,
      },
      '#withInstanceMarketOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceMarketOptions(value): {
        instance_market_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstanceMarketOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceMarketOptionsMixin(value): {
        instance_market_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      instance_market_options+:
        {
          '#': { help: '', name: 'instance_market_options' },
          '#withMarketType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMarketType(value): {
            market_type: value,
          },
          '#withSpotOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSpotOptions(value): {
            spot_options:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSpotOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSpotOptionsMixin(value): {
            spot_options+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          spot_options+:
            {
              '#': { help: '', name: 'spot_options' },
              '#withBlockDurationMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withBlockDurationMinutes(value): {
                block_duration_minutes: value,
              },
              '#withInstanceInterruptionBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInstanceInterruptionBehavior(value): {
                instance_interruption_behavior: value,
              },
              '#withMaxPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMaxPrice(value): {
                max_price: value,
              },
              '#withSpotInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSpotInstanceType(value): {
                spot_instance_type: value,
              },
              '#withValidUntil': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValidUntil(value): {
                valid_until: value,
              },
            },
        },
      '#withInstanceRequirements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceRequirements(value): {
        instance_requirements:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstanceRequirementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceRequirementsMixin(value): {
        instance_requirements+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      instance_requirements+:
        {
          '#': { help: '', name: 'instance_requirements' },
          '#withAcceleratorCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorCount(value): {
            accelerator_count:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAcceleratorCountMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorCountMixin(value): {
            accelerator_count+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          accelerator_count+:
            {
              '#': { help: '', name: 'accelerator_count' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withAcceleratorManufacturers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorManufacturers(value): {
            accelerator_manufacturers:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAcceleratorManufacturersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorManufacturersMixin(value): {
            accelerator_manufacturers+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAcceleratorNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorNames(value): {
            accelerator_names:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAcceleratorNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorNamesMixin(value): {
            accelerator_names+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAcceleratorTotalMemoryMib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorTotalMemoryMib(value): {
            accelerator_total_memory_mib:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAcceleratorTotalMemoryMibMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorTotalMemoryMibMixin(value): {
            accelerator_total_memory_mib+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          accelerator_total_memory_mib+:
            {
              '#': { help: '', name: 'accelerator_total_memory_mib' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withAcceleratorTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorTypes(value): {
            accelerator_types:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAcceleratorTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcceleratorTypesMixin(value): {
            accelerator_types+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAllowedInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowedInstanceTypes(value): {
            allowed_instance_types:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAllowedInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowedInstanceTypesMixin(value): {
            allowed_instance_types+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBareMetal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBareMetal(value): {
            bare_metal: value,
          },
          '#withBaselineEbsBandwidthMbps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBaselineEbsBandwidthMbps(value): {
            baseline_ebs_bandwidth_mbps:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBaselineEbsBandwidthMbpsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBaselineEbsBandwidthMbpsMixin(value): {
            baseline_ebs_bandwidth_mbps+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          baseline_ebs_bandwidth_mbps+:
            {
              '#': { help: '', name: 'baseline_ebs_bandwidth_mbps' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withBurstablePerformance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBurstablePerformance(value): {
            burstable_performance: value,
          },
          '#withCpuManufacturers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCpuManufacturers(value): {
            cpu_manufacturers:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCpuManufacturersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCpuManufacturersMixin(value): {
            cpu_manufacturers+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withExcludedInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExcludedInstanceTypes(value): {
            excluded_instance_types:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withExcludedInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExcludedInstanceTypesMixin(value): {
            excluded_instance_types+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInstanceGenerations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstanceGenerations(value): {
            instance_generations:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInstanceGenerationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstanceGenerationsMixin(value): {
            instance_generations+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLocalStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLocalStorage(value): {
            local_storage: value,
          },
          '#withLocalStorageTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLocalStorageTypes(value): {
            local_storage_types:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLocalStorageTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLocalStorageTypesMixin(value): {
            local_storage_types+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMaxSpotPriceAsPercentageOfOptimalOnDemandPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxSpotPriceAsPercentageOfOptimalOnDemandPrice(value): {
            max_spot_price_as_percentage_of_optimal_on_demand_price: value,
          },
          '#withMemoryGibPerVcpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMemoryGibPerVcpu(value): {
            memory_gib_per_vcpu:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMemoryGibPerVcpuMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMemoryGibPerVcpuMixin(value): {
            memory_gib_per_vcpu+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          memory_gib_per_vcpu+:
            {
              '#': { help: '', name: 'memory_gib_per_vcpu' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withMemoryMib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMemoryMib(value): {
            memory_mib:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMemoryMibMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMemoryMibMixin(value): {
            memory_mib+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          memory_mib+:
            {
              '#': { help: '', name: 'memory_mib' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withNetworkBandwidthGbps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkBandwidthGbps(value): {
            network_bandwidth_gbps:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNetworkBandwidthGbpsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkBandwidthGbpsMixin(value): {
            network_bandwidth_gbps+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          network_bandwidth_gbps+:
            {
              '#': { help: '', name: 'network_bandwidth_gbps' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withNetworkInterfaceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkInterfaceCount(value): {
            network_interface_count:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNetworkInterfaceCountMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkInterfaceCountMixin(value): {
            network_interface_count+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          network_interface_count+:
            {
              '#': { help: '', name: 'network_interface_count' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withOnDemandMaxPricePercentageOverLowestPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withOnDemandMaxPricePercentageOverLowestPrice(value): {
            on_demand_max_price_percentage_over_lowest_price: value,
          },
          '#withRequireHibernateSupport': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withRequireHibernateSupport(value=true): {
            require_hibernate_support: value,
          },
          '#withSpotMaxPricePercentageOverLowestPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSpotMaxPricePercentageOverLowestPrice(value): {
            spot_max_price_percentage_over_lowest_price: value,
          },
          '#withTotalLocalStorageGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTotalLocalStorageGb(value): {
            total_local_storage_gb:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTotalLocalStorageGbMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTotalLocalStorageGbMixin(value): {
            total_local_storage_gb+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          total_local_storage_gb+:
            {
              '#': { help: '', name: 'total_local_storage_gb' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
          '#withVcpuCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVcpuCount(value): {
            vcpu_count:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVcpuCountMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVcpuCountMixin(value): {
            vcpu_count+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vcpu_count+:
            {
              '#': { help: '', name: 'vcpu_count' },
              '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMax(value): {
                max: value,
              },
              '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMin(value): {
                min: value,
              },
            },
        },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withKernelId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKernelId(value): {
        kernel_id: value,
      },
      '#withKeyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKeyName(value): {
        key_name: value,
      },
      '#withLatestVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withLatestVersion(value): {
        latest_version: value,
      },
      '#withLicenseSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLicenseSpecification(value): {
        license_specification:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLicenseSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLicenseSpecificationMixin(value): {
        license_specification+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      license_specification+:
        {
          '#': { help: '', name: 'license_specification' },
          '#withLicenseConfigurationArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLicenseConfigurationArn(value): {
            license_configuration_arn: value,
          },
        },
      '#withMaintenanceOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMaintenanceOptions(value): {
        maintenance_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMaintenanceOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMaintenanceOptionsMixin(value): {
        maintenance_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      maintenance_options+:
        {
          '#': { help: '', name: 'maintenance_options' },
          '#withAutoRecovery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAutoRecovery(value): {
            auto_recovery: value,
          },
        },
      '#withMetadataOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMetadataOptions(value): {
        metadata_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMetadataOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMetadataOptionsMixin(value): {
        metadata_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      metadata_options+:
        {
          '#': { help: '', name: 'metadata_options' },
          '#withHttpEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHttpEndpoint(value): {
            http_endpoint: value,
          },
          '#withHttpProtocolIpv6': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHttpProtocolIpv6(value): {
            http_protocol_ipv6: value,
          },
          '#withHttpPutResponseHopLimit': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withHttpPutResponseHopLimit(value): {
            http_put_response_hop_limit: value,
          },
          '#withHttpTokens': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHttpTokens(value): {
            http_tokens: value,
          },
          '#withInstanceMetadataTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInstanceMetadataTags(value): {
            instance_metadata_tags: value,
          },
        },
      '#withMonitoring': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMonitoring(value): {
        monitoring:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMonitoringMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMonitoringMixin(value): {
        monitoring+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      monitoring+:
        {
          '#': { help: '', name: 'monitoring' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNetworkInterfaces': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkInterfaces(value): {
        network_interfaces:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNetworkInterfacesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkInterfacesMixin(value): {
        network_interfaces+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      network_interfaces+:
        {
          '#': { help: '', name: 'network_interfaces' },
          '#withAssociateCarrierIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAssociateCarrierIpAddress(value): {
            associate_carrier_ip_address: value,
          },
          '#withAssociatePublicIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAssociatePublicIpAddress(value): {
            associate_public_ip_address: value,
          },
          '#withConnectionTrackingSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConnectionTrackingSpecification(value): {
            connection_tracking_specification:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConnectionTrackingSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConnectionTrackingSpecificationMixin(value): {
            connection_tracking_specification+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          connection_tracking_specification+:
            {
              '#': { help: '', name: 'connection_tracking_specification' },
              '#withTcpEstablishedTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withTcpEstablishedTimeout(value): {
                tcp_established_timeout: value,
              },
              '#withUdpStreamTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withUdpStreamTimeout(value): {
                udp_stream_timeout: value,
              },
              '#withUdpTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withUdpTimeout(value): {
                udp_timeout: value,
              },
            },
          '#withDeleteOnTermination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDeleteOnTermination(value): {
            delete_on_termination: value,
          },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            description: value,
          },
          '#withDeviceIndex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withDeviceIndex(value): {
            device_index: value,
          },
          '#withInterfaceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInterfaceType(value): {
            interface_type: value,
          },
          '#withIpv4AddressCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIpv4AddressCount(value): {
            ipv4_address_count: value,
          },
          '#withIpv4Addresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv4Addresses(value): {
            ipv4_addresses:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpv4AddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv4AddressesMixin(value): {
            ipv4_addresses+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpv4PrefixCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIpv4PrefixCount(value): {
            ipv4_prefix_count: value,
          },
          '#withIpv4Prefixes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv4Prefixes(value): {
            ipv4_prefixes:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpv4PrefixesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv4PrefixesMixin(value): {
            ipv4_prefixes+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpv6AddressCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIpv6AddressCount(value): {
            ipv6_address_count: value,
          },
          '#withIpv6Addresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv6Addresses(value): {
            ipv6_addresses:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpv6AddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv6AddressesMixin(value): {
            ipv6_addresses+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpv6PrefixCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIpv6PrefixCount(value): {
            ipv6_prefix_count: value,
          },
          '#withIpv6Prefixes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv6Prefixes(value): {
            ipv6_prefixes:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIpv6PrefixesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIpv6PrefixesMixin(value): {
            ipv6_prefixes+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNetworkCardIndex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNetworkCardIndex(value): {
            network_card_index: value,
          },
          '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNetworkInterfaceId(value): {
            network_interface_id: value,
          },
          '#withPrimaryIpv6': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrimaryIpv6(value): {
            primary_ipv6: value,
          },
          '#withPrivateIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrivateIpAddress(value): {
            private_ip_address: value,
          },
          '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroups(value): {
            security_groups:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupsMixin(value): {
            security_groups+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSubnetId(value): {
            subnet_id: value,
          },
        },
      '#withPlacement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacement(value): {
        placement:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPlacementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPlacementMixin(value): {
        placement+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      placement+:
        {
          '#': { help: '', name: 'placement' },
          '#withAffinity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAffinity(value): {
            affinity: value,
          },
          '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAvailabilityZone(value): {
            availability_zone: value,
          },
          '#withGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGroupName(value): {
            group_name: value,
          },
          '#withHostId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHostId(value): {
            host_id: value,
          },
          '#withHostResourceGroupArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHostResourceGroupArn(value): {
            host_resource_group_arn: value,
          },
          '#withPartitionNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPartitionNumber(value): {
            partition_number: value,
          },
          '#withSpreadDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSpreadDomain(value): {
            spread_domain: value,
          },
          '#withTenancy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTenancy(value): {
            tenancy: value,
          },
        },
      '#withPrivateDnsNameOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPrivateDnsNameOptions(value): {
        private_dns_name_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPrivateDnsNameOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPrivateDnsNameOptionsMixin(value): {
        private_dns_name_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      private_dns_name_options+:
        {
          '#': { help: '', name: 'private_dns_name_options' },
          '#withEnableResourceNameDnsARecord': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableResourceNameDnsARecord(value=true): {
            enable_resource_name_dns_a_record: value,
          },
          '#withEnableResourceNameDnsAaaaRecord': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableResourceNameDnsAaaaRecord(value=true): {
            enable_resource_name_dns_aaaa_record: value,
          },
          '#withHostnameType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHostnameType(value): {
            hostname_type: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRamDiskId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRamDiskId(value): {
        ram_disk_id: value,
      },
      '#withSecurityGroupNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupNames(value): {
        security_group_names:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupNamesMixin(value): {
        security_group_names+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTagSpecifications': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTagSpecifications(value): {
        tag_specifications:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTagSpecificationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTagSpecificationsMixin(value): {
        tag_specifications+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      tag_specifications+:
        {
          '#': { help: '', name: 'tag_specifications' },
          '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withResourceType(value): {
            resource_type: value,
          },
          '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTags(value): {
            tags: value,
          },
          '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTagsMixin(value): {
            tags+: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withUserData': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserData(value): {
        user_data: value,
      },
      '#withVpcSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcSecurityGroupIds(value): {
        vpc_security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVpcSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcSecurityGroupIdsMixin(value): {
        vpc_security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
}
