// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'bedrock',
  },
  aws_bedrock_custom_model:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'model_id', type: 'string' }], help: '' } },
      new(tf_resource_key, model_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withModelId(model_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_bedrock_custom_model+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBaseModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBaseModelArn(value): {
        base_model_arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTime(value): {
        creation_time: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHyperparameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHyperparameters(value): {
        hyperparameters: value,
      },
      '#withHyperparametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withHyperparametersMixin(value): {
        hyperparameters+: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withJobArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJobArn(value): {
        job_arn: value,
      },
      '#withJobName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJobName(value): {
        job_name: value,
      },
      '#withJobTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withJobTags(value): {
        job_tags: value,
      },
      '#withJobTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withJobTagsMixin(value): {
        job_tags+: value,
      },
      '#withModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelArn(value): {
        model_arn: value,
      },
      '#withModelId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelId(value): {
        model_id: value,
      },
      '#withModelKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelKmsKeyArn(value): {
        model_kms_key_arn: value,
      },
      '#withModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelName(value): {
        model_name: value,
      },
      '#withModelTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withModelTags(value): {
        model_tags: value,
      },
      '#withModelTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withModelTagsMixin(value): {
        model_tags+: value,
      },
      '#withOutputDataConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputDataConfig(value): {
        output_data_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOutputDataConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputDataConfigMixin(value): {
        output_data_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      output_data_config+:
        {
          '#': { help: '', name: 'output_data_config' },
          '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3Uri(value): {
            s3_uri: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTrainingDataConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrainingDataConfig(value): {
        training_data_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTrainingDataConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrainingDataConfigMixin(value): {
        training_data_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      training_data_config+:
        {
          '#': { help: '', name: 'training_data_config' },
          '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withS3Uri(value): {
            s3_uri: value,
          },
        },
      '#withTrainingMetrics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrainingMetrics(value): {
        training_metrics:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTrainingMetricsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrainingMetricsMixin(value): {
        training_metrics+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      training_metrics+:
        {
          '#': { help: '', name: 'training_metrics' },
          '#withTrainingLoss': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTrainingLoss(value): {
            training_loss: value,
          },
        },
      '#withValidationDataConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidationDataConfig(value): {
        validation_data_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidationDataConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidationDataConfigMixin(value): {
        validation_data_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      validation_data_config+:
        {
          '#': { help: '', name: 'validation_data_config' },
          '#withValidator': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValidator(value): {
            validator:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValidatorMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValidatorMixin(value): {
            validator+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          validator+:
            {
              '#': { help: '', name: 'validator' },
              '#withS3Uri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withS3Uri(value): {
                s3_uri: value,
              },
            },
        },
      '#withValidationMetrics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidationMetrics(value): {
        validation_metrics:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidationMetricsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidationMetricsMixin(value): {
        validation_metrics+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      validation_metrics+:
        {
          '#': { help: '', name: 'validation_metrics' },
          '#withValidationLoss': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withValidationLoss(value): {
            validation_loss: value,
          },
        },
    },
  aws_bedrock_custom_models:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_bedrock_custom_models+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withModelSummaries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withModelSummaries(value): {
        model_summaries:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withModelSummariesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withModelSummariesMixin(value): {
        model_summaries+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      model_summaries+:
        {
          '#': { help: '', name: 'model_summaries' },
          '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreationTime(value): {
            creation_time: value,
          },
          '#withModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelArn(value): {
            model_arn: value,
          },
          '#withModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelName(value): {
            model_name: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_bedrock_foundation_model:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'model_id', type: 'string' }], help: '' } },
      new(tf_resource_key, model_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withModelId(model_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_bedrock_foundation_model+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomizationsSupported': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomizationsSupported(value): {
        customizations_supported:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomizationsSupportedMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomizationsSupportedMixin(value): {
        customizations_supported+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInferenceTypesSupported': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceTypesSupported(value): {
        inference_types_supported:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInferenceTypesSupportedMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceTypesSupportedMixin(value): {
        inference_types_supported+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInputModalities': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInputModalities(value): {
        input_modalities:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInputModalitiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInputModalitiesMixin(value): {
        input_modalities+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelArn(value): {
        model_arn: value,
      },
      '#withModelId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelId(value): {
        model_id: value,
      },
      '#withModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModelName(value): {
        model_name: value,
      },
      '#withOutputModalities': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputModalities(value): {
        output_modalities:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOutputModalitiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutputModalitiesMixin(value): {
        output_modalities+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProviderName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProviderName(value): {
        provider_name: value,
      },
      '#withResponseStreamingSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withResponseStreamingSupported(value=true): {
        response_streaming_supported: value,
      },
    },
  aws_bedrock_foundation_models:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_bedrock_foundation_models+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withByCustomizationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withByCustomizationType(value): {
        by_customization_type: value,
      },
      '#withByInferenceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withByInferenceType(value): {
        by_inference_type: value,
      },
      '#withByOutputModality': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withByOutputModality(value): {
        by_output_modality: value,
      },
      '#withByProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withByProvider(value): {
        by_provider: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withModelSummaries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withModelSummaries(value): {
        model_summaries:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withModelSummariesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withModelSummariesMixin(value): {
        model_summaries+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      model_summaries+:
        {
          '#': { help: '', name: 'model_summaries' },
          '#withCustomizationsSupported': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomizationsSupported(value): {
            customizations_supported:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCustomizationsSupportedMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomizationsSupportedMixin(value): {
            customizations_supported+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInferenceTypesSupported': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInferenceTypesSupported(value): {
            inference_types_supported:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInferenceTypesSupportedMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInferenceTypesSupportedMixin(value): {
            inference_types_supported+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInputModalities': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInputModalities(value): {
            input_modalities:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInputModalitiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInputModalitiesMixin(value): {
            input_modalities+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelArn(value): {
            model_arn: value,
          },
          '#withModelId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelId(value): {
            model_id: value,
          },
          '#withModelName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelName(value): {
            model_name: value,
          },
          '#withOutputModalities': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutputModalities(value): {
            output_modalities:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withOutputModalitiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutputModalitiesMixin(value): {
            output_modalities+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withProviderName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProviderName(value): {
            provider_name: value,
          },
          '#withResponseStreamingSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withResponseStreamingSupported(value=true): {
            response_streaming_supported: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_bedrock_inference_profile:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'inference_profile_id', type: 'string' }], help: '' } },
      new(tf_resource_key, inference_profile_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withInferenceProfileId(inference_profile_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_bedrock_inference_profile+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withInferenceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInferenceProfileArn(value): {
        inference_profile_arn: value,
      },
      '#withInferenceProfileId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInferenceProfileId(value): {
        inference_profile_id: value,
      },
      '#withInferenceProfileName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInferenceProfileName(value): {
        inference_profile_name: value,
      },
      '#withModels': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withModels(value): {
        models:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withModelsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withModelsMixin(value): {
        models+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      models+:
        {
          '#': { help: '', name: 'models' },
          '#withModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withModelArn(value): {
            model_arn: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        type: value,
      },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
    },
  aws_bedrock_inference_profiles:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_bedrock_inference_profiles+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInferenceProfileSummaries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceProfileSummaries(value): {
        inference_profile_summaries:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInferenceProfileSummariesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceProfileSummariesMixin(value): {
        inference_profile_summaries+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      inference_profile_summaries+:
        {
          '#': { help: '', name: 'inference_profile_summaries' },
          '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreatedAt(value): {
            created_at: value,
          },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            description: value,
          },
          '#withInferenceProfileArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInferenceProfileArn(value): {
            inference_profile_arn: value,
          },
          '#withInferenceProfileId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInferenceProfileId(value): {
            inference_profile_id: value,
          },
          '#withInferenceProfileName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInferenceProfileName(value): {
            inference_profile_name: value,
          },
          '#withModels': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withModels(value): {
            models:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withModelsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withModelsMixin(value): {
            models+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          models+:
            {
              '#': { help: '', name: 'models' },
              '#withModelArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withModelArn(value): {
                model_arn: value,
              },
            },
          '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatus(value): {
            status: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdatedAt(value): {
            updated_at: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
}
