// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'autoscaling',
  },
  aws_autoscaling_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_autoscaling_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAvailabilityZones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZones(value): {
        availability_zones:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAvailabilityZonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZonesMixin(value): {
        availability_zones+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultCooldown': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultCooldown(value): {
        default_cooldown: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDesiredCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDesiredCapacity(value): {
        desired_capacity: value,
      },
      '#withDesiredCapacityType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDesiredCapacityType(value): {
        desired_capacity_type: value,
      },
      '#withEnabledMetrics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnabledMetrics(value): {
        enabled_metrics:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnabledMetricsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnabledMetricsMixin(value): {
        enabled_metrics+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHealthCheckGracePeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withHealthCheckGracePeriod(value): {
        health_check_grace_period: value,
      },
      '#withHealthCheckType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHealthCheckType(value): {
        health_check_type: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceMaintenancePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceMaintenancePolicy(value): {
        instance_maintenance_policy:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstanceMaintenancePolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceMaintenancePolicyMixin(value): {
        instance_maintenance_policy+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      instance_maintenance_policy+:
        {
          '#': { help: '', name: 'instance_maintenance_policy' },
          '#withMaxHealthyPercentage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxHealthyPercentage(value): {
            max_healthy_percentage: value,
          },
          '#withMinHealthyPercentage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMinHealthyPercentage(value): {
            min_healthy_percentage: value,
          },
        },
      '#withLaunchConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLaunchConfiguration(value): {
        launch_configuration: value,
      },
      '#withLaunchTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLaunchTemplate(value): {
        launch_template:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLaunchTemplateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLaunchTemplateMixin(value): {
        launch_template+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      launch_template+:
        {
          '#': { help: '', name: 'launch_template' },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVersion(value): {
            version: value,
          },
        },
      '#withLoadBalancers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLoadBalancers(value): {
        load_balancers:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLoadBalancersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLoadBalancersMixin(value): {
        load_balancers+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMaxInstanceLifetime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxInstanceLifetime(value): {
        max_instance_lifetime: value,
      },
      '#withMaxSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxSize(value): {
        max_size: value,
      },
      '#withMinSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinSize(value): {
        min_size: value,
      },
      '#withMixedInstancesPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMixedInstancesPolicy(value): {
        mixed_instances_policy:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMixedInstancesPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMixedInstancesPolicyMixin(value): {
        mixed_instances_policy+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      mixed_instances_policy+:
        {
          '#': { help: '', name: 'mixed_instances_policy' },
          '#withInstancesDistribution': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstancesDistribution(value): {
            instances_distribution:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInstancesDistributionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstancesDistributionMixin(value): {
            instances_distribution+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          instances_distribution+:
            {
              '#': { help: '', name: 'instances_distribution' },
              '#withOnDemandAllocationStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnDemandAllocationStrategy(value): {
                on_demand_allocation_strategy: value,
              },
              '#withOnDemandBaseCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withOnDemandBaseCapacity(value): {
                on_demand_base_capacity: value,
              },
              '#withOnDemandPercentageAboveBaseCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withOnDemandPercentageAboveBaseCapacity(value): {
                on_demand_percentage_above_base_capacity: value,
              },
              '#withSpotAllocationStrategy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSpotAllocationStrategy(value): {
                spot_allocation_strategy: value,
              },
              '#withSpotInstancePools': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withSpotInstancePools(value): {
                spot_instance_pools: value,
              },
              '#withSpotMaxPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSpotMaxPrice(value): {
                spot_max_price: value,
              },
            },
          '#withLaunchTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLaunchTemplate(value): {
            launch_template:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLaunchTemplateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLaunchTemplateMixin(value): {
            launch_template+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          launch_template+:
            {
              '#': { help: '', name: 'launch_template' },
              '#withLaunchTemplateSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLaunchTemplateSpecification(value): {
                launch_template_specification:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withLaunchTemplateSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withLaunchTemplateSpecificationMixin(value): {
                launch_template_specification+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              launch_template_specification+:
                {
                  '#': { help: '', name: 'launch_template_specification' },
                  '#withLaunchTemplateId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLaunchTemplateId(value): {
                    launch_template_id: value,
                  },
                  '#withLaunchTemplateName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withLaunchTemplateName(value): {
                    launch_template_name: value,
                  },
                  '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withVersion(value): {
                    version: value,
                  },
                },
              '#withOverride': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOverride(value): {
                override:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withOverrideMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOverrideMixin(value): {
                override+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              override+:
                {
                  '#': { help: '', name: 'override' },
                  '#withInstanceRequirements': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withInstanceRequirements(value): {
                    instance_requirements:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withInstanceRequirementsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withInstanceRequirementsMixin(value): {
                    instance_requirements+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  instance_requirements+:
                    {
                      '#': { help: '', name: 'instance_requirements' },
                      '#withAcceleratorCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorCount(value): {
                        accelerator_count:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcceleratorCountMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorCountMixin(value): {
                        accelerator_count+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      accelerator_count+:
                        {
                          '#': { help: '', name: 'accelerator_count' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withAcceleratorManufacturers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorManufacturers(value): {
                        accelerator_manufacturers:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcceleratorManufacturersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorManufacturersMixin(value): {
                        accelerator_manufacturers+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcceleratorNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorNames(value): {
                        accelerator_names:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcceleratorNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorNamesMixin(value): {
                        accelerator_names+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcceleratorTotalMemoryMib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorTotalMemoryMib(value): {
                        accelerator_total_memory_mib:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcceleratorTotalMemoryMibMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorTotalMemoryMibMixin(value): {
                        accelerator_total_memory_mib+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      accelerator_total_memory_mib+:
                        {
                          '#': { help: '', name: 'accelerator_total_memory_mib' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withAcceleratorTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorTypes(value): {
                        accelerator_types:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAcceleratorTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAcceleratorTypesMixin(value): {
                        accelerator_types+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAllowedInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAllowedInstanceTypes(value): {
                        allowed_instance_types:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withAllowedInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withAllowedInstanceTypesMixin(value): {
                        allowed_instance_types+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withBareMetal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withBareMetal(value): {
                        bare_metal: value,
                      },
                      '#withBaselineEbsBandwidthMbps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withBaselineEbsBandwidthMbps(value): {
                        baseline_ebs_bandwidth_mbps:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withBaselineEbsBandwidthMbpsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withBaselineEbsBandwidthMbpsMixin(value): {
                        baseline_ebs_bandwidth_mbps+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      baseline_ebs_bandwidth_mbps+:
                        {
                          '#': { help: '', name: 'baseline_ebs_bandwidth_mbps' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withBurstablePerformance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withBurstablePerformance(value): {
                        burstable_performance: value,
                      },
                      '#withCpuManufacturers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCpuManufacturers(value): {
                        cpu_manufacturers:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCpuManufacturersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCpuManufacturersMixin(value): {
                        cpu_manufacturers+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withExcludedInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withExcludedInstanceTypes(value): {
                        excluded_instance_types:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withExcludedInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withExcludedInstanceTypesMixin(value): {
                        excluded_instance_types+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withInstanceGenerations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withInstanceGenerations(value): {
                        instance_generations:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withInstanceGenerationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withInstanceGenerationsMixin(value): {
                        instance_generations+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withLocalStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLocalStorage(value): {
                        local_storage: value,
                      },
                      '#withLocalStorageTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withLocalStorageTypes(value): {
                        local_storage_types:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withLocalStorageTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withLocalStorageTypesMixin(value): {
                        local_storage_types+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMaxSpotPriceAsPercentageOfOptimalOnDemandPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMaxSpotPriceAsPercentageOfOptimalOnDemandPrice(value): {
                        max_spot_price_as_percentage_of_optimal_on_demand_price: value,
                      },
                      '#withMemoryGibPerVcpu': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMemoryGibPerVcpu(value): {
                        memory_gib_per_vcpu:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMemoryGibPerVcpuMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMemoryGibPerVcpuMixin(value): {
                        memory_gib_per_vcpu+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      memory_gib_per_vcpu+:
                        {
                          '#': { help: '', name: 'memory_gib_per_vcpu' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withMemoryMib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMemoryMib(value): {
                        memory_mib:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMemoryMibMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMemoryMibMixin(value): {
                        memory_mib+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      memory_mib+:
                        {
                          '#': { help: '', name: 'memory_mib' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withNetworkBandwidthGbps': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNetworkBandwidthGbps(value): {
                        network_bandwidth_gbps:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNetworkBandwidthGbpsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNetworkBandwidthGbpsMixin(value): {
                        network_bandwidth_gbps+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      network_bandwidth_gbps+:
                        {
                          '#': { help: '', name: 'network_bandwidth_gbps' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withNetworkInterfaceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNetworkInterfaceCount(value): {
                        network_interface_count:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withNetworkInterfaceCountMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withNetworkInterfaceCountMixin(value): {
                        network_interface_count+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      network_interface_count+:
                        {
                          '#': { help: '', name: 'network_interface_count' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withOnDemandMaxPricePercentageOverLowestPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withOnDemandMaxPricePercentageOverLowestPrice(value): {
                        on_demand_max_price_percentage_over_lowest_price: value,
                      },
                      '#withRequireHibernateSupport': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withRequireHibernateSupport(value=true): {
                        require_hibernate_support: value,
                      },
                      '#withSpotMaxPricePercentageOverLowestPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withSpotMaxPricePercentageOverLowestPrice(value): {
                        spot_max_price_percentage_over_lowest_price: value,
                      },
                      '#withTotalLocalStorageGb': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTotalLocalStorageGb(value): {
                        total_local_storage_gb:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTotalLocalStorageGbMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTotalLocalStorageGbMixin(value): {
                        total_local_storage_gb+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      total_local_storage_gb+:
                        {
                          '#': { help: '', name: 'total_local_storage_gb' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                      '#withVcpuCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVcpuCount(value): {
                        vcpu_count:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withVcpuCountMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withVcpuCountMixin(value): {
                        vcpu_count+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      vcpu_count+:
                        {
                          '#': { help: '', name: 'vcpu_count' },
                          '#withMax': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMax(value): {
                            max: value,
                          },
                          '#withMin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                          withMin(value): {
                            min: value,
                          },
                        },
                    },
                  '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withInstanceType(value): {
                    instance_type: value,
                  },
                  '#withLaunchTemplateSpecification': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLaunchTemplateSpecification(value): {
                    launch_template_specification:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withLaunchTemplateSpecificationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withLaunchTemplateSpecificationMixin(value): {
                    launch_template_specification+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  launch_template_specification+:
                    {
                      '#': { help: '', name: 'launch_template_specification' },
                      '#withLaunchTemplateId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLaunchTemplateId(value): {
                        launch_template_id: value,
                      },
                      '#withLaunchTemplateName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withLaunchTemplateName(value): {
                        launch_template_name: value,
                      },
                      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withVersion(value): {
                        version: value,
                      },
                    },
                  '#withWeightedCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withWeightedCapacity(value): {
                    weighted_capacity: value,
                  },
                },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withNewInstancesProtectedFromScaleIn': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withNewInstancesProtectedFromScaleIn(value=true): {
        new_instances_protected_from_scale_in: value,
      },
      '#withPlacementGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlacementGroup(value): {
        placement_group: value,
      },
      '#withPredictedCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPredictedCapacity(value): {
        predicted_capacity: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withServiceLinkedRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServiceLinkedRoleArn(value): {
        service_linked_role_arn: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withSuspendedProcesses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSuspendedProcesses(value): {
        suspended_processes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSuspendedProcessesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSuspendedProcessesMixin(value): {
        suspended_processes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTag(value): {
        tag:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTagMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTagMixin(value): {
        tag+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      tag+:
        {
          '#': { help: '', name: 'tag' },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
          '#withPropagateAtLaunch': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPropagateAtLaunch(value=true): {
            propagate_at_launch: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withTargetGroupArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTargetGroupArns(value): {
        target_group_arns:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTargetGroupArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTargetGroupArnsMixin(value): {
        target_group_arns+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTerminationPolicies': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTerminationPolicies(value): {
        termination_policies:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTerminationPoliciesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTerminationPoliciesMixin(value): {
        termination_policies+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTrafficSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrafficSource(value): {
        traffic_source:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTrafficSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrafficSourceMixin(value): {
        traffic_source+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      traffic_source+:
        {
          '#': { help: '', name: 'traffic_source' },
          '#withIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIdentifier(value): {
            identifier: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withVpcZoneIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcZoneIdentifier(value): {
        vpc_zone_identifier: value,
      },
      '#withWarmPool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWarmPool(value): {
        warm_pool:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withWarmPoolMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withWarmPoolMixin(value): {
        warm_pool+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      warm_pool+:
        {
          '#': { help: '', name: 'warm_pool' },
          '#withInstanceReusePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstanceReusePolicy(value): {
            instance_reuse_policy:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInstanceReusePolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInstanceReusePolicyMixin(value): {
            instance_reuse_policy+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          instance_reuse_policy+:
            {
              '#': { help: '', name: 'instance_reuse_policy' },
              '#withReuseOnScaleIn': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withReuseOnScaleIn(value=true): {
                reuse_on_scale_in: value,
              },
            },
          '#withMaxGroupPreparedCapacity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxGroupPreparedCapacity(value): {
            max_group_prepared_capacity: value,
          },
          '#withMinSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMinSize(value): {
            min_size: value,
          },
          '#withPoolState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPoolState(value): {
            pool_state: value,
          },
        },
      '#withWarmPoolSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withWarmPoolSize(value): {
        warm_pool_size: value,
      },
    },
  aws_autoscaling_groups:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_autoscaling_groups+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArns(value): {
        arns:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArnsMixin(value): {
        arns+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNames(value): {
        names:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNamesMixin(value): {
        names+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
}
