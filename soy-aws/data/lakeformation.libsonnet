// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'lakeformation',
  },
  aws_lakeformation_data_lake_settings:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lakeformation_data_lake_settings: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAdmins': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdmins(value): {
        admins:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAdminsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAdminsMixin(value): {
        admins+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAllowExternalDataFiltering': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowExternalDataFiltering(value=true): {
        allow_external_data_filtering: value,
      },
      '#withAllowFullTableExternalDataAccess': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAllowFullTableExternalDataAccess(value=true): {
        allow_full_table_external_data_access: value,
      },
      '#withAuthorizedSessionTagValueList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAuthorizedSessionTagValueList(value): {
        authorized_session_tag_value_list:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAuthorizedSessionTagValueListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAuthorizedSessionTagValueListMixin(value): {
        authorized_session_tag_value_list+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCatalogId(value): {
        catalog_id: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreateDatabaseDefaultPermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCreateDatabaseDefaultPermissions(value): {
        create_database_default_permissions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCreateDatabaseDefaultPermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCreateDatabaseDefaultPermissionsMixin(value): {
        create_database_default_permissions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      create_database_default_permissions+:
        {
          '#': { help: '', name: 'create_database_default_permissions' },
          '#withPermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPermissions(value): {
            permissions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPermissionsMixin(value): {
            permissions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPrincipal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrincipal(value): {
            principal: value,
          },
        },
      '#withCreateTableDefaultPermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCreateTableDefaultPermissions(value): {
        create_table_default_permissions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCreateTableDefaultPermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCreateTableDefaultPermissionsMixin(value): {
        create_table_default_permissions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      create_table_default_permissions+:
        {
          '#': { help: '', name: 'create_table_default_permissions' },
          '#withPermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPermissions(value): {
            permissions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPermissionsMixin(value): {
            permissions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPrincipal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrincipal(value): {
            principal: value,
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExternalDataFilteringAllowList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalDataFilteringAllowList(value): {
        external_data_filtering_allow_list:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExternalDataFilteringAllowListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalDataFilteringAllowListMixin(value): {
        external_data_filtering_allow_list+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withParameters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withParameters(value): {
        parameters: value,
      },
      '#withParametersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withParametersMixin(value): {
        parameters+: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withReadOnlyAdmins': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReadOnlyAdmins(value): {
        read_only_admins:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withReadOnlyAdminsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReadOnlyAdminsMixin(value): {
        read_only_admins+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTrustedResourceOwners': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrustedResourceOwners(value): {
        trusted_resource_owners:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTrustedResourceOwnersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTrustedResourceOwnersMixin(value): {
        trusted_resource_owners+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_lakeformation_permissions:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'principal', type: 'string' }], help: '' } },
      new(tf_resource_key, principal):
        self.withTfResourceKey(tf_resource_key)
        + self.withPrincipal(principal),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lakeformation_permissions: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCatalogId(value): {
        catalog_id: value,
      },
      '#withCatalogResource': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withCatalogResource(value=true): {
        catalog_resource: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDataCellsFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataCellsFilter(value): {
        data_cells_filter: value,
      },
      '#withDataCellsFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataCellsFilterMixin(value): {
        data_cells_filter+: value,
      },
      data_cells_filter+:
        {
          '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatabaseName(value): {
            data_cells_filter+: {
              database_name: value,
            },
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            data_cells_filter+: {
              name: value,
            },
          },
          '#withTableCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTableCatalogId(value): {
            data_cells_filter+: {
              table_catalog_id: value,
            },
          },
          '#withTableName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTableName(value): {
            data_cells_filter+: {
              table_name: value,
            },
          },
        },
      '#withDataLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataLocation(value): {
        data_location: value,
      },
      '#withDataLocationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDataLocationMixin(value): {
        data_location+: value,
      },
      data_location+:
        {
          '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withArn(value): {
            data_location+: {
              arn: value,
            },
          },
          '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogId(value): {
            data_location+: {
              catalog_id: value,
            },
          },
        },
      '#withDatabase': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDatabase(value): {
        database: value,
      },
      '#withDatabaseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withDatabaseMixin(value): {
        database+: value,
      },
      database+:
        {
          '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogId(value): {
            database+: {
              catalog_id: value,
            },
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            database+: {
              name: value,
            },
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLfTag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLfTag(value): {
        lf_tag: value,
      },
      '#withLfTagMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLfTagMixin(value): {
        lf_tag+: value,
      },
      lf_tag+:
        {
          '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogId(value): {
            lf_tag+: {
              catalog_id: value,
            },
          },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            lf_tag+: {
              key: value,
            },
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            lf_tag+: {
              values:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            lf_tag+: {
              values+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
        },
      '#withLfTagPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLfTagPolicy(value): {
        lf_tag_policy: value,
      },
      '#withLfTagPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLfTagPolicyMixin(value): {
        lf_tag_policy+: value,
      },
      lf_tag_policy+:
        {
          '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogId(value): {
            lf_tag_policy+: {
              catalog_id: value,
            },
          },
          '#withExpression': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExpression(value): {
            lf_tag_policy+: {
              expression:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withExpressionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExpressionMixin(value): {
            lf_tag_policy+: {
              expression+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          expression+:
            {
              '#': { help: '', name: 'expression' },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                values:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                values+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withResourceType(value): {
            lf_tag_policy+: {
              resource_type: value,
            },
          },
        },
      '#withPermissions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPermissions(value): {
        permissions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPermissionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPermissionsMixin(value): {
        permissions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPermissionsWithGrantOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPermissionsWithGrantOption(value): {
        permissions_with_grant_option:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPermissionsWithGrantOptionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPermissionsWithGrantOptionMixin(value): {
        permissions_with_grant_option+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPrincipal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPrincipal(value): {
        principal: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTable': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTable(value): {
        table: value,
      },
      '#withTableMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTableMixin(value): {
        table+: value,
      },
      table+:
        {
          '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogId(value): {
            table+: {
              catalog_id: value,
            },
          },
          '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatabaseName(value): {
            table+: {
              database_name: value,
            },
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            table+: {
              name: value,
            },
          },
          '#withWildcard': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withWildcard(value=true): {
            table+: {
              wildcard: value,
            },
          },
        },
      '#withTableWithColumns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTableWithColumns(value): {
        table_with_columns: value,
      },
      '#withTableWithColumnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTableWithColumnsMixin(value): {
        table_with_columns+: value,
      },
      table_with_columns+:
        {
          '#withCatalogId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCatalogId(value): {
            table_with_columns+: {
              catalog_id: value,
            },
          },
          '#withColumnNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withColumnNames(value): {
            table_with_columns+: {
              column_names:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withColumnNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withColumnNamesMixin(value): {
            table_with_columns+: {
              column_names+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withDatabaseName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDatabaseName(value): {
            table_with_columns+: {
              database_name: value,
            },
          },
          '#withExcludedColumnNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExcludedColumnNames(value): {
            table_with_columns+: {
              excluded_column_names:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withExcludedColumnNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExcludedColumnNamesMixin(value): {
            table_with_columns+: {
              excluded_column_names+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            table_with_columns+: {
              name: value,
            },
          },
          '#withWildcard': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withWildcard(value=true): {
            table_with_columns+: {
              wildcard: value,
            },
          },
        },
    },
  aws_lakeformation_resource:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lakeformation_resource: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLastModified': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModified(value): {
        last_modified: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
    },
}
