// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'neptune',
  },
  aws_neptune_engine_version:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          data: {
            aws_neptune_engine_version: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEngine': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngine(value): {
        spec+: {
          engine: value,
        },
      },
      '#withEngineDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineDescription(value): {
        spec+: {
          engine_description: value,
        },
      },
      '#withExportableLogTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExportableLogTypes(value): {
        spec+: {
          exportable_log_types:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withExportableLogTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExportableLogTypesMixin(value): {
        spec+: {
          exportable_log_types+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withParameterGroupFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withParameterGroupFamily(value): {
        spec+: {
          parameter_group_family: value,
        },
      },
      '#withPreferredVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredVersions(value): {
        spec+: {
          preferred_versions:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPreferredVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredVersionsMixin(value): {
        spec+: {
          preferred_versions+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSupportedTimezones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedTimezones(value): {
        spec+: {
          supported_timezones:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSupportedTimezonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedTimezonesMixin(value): {
        spec+: {
          supported_timezones+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSupportsLogExportsToCloudwatch': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsLogExportsToCloudwatch(value=true): {
        spec+: {
          supports_log_exports_to_cloudwatch: value,
        },
      },
      '#withSupportsReadReplica': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsReadReplica(value=true): {
        spec+: {
          supports_read_replica: value,
        },
      },
      '#withValidUpgradeTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidUpgradeTargets(value): {
        spec+: {
          valid_upgrade_targets:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withValidUpgradeTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidUpgradeTargetsMixin(value): {
        spec+: {
          valid_upgrade_targets+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        spec+: {
          version: value,
        },
      },
      '#withVersionDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersionDescription(value): {
        spec+: {
          version_description: value,
        },
      },
    },
  aws_neptune_orderable_db_instance:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          data: {
            aws_neptune_orderable_db_instance: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAvailabilityZones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZones(value): {
        spec+: {
          availability_zones:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAvailabilityZonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAvailabilityZonesMixin(value): {
        spec+: {
          availability_zones+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEngine': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngine(value): {
        spec+: {
          engine: value,
        },
      },
      '#withEngineVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEngineVersion(value): {
        spec+: {
          engine_version: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withInstanceClass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceClass(value): {
        spec+: {
          instance_class: value,
        },
      },
      '#withLicenseModel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLicenseModel(value): {
        spec+: {
          license_model: value,
        },
      },
      '#withMaxIopsPerDbInstance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxIopsPerDbInstance(value): {
        spec+: {
          max_iops_per_db_instance: value,
        },
      },
      '#withMaxIopsPerGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxIopsPerGib(value): {
        spec+: {
          max_iops_per_gib: value,
        },
      },
      '#withMaxStorageSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxStorageSize(value): {
        spec+: {
          max_storage_size: value,
        },
      },
      '#withMinIopsPerDbInstance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinIopsPerDbInstance(value): {
        spec+: {
          min_iops_per_db_instance: value,
        },
      },
      '#withMinIopsPerGib': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinIopsPerGib(value): {
        spec+: {
          min_iops_per_gib: value,
        },
      },
      '#withMinStorageSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinStorageSize(value): {
        spec+: {
          min_storage_size: value,
        },
      },
      '#withMultiAzCapable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withMultiAzCapable(value=true): {
        spec+: {
          multi_az_capable: value,
        },
      },
      '#withPreferredInstanceClasses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredInstanceClasses(value): {
        spec+: {
          preferred_instance_classes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPreferredInstanceClassesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredInstanceClassesMixin(value): {
        spec+: {
          preferred_instance_classes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withReadReplicaCapable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withReadReplicaCapable(value=true): {
        spec+: {
          read_replica_capable: value,
        },
      },
      '#withStorageType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageType(value): {
        spec+: {
          storage_type: value,
        },
      },
      '#withSupportsEnhancedMonitoring': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsEnhancedMonitoring(value=true): {
        spec+: {
          supports_enhanced_monitoring: value,
        },
      },
      '#withSupportsIamDatabaseAuthentication': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsIamDatabaseAuthentication(value=true): {
        spec+: {
          supports_iam_database_authentication: value,
        },
      },
      '#withSupportsIops': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsIops(value=true): {
        spec+: {
          supports_iops: value,
        },
      },
      '#withSupportsPerformanceInsights': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsPerformanceInsights(value=true): {
        spec+: {
          supports_performance_insights: value,
        },
      },
      '#withSupportsStorageEncryption': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSupportsStorageEncryption(value=true): {
        spec+: {
          supports_storage_encryption: value,
        },
      },
      '#withVpc': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withVpc(value=true): {
        spec+: {
          vpc: value,
        },
      },
    },
}
