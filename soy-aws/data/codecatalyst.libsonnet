// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'codecatalyst',
  },
  aws_codecatalyst_dev_environment:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'env_id', type: 'string' }, { default: null, enums: null, name: 'project_name', type: 'string' }, { default: null, enums: null, name: 'space_name', type: 'string' }], help: '' } },
      new(tf_resource_key, env_id, project_name, space_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withEnvId(env_id)
        + self.withProjectName(project_name)
        + self.withSpaceName(space_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_codecatalyst_dev_environment+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAlias(value): {
        alias: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatorId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatorId(value): {
        creator_id: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnvId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEnvId(value): {
        env_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIdes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdes(value): {
        ides:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdesMixin(value): {
        ides+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      ides+:
        {
          '#': { help: '', name: 'ides' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withRuntime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRuntime(value): {
            runtime: value,
          },
        },
      '#withInactivityTimeoutMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInactivityTimeoutMinutes(value): {
        inactivity_timeout_minutes: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withLastUpdatedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastUpdatedTime(value): {
        last_updated_time: value,
      },
      '#withPersistentStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPersistentStorage(value): {
        persistent_storage:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPersistentStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPersistentStorageMixin(value): {
        persistent_storage+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      persistent_storage+:
        {
          '#': { help: '', name: 'persistent_storage' },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
        },
      '#withProjectName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProjectName(value): {
        project_name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRepositories': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRepositories(value): {
        repositories:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRepositoriesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRepositoriesMixin(value): {
        repositories+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      repositories+:
        {
          '#': { help: '', name: 'repositories' },
          '#withBranchName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBranchName(value): {
            branch_name: value,
          },
          '#withRepositoryName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRepositoryName(value): {
            repository_name: value,
          },
        },
      '#withSpaceName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSpaceName(value): {
        space_name: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withStatusReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatusReason(value): {
        status_reason: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
}
