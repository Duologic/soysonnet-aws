// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'codeguruprofiler',
  },
  aws_codeguruprofiler_profiling_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_codeguruprofiler_profiling_group: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentOrchestrationConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAgentOrchestrationConfig(value): {
        agent_orchestration_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAgentOrchestrationConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAgentOrchestrationConfigMixin(value): {
        agent_orchestration_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      agent_orchestration_config+:
        {
          '#': { help: '', name: 'agent_orchestration_config' },
          '#withProfilingEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withProfilingEnabled(value=true): {
            profiling_enabled: value,
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withComputePlatform': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComputePlatform(value): {
        compute_platform: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProfilingStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProfilingStatus(value): {
        profiling_status:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProfilingStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withProfilingStatusMixin(value): {
        profiling_status+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      profiling_status+:
        {
          '#': { help: '', name: 'profiling_status' },
          '#withLatestAgentOrchestratedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLatestAgentOrchestratedAt(value): {
            latest_agent_orchestrated_at: value,
          },
          '#withLatestAgentProfileReportedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLatestAgentProfileReportedAt(value): {
            latest_agent_profile_reported_at: value,
          },
          '#withLatestAggregatedProfile': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLatestAggregatedProfile(value): {
            latest_aggregated_profile:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLatestAggregatedProfileMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLatestAggregatedProfileMixin(value): {
            latest_aggregated_profile+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          latest_aggregated_profile+:
            {
              '#': { help: '', name: 'latest_aggregated_profile' },
              '#withPeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPeriod(value): {
                period: value,
              },
              '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStart(value): {
                start: value,
              },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
    },
}
