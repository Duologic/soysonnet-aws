// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'ssmcontacts',
  },
  aws_ssmcontacts_contact:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        {
          local this = self,
          data: {
            aws_ssmcontacts_contact: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAlias': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAlias(value): {
        spec+: {
          alias: value,
        },
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDisplayName(value): {
        spec+: {
          display_name: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        spec+: {
          type: value,
        },
      },
    },
  aws_ssmcontacts_contact_channel:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        {
          local this = self,
          data: {
            aws_ssmcontacts_contact_channel: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withActivationStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withActivationStatus(value): {
        spec+: {
          activation_status: value,
        },
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withContactId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContactId(value): {
        spec+: {
          contact_id: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDeliveryAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDeliveryAddress(value): {
        spec+: {
          delivery_address:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDeliveryAddressMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDeliveryAddressMixin(value): {
        spec+: {
          delivery_address+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      delivery_address+:
        {
          '#': { help: '', name: 'delivery_address' },
          '#withSimpleAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSimpleAddress(value): {
            simple_address: value,
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        spec+: {
          type: value,
        },
      },
    },
  aws_ssmcontacts_plan:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'contact_id', type: 'string' }], help: '' } },
      new(tf_resource_key, contact_id):
        {
          local this = self,
          data: {
            aws_ssmcontacts_plan: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withContactId(contact_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withContactId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContactId(value): {
        spec+: {
          contact_id: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withStage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStage(value): {
        spec+: {
          stage:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withStageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStageMixin(value): {
        spec+: {
          stage+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      stage+:
        {
          '#': { help: '', name: 'stage' },
          '#withDurationInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withDurationInMinutes(value): {
            duration_in_minutes: value,
          },
          '#withTarget': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTarget(value): {
            target:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTargetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTargetMixin(value): {
            target+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          target+:
            {
              '#': { help: '', name: 'target' },
              '#withChannelTargetInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withChannelTargetInfo(value): {
                channel_target_info:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withChannelTargetInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withChannelTargetInfoMixin(value): {
                channel_target_info+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              channel_target_info+:
                {
                  '#': { help: '', name: 'channel_target_info' },
                  '#withContactChannelId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withContactChannelId(value): {
                    contact_channel_id: value,
                  },
                  '#withRetryIntervalInMinutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withRetryIntervalInMinutes(value): {
                    retry_interval_in_minutes: value,
                  },
                },
              '#withContactTargetInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContactTargetInfo(value): {
                contact_target_info:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withContactTargetInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withContactTargetInfoMixin(value): {
                contact_target_info+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              contact_target_info+:
                {
                  '#': { help: '', name: 'contact_target_info' },
                  '#withContactId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withContactId(value): {
                    contact_id: value,
                  },
                  '#withIsEssential': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withIsEssential(value=true): {
                    is_essential: value,
                  },
                },
            },
        },
    },
  aws_ssmcontacts_rotation:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        {
          local this = self,
          data: {
            aws_ssmcontacts_rotation: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withContactIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withContactIds(value): {
        spec+: {
          contact_ids:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withContactIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withContactIdsMixin(value): {
        spec+: {
          contact_ids+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRecurrence': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRecurrence(value): {
        spec+: {
          recurrence:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRecurrenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRecurrenceMixin(value): {
        spec+: {
          recurrence+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      recurrence+:
        {
          '#': { help: '', name: 'recurrence' },
          '#withDailySettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDailySettings(value): {
            daily_settings:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDailySettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDailySettingsMixin(value): {
            daily_settings+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          daily_settings+:
            {
              '#': { help: '', name: 'daily_settings' },
              '#withHourOfDay': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withHourOfDay(value): {
                hour_of_day: value,
              },
              '#withMinuteOfHour': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withMinuteOfHour(value): {
                minute_of_hour: value,
              },
            },
          '#withMonthlySettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMonthlySettings(value): {
            monthly_settings:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMonthlySettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMonthlySettingsMixin(value): {
            monthly_settings+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          monthly_settings+:
            {
              '#': { help: '', name: 'monthly_settings' },
              '#withDayOfMonth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withDayOfMonth(value): {
                day_of_month: value,
              },
              '#withHandOffTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHandOffTime(value): {
                hand_off_time:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withHandOffTimeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHandOffTimeMixin(value): {
                hand_off_time+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              hand_off_time+:
                {
                  '#': { help: '', name: 'hand_off_time' },
                  '#withHourOfDay': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withHourOfDay(value): {
                    hour_of_day: value,
                  },
                  '#withMinuteOfHour': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMinuteOfHour(value): {
                    minute_of_hour: value,
                  },
                },
            },
          '#withNumberOfOnCalls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withNumberOfOnCalls(value): {
            number_of_on_calls: value,
          },
          '#withRecurrenceMultiplier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withRecurrenceMultiplier(value): {
            recurrence_multiplier: value,
          },
          '#withShiftCoverages': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withShiftCoverages(value): {
            shift_coverages:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withShiftCoveragesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withShiftCoveragesMixin(value): {
            shift_coverages+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          shift_coverages+:
            {
              '#': { help: '', name: 'shift_coverages' },
              '#withCoverageTimes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCoverageTimes(value): {
                coverage_times:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCoverageTimesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCoverageTimesMixin(value): {
                coverage_times+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              coverage_times+:
                {
                  '#': { help: '', name: 'coverage_times' },
                  '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEnd(value): {
                    end:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withEndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withEndMixin(value): {
                    end+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  end+:
                    {
                      '#': { help: '', name: 'end' },
                      '#withHourOfDay': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withHourOfDay(value): {
                        hour_of_day: value,
                      },
                      '#withMinuteOfHour': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMinuteOfHour(value): {
                        minute_of_hour: value,
                      },
                    },
                  '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStart(value): {
                    start:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withStartMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withStartMixin(value): {
                    start+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  start+:
                    {
                      '#': { help: '', name: 'start' },
                      '#withHourOfDay': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withHourOfDay(value): {
                        hour_of_day: value,
                      },
                      '#withMinuteOfHour': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withMinuteOfHour(value): {
                        minute_of_hour: value,
                      },
                    },
                },
              '#withMapBlockKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMapBlockKey(value): {
                map_block_key: value,
              },
            },
          '#withWeeklySettings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWeeklySettings(value): {
            weekly_settings:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withWeeklySettingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withWeeklySettingsMixin(value): {
            weekly_settings+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          weekly_settings+:
            {
              '#': { help: '', name: 'weekly_settings' },
              '#withDayOfWeek': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDayOfWeek(value): {
                day_of_week: value,
              },
              '#withHandOffTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHandOffTime(value): {
                hand_off_time:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withHandOffTimeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHandOffTimeMixin(value): {
                hand_off_time+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              hand_off_time+:
                {
                  '#': { help: '', name: 'hand_off_time' },
                  '#withHourOfDay': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withHourOfDay(value): {
                    hour_of_day: value,
                  },
                  '#withMinuteOfHour': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withMinuteOfHour(value): {
                    minute_of_hour: value,
                  },
                },
            },
        },
      '#withStartTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStartTime(value): {
        spec+: {
          start_time: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTimeZoneId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTimeZoneId(value): {
        spec+: {
          time_zone_id: value,
        },
      },
    },
}
