// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'networkfirewall',
  },
  aws_networkfirewall_firewall:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_networkfirewall_firewall: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDeleteProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDeleteProtection(value=true): {
        delete_protection: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEncryptionConfiguration(value): {
        encryption_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEncryptionConfigurationMixin(value): {
        encryption_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      encryption_configuration+:
        {
          '#': { help: '', name: 'encryption_configuration' },
          '#withKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKeyId(value): {
            key_id: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withFirewallPolicyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFirewallPolicyArn(value): {
        firewall_policy_arn: value,
      },
      '#withFirewallPolicyChangeProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withFirewallPolicyChangeProtection(value=true): {
        firewall_policy_change_protection: value,
      },
      '#withFirewallStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFirewallStatus(value): {
        firewall_status:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFirewallStatusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFirewallStatusMixin(value): {
        firewall_status+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      firewall_status+:
        {
          '#': { help: '', name: 'firewall_status' },
          '#withCapacityUsageSummary': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCapacityUsageSummary(value): {
            capacity_usage_summary:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCapacityUsageSummaryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCapacityUsageSummaryMixin(value): {
            capacity_usage_summary+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          capacity_usage_summary+:
            {
              '#': { help: '', name: 'capacity_usage_summary' },
              '#withCidrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCidrs(value): {
                cidrs:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCidrsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCidrsMixin(value): {
                cidrs+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              cidrs+:
                {
                  '#': { help: '', name: 'cidrs' },
                  '#withAvailableCidrCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withAvailableCidrCount(value): {
                    available_cidr_count: value,
                  },
                  '#withIpSetReferences': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIpSetReferences(value): {
                    ip_set_references:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withIpSetReferencesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withIpSetReferencesMixin(value): {
                    ip_set_references+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  ip_set_references+:
                    {
                      '#': { help: '', name: 'ip_set_references' },
                      '#withResolvedCidrCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withResolvedCidrCount(value): {
                        resolved_cidr_count: value,
                      },
                    },
                  '#withUtilizedCidrCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withUtilizedCidrCount(value): {
                    utilized_cidr_count: value,
                  },
                },
            },
          '#withConfigurationSyncStateSummary': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withConfigurationSyncStateSummary(value): {
            configuration_sync_state_summary: value,
          },
          '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStatus(value): {
            status: value,
          },
          '#withSyncStates': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSyncStates(value): {
            sync_states:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSyncStatesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSyncStatesMixin(value): {
            sync_states+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          sync_states+:
            {
              '#': { help: '', name: 'sync_states' },
              '#withAttachment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAttachment(value): {
                attachment:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAttachmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAttachmentMixin(value): {
                attachment+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              attachment+:
                {
                  '#': { help: '', name: 'attachment' },
                  '#withEndpointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withEndpointId(value): {
                    endpoint_id: value,
                  },
                  '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withStatus(value): {
                    status: value,
                  },
                  '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withSubnetId(value): {
                    subnet_id: value,
                  },
                },
              '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAvailabilityZone(value): {
                availability_zone: value,
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSubnetChangeProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSubnetChangeProtection(value=true): {
        subnet_change_protection: value,
      },
      '#withSubnetMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetMapping(value): {
        subnet_mapping:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetMappingMixin(value): {
        subnet_mapping+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      subnet_mapping+:
        {
          '#': { help: '', name: 'subnet_mapping' },
          '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSubnetId(value): {
            subnet_id: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUpdateToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdateToken(value): {
        update_token: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
    },
  aws_networkfirewall_firewall_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_networkfirewall_firewall_policy: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withFirewallPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFirewallPolicy(value): {
        firewall_policy:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFirewallPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFirewallPolicyMixin(value): {
        firewall_policy+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      firewall_policy+:
        {
          '#': { help: '', name: 'firewall_policy' },
          '#withStatefulDefaultActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulDefaultActions(value): {
            stateful_default_actions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatefulDefaultActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulDefaultActionsMixin(value): {
            stateful_default_actions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatefulEngineOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulEngineOptions(value): {
            stateful_engine_options:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatefulEngineOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulEngineOptionsMixin(value): {
            stateful_engine_options+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          stateful_engine_options+:
            {
              '#': { help: '', name: 'stateful_engine_options' },
              '#withRuleOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRuleOrder(value): {
                rule_order: value,
              },
              '#withStreamExceptionPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStreamExceptionPolicy(value): {
                stream_exception_policy: value,
              },
            },
          '#withStatefulRuleGroupReference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulRuleGroupReference(value): {
            stateful_rule_group_reference:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatefulRuleGroupReferenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatefulRuleGroupReferenceMixin(value): {
            stateful_rule_group_reference+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          stateful_rule_group_reference+:
            {
              '#': { help: '', name: 'stateful_rule_group_reference' },
              '#withOverride': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOverride(value): {
                override:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withOverrideMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOverrideMixin(value): {
                override+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              override+:
                {
                  '#': { help: '', name: 'override' },
                  '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withAction(value): {
                    action: value,
                  },
                },
              '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withPriority(value): {
                priority: value,
              },
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                resource_arn: value,
              },
            },
          '#withStatelessCustomAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessCustomAction(value): {
            stateless_custom_action:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatelessCustomActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessCustomActionMixin(value): {
            stateless_custom_action+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          stateless_custom_action+:
            {
              '#': { help: '', name: 'stateless_custom_action' },
              '#withActionDefinition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionDefinition(value): {
                action_definition:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withActionDefinitionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withActionDefinitionMixin(value): {
                action_definition+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              action_definition+:
                {
                  '#': { help: '', name: 'action_definition' },
                  '#withPublishMetricAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPublishMetricAction(value): {
                    publish_metric_action:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withPublishMetricActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withPublishMetricActionMixin(value): {
                    publish_metric_action+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  publish_metric_action+:
                    {
                      '#': { help: '', name: 'publish_metric_action' },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withValue(value): {
                            value: value,
                          },
                        },
                    },
                },
              '#withActionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withActionName(value): {
                action_name: value,
              },
            },
          '#withStatelessDefaultActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessDefaultActions(value): {
            stateless_default_actions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatelessDefaultActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessDefaultActionsMixin(value): {
            stateless_default_actions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatelessFragmentDefaultActions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessFragmentDefaultActions(value): {
            stateless_fragment_default_actions:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatelessFragmentDefaultActionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessFragmentDefaultActionsMixin(value): {
            stateless_fragment_default_actions+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatelessRuleGroupReference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessRuleGroupReference(value): {
            stateless_rule_group_reference:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStatelessRuleGroupReferenceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStatelessRuleGroupReferenceMixin(value): {
            stateless_rule_group_reference+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          stateless_rule_group_reference+:
            {
              '#': { help: '', name: 'stateless_rule_group_reference' },
              '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withPriority(value): {
                priority: value,
              },
              '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceArn(value): {
                resource_arn: value,
              },
            },
          '#withTlsInspectionConfigurationArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTlsInspectionConfigurationArn(value): {
            tls_inspection_configuration_arn: value,
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUpdateToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdateToken(value): {
        update_token: value,
      },
    },
  aws_networkfirewall_resource_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'resource_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, resource_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withResourceArn(resource_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_networkfirewall_resource_policy: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPolicy(value): {
        policy: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceArn(value): {
        resource_arn: value,
      },
    },
}
