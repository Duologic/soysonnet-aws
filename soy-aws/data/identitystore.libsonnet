// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'identitystore',
  },
  aws_identitystore_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'identity_store_id', type: 'string' }], help: '' } },
      new(tf_resource_key, identity_store_id):
        {
          local this = self,
          data: {
            aws_identitystore_group: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withIdentityStoreId(identity_store_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAlternateIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAlternateIdentifier(value): {
        spec+: {
          alternate_identifier: value,
        },
      },
      '#withAlternateIdentifierMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAlternateIdentifierMixin(value): {
        spec+: {
          alternate_identifier+: value,
        },
      },
      alternate_identifier+:
        {
          '#withExternalId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExternalId(value): {
            spec+: {
              alternate_identifier+: {
                external_id: value,
              },
            },
          },
          '#withExternalIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExternalIdMixin(value): {
            spec+: {
              alternate_identifier+: {
                external_id+: value,
              },
            },
          },
          external_id+:
            {
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                spec+: {
                  alternate_identifier+: {
                    external_id+: {
                      id: value,
                    },
                  },
                },
              },
              '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIssuer(value): {
                spec+: {
                  alternate_identifier+: {
                    external_id+: {
                      issuer: value,
                    },
                  },
                },
              },
            },
          '#withUniqueAttribute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUniqueAttribute(value): {
            spec+: {
              alternate_identifier+: {
                unique_attribute: value,
              },
            },
          },
          '#withUniqueAttributeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUniqueAttributeMixin(value): {
            spec+: {
              alternate_identifier+: {
                unique_attribute+: value,
              },
            },
          },
          unique_attribute+:
            {
              '#withAttributePath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttributePath(value): {
                spec+: {
                  alternate_identifier+: {
                    unique_attribute+: {
                      attribute_path: value,
                    },
                  },
                },
              },
              '#withAttributeValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttributeValue(value): {
                spec+: {
                  alternate_identifier+: {
                    unique_attribute+: {
                      attribute_value: value,
                    },
                  },
                },
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDisplayName(value): {
        spec+: {
          display_name: value,
        },
      },
      '#withExternalIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalIds(value): {
        spec+: {
          external_ids:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withExternalIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalIdsMixin(value): {
        spec+: {
          external_ids+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      external_ids+:
        {
          '#': { help: '', name: 'external_ids' },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIssuer(value): {
            issuer: value,
          },
        },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFilter(value): {
        spec+: {
          filter: value,
        },
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFilterMixin(value): {
        spec+: {
          filter+: value,
        },
      },
      filter+:
        {
          '#withAttributePath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAttributePath(value): {
            spec+: {
              filter+: {
                attribute_path: value,
              },
            },
          },
          '#withAttributeValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAttributeValue(value): {
            spec+: {
              filter+: {
                attribute_value: value,
              },
            },
          },
        },
      '#withGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withGroupId(value): {
        spec+: {
          group_id: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIdentityStoreId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIdentityStoreId(value): {
        spec+: {
          identity_store_id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_identitystore_groups:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'identity_store_id', type: 'string' }], help: '' } },
      new(tf_resource_key, identity_store_id):
        {
          local this = self,
          data: {
            aws_identitystore_groups: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withIdentityStoreId(identity_store_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGroups(value): {
        spec+: {
          groups:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGroupsMixin(value): {
        spec+: {
          groups+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      groups+:
        {
          '#': { help: '', name: 'groups' },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            description: value,
          },
          '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDisplayName(value): {
            display_name: value,
          },
          '#withExternalIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExternalIds(value): {
            external_ids:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withExternalIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExternalIdsMixin(value): {
            external_ids+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          external_ids+:
            {
              '#': { help: '', name: 'external_ids' },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIssuer(value): {
                issuer: value,
              },
            },
          '#withGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGroupId(value): {
            group_id: value,
          },
          '#withIdentityStoreId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIdentityStoreId(value): {
            identity_store_id: value,
          },
        },
      '#withIdentityStoreId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIdentityStoreId(value): {
        spec+: {
          identity_store_id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_identitystore_user:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'identity_store_id', type: 'string' }], help: '' } },
      new(tf_resource_key, identity_store_id):
        {
          local this = self,
          data: {
            aws_identitystore_user: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withIdentityStoreId(identity_store_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAddresses(value): {
        spec+: {
          addresses:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAddressesMixin(value): {
        spec+: {
          addresses+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      addresses+:
        {
          '#': { help: '', name: 'addresses' },
          '#withCountry': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCountry(value): {
            country: value,
          },
          '#withFormatted': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFormatted(value): {
            formatted: value,
          },
          '#withLocality': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLocality(value): {
            locality: value,
          },
          '#withPostalCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPostalCode(value): {
            postal_code: value,
          },
          '#withPrimary': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPrimary(value=true): {
            primary: value,
          },
          '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRegion(value): {
            region: value,
          },
          '#withStreetAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStreetAddress(value): {
            street_address: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withAlternateIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAlternateIdentifier(value): {
        spec+: {
          alternate_identifier: value,
        },
      },
      '#withAlternateIdentifierMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withAlternateIdentifierMixin(value): {
        spec+: {
          alternate_identifier+: value,
        },
      },
      alternate_identifier+:
        {
          '#withExternalId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExternalId(value): {
            spec+: {
              alternate_identifier+: {
                external_id: value,
              },
            },
          },
          '#withExternalIdMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withExternalIdMixin(value): {
            spec+: {
              alternate_identifier+: {
                external_id+: value,
              },
            },
          },
          external_id+:
            {
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                spec+: {
                  alternate_identifier+: {
                    external_id+: {
                      id: value,
                    },
                  },
                },
              },
              '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIssuer(value): {
                spec+: {
                  alternate_identifier+: {
                    external_id+: {
                      issuer: value,
                    },
                  },
                },
              },
            },
          '#withUniqueAttribute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUniqueAttribute(value): {
            spec+: {
              alternate_identifier+: {
                unique_attribute: value,
              },
            },
          },
          '#withUniqueAttributeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withUniqueAttributeMixin(value): {
            spec+: {
              alternate_identifier+: {
                unique_attribute+: value,
              },
            },
          },
          unique_attribute+:
            {
              '#withAttributePath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttributePath(value): {
                spec+: {
                  alternate_identifier+: {
                    unique_attribute+: {
                      attribute_path: value,
                    },
                  },
                },
              },
              '#withAttributeValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttributeValue(value): {
                spec+: {
                  alternate_identifier+: {
                    unique_attribute+: {
                      attribute_value: value,
                    },
                  },
                },
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDisplayName(value): {
        spec+: {
          display_name: value,
        },
      },
      '#withEmails': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEmails(value): {
        spec+: {
          emails:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEmailsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEmailsMixin(value): {
        spec+: {
          emails+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      emails+:
        {
          '#': { help: '', name: 'emails' },
          '#withPrimary': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPrimary(value=true): {
            primary: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withExternalIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalIds(value): {
        spec+: {
          external_ids:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withExternalIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExternalIdsMixin(value): {
        spec+: {
          external_ids+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      external_ids+:
        {
          '#': { help: '', name: 'external_ids' },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIssuer(value): {
            issuer: value,
          },
        },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFilter(value): {
        spec+: {
          filter: value,
        },
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFilterMixin(value): {
        spec+: {
          filter+: value,
        },
      },
      filter+:
        {
          '#withAttributePath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAttributePath(value): {
            spec+: {
              filter+: {
                attribute_path: value,
              },
            },
          },
          '#withAttributeValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAttributeValue(value): {
            spec+: {
              filter+: {
                attribute_value: value,
              },
            },
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withIdentityStoreId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIdentityStoreId(value): {
        spec+: {
          identity_store_id: value,
        },
      },
      '#withLocale': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocale(value): {
        spec+: {
          locale: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withName(value): {
        spec+: {
          name:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withNameMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNameMixin(value): {
        spec+: {
          name+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      name+:
        {
          '#': { help: '', name: 'name' },
          '#withFamilyName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFamilyName(value): {
            family_name: value,
          },
          '#withFormatted': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFormatted(value): {
            formatted: value,
          },
          '#withGivenName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGivenName(value): {
            given_name: value,
          },
          '#withHonorificPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHonorificPrefix(value): {
            honorific_prefix: value,
          },
          '#withHonorificSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHonorificSuffix(value): {
            honorific_suffix: value,
          },
          '#withMiddleName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMiddleName(value): {
            middle_name: value,
          },
        },
      '#withNickname': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNickname(value): {
        spec+: {
          nickname: value,
        },
      },
      '#withPhoneNumbers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPhoneNumbers(value): {
        spec+: {
          phone_numbers:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPhoneNumbersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPhoneNumbersMixin(value): {
        spec+: {
          phone_numbers+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      phone_numbers+:
        {
          '#': { help: '', name: 'phone_numbers' },
          '#withPrimary': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withPrimary(value=true): {
            primary: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withPreferredLanguage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreferredLanguage(value): {
        spec+: {
          preferred_language: value,
        },
      },
      '#withProfileUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProfileUrl(value): {
        spec+: {
          profile_url: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTimezone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTimezone(value): {
        spec+: {
          timezone: value,
        },
      },
      '#withTitle': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTitle(value): {
        spec+: {
          title: value,
        },
      },
      '#withUserId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserId(value): {
        spec+: {
          user_id: value,
        },
      },
      '#withUserName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserName(value): {
        spec+: {
          user_name: value,
        },
      },
      '#withUserType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserType(value): {
        spec+: {
          user_type: value,
        },
      },
    },
}
