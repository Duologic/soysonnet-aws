// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'lb',
  },
  aws_lb:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lb: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAccessLogs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAccessLogs(value): {
        access_logs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAccessLogsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAccessLogsMixin(value): {
        access_logs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      access_logs+:
        {
          '#': { help: '', name: 'access_logs' },
          '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucket(value): {
            bucket: value,
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrefix(value): {
            prefix: value,
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withArnSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArnSuffix(value): {
        arn_suffix: value,
      },
      '#withClientKeepAlive': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withClientKeepAlive(value): {
        client_keep_alive: value,
      },
      '#withConnectionLogs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConnectionLogs(value): {
        connection_logs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withConnectionLogsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConnectionLogsMixin(value): {
        connection_logs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      connection_logs+:
        {
          '#': { help: '', name: 'connection_logs' },
          '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucket(value): {
            bucket: value,
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrefix(value): {
            prefix: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomerOwnedIpv4Pool': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCustomerOwnedIpv4Pool(value): {
        customer_owned_ipv4_pool: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDesyncMitigationMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDesyncMitigationMode(value): {
        desync_mitigation_mode: value,
      },
      '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDnsName(value): {
        dns_name: value,
      },
      '#withDnsRecordClientRoutingPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDnsRecordClientRoutingPolicy(value): {
        dns_record_client_routing_policy: value,
      },
      '#withDropInvalidHeaderFields': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDropInvalidHeaderFields(value=true): {
        drop_invalid_header_fields: value,
      },
      '#withEnableCrossZoneLoadBalancing': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableCrossZoneLoadBalancing(value=true): {
        enable_cross_zone_load_balancing: value,
      },
      '#withEnableDeletionProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableDeletionProtection(value=true): {
        enable_deletion_protection: value,
      },
      '#withEnableHttp2': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableHttp2(value=true): {
        enable_http2: value,
      },
      '#withEnableTlsVersionAndCipherSuiteHeaders': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableTlsVersionAndCipherSuiteHeaders(value=true): {
        enable_tls_version_and_cipher_suite_headers: value,
      },
      '#withEnableWafFailOpen': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableWafFailOpen(value=true): {
        enable_waf_fail_open: value,
      },
      '#withEnableXffClientPort': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableXffClientPort(value=true): {
        enable_xff_client_port: value,
      },
      '#withEnableZonalShift': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnableZonalShift(value=true): {
        enable_zonal_shift: value,
      },
      '#withEnforceSecurityGroupInboundRulesOnPrivateLinkTraffic': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEnforceSecurityGroupInboundRulesOnPrivateLinkTraffic(value): {
        enforce_security_group_inbound_rules_on_private_link_traffic: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIdleTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withIdleTimeout(value): {
        idle_timeout: value,
      },
      '#withInternal': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInternal(value=true): {
        internal: value,
      },
      '#withIpAddressType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIpAddressType(value): {
        ip_address_type: value,
      },
      '#withLoadBalancerType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLoadBalancerType(value): {
        load_balancer_type: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withPreserveHostHeader': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPreserveHostHeader(value=true): {
        preserve_host_header: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroups(value): {
        security_groups:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupsMixin(value): {
        security_groups+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetMapping': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetMapping(value): {
        subnet_mapping:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetMappingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetMappingMixin(value): {
        subnet_mapping+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      subnet_mapping+:
        {
          '#': { help: '', name: 'subnet_mapping' },
          '#withAllocationId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAllocationId(value): {
            allocation_id: value,
          },
          '#withIpv6Address': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIpv6Address(value): {
            ipv6_address: value,
          },
          '#withOutpostId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withOutpostId(value): {
            outpost_id: value,
          },
          '#withPrivateIpv4Address': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrivateIpv4Address(value): {
            private_ipv4_address: value,
          },
          '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSubnetId(value): {
            subnet_id: value,
          },
        },
      '#withSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnets(value): {
        subnets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetsMixin(value): {
        subnets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
      '#withXffHeaderProcessingMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withXffHeaderProcessingMode(value): {
        xff_header_processing_mode: value,
      },
      '#withZoneId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withZoneId(value): {
        zone_id: value,
      },
    },
  aws_lb_hosted_zone_id:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lb_hosted_zone_id: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLoadBalancerType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLoadBalancerType(value): {
        load_balancer_type: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRegion(value): {
        region: value,
      },
    },
  aws_lb_listener:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lb_listener: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAlpnPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAlpnPolicy(value): {
        alpn_policy: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCertificateArn(value): {
        certificate_arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDefaultAction(value): {
        default_action:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDefaultActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDefaultActionMixin(value): {
        default_action+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      default_action+:
        {
          '#': { help: '', name: 'default_action' },
          '#withAuthenticateCognito': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAuthenticateCognito(value): {
            authenticate_cognito:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAuthenticateCognitoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAuthenticateCognitoMixin(value): {
            authenticate_cognito+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          authenticate_cognito+:
            {
              '#': { help: '', name: 'authenticate_cognito' },
              '#withAuthenticationRequestExtraParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParams(value): {
                authentication_request_extra_params: value,
              },
              '#withAuthenticationRequestExtraParamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParamsMixin(value): {
                authentication_request_extra_params+: value,
              },
              '#withOnUnauthenticatedRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnUnauthenticatedRequest(value): {
                on_unauthenticated_request: value,
              },
              '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withScope(value): {
                scope: value,
              },
              '#withSessionCookieName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSessionCookieName(value): {
                session_cookie_name: value,
              },
              '#withSessionTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withSessionTimeout(value): {
                session_timeout: value,
              },
              '#withUserPoolArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserPoolArn(value): {
                user_pool_arn: value,
              },
              '#withUserPoolClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserPoolClientId(value): {
                user_pool_client_id: value,
              },
              '#withUserPoolDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserPoolDomain(value): {
                user_pool_domain: value,
              },
            },
          '#withAuthenticateOidc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAuthenticateOidc(value): {
            authenticate_oidc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAuthenticateOidcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAuthenticateOidcMixin(value): {
            authenticate_oidc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          authenticate_oidc+:
            {
              '#': { help: '', name: 'authenticate_oidc' },
              '#withAuthenticationRequestExtraParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParams(value): {
                authentication_request_extra_params: value,
              },
              '#withAuthenticationRequestExtraParamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParamsMixin(value): {
                authentication_request_extra_params+: value,
              },
              '#withAuthorizationEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAuthorizationEndpoint(value): {
                authorization_endpoint: value,
              },
              '#withClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withClientId(value): {
                client_id: value,
              },
              '#withClientSecret': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withClientSecret(value): {
                client_secret: value,
              },
              '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIssuer(value): {
                issuer: value,
              },
              '#withOnUnauthenticatedRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnUnauthenticatedRequest(value): {
                on_unauthenticated_request: value,
              },
              '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withScope(value): {
                scope: value,
              },
              '#withSessionCookieName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSessionCookieName(value): {
                session_cookie_name: value,
              },
              '#withSessionTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withSessionTimeout(value): {
                session_timeout: value,
              },
              '#withTokenEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTokenEndpoint(value): {
                token_endpoint: value,
              },
              '#withUserInfoEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserInfoEndpoint(value): {
                user_info_endpoint: value,
              },
            },
          '#withFixedResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFixedResponse(value): {
            fixed_response:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFixedResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFixedResponseMixin(value): {
            fixed_response+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          fixed_response+:
            {
              '#': { help: '', name: 'fixed_response' },
              '#withContentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentType(value): {
                content_type: value,
              },
              '#withMessageBody': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMessageBody(value): {
                message_body: value,
              },
              '#withStatusCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStatusCode(value): {
                status_code: value,
              },
            },
          '#withForward': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withForward(value): {
            forward:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withForwardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withForwardMixin(value): {
            forward+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          forward+:
            {
              '#': { help: '', name: 'forward' },
              '#withStickiness': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStickiness(value): {
                stickiness:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withStickinessMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withStickinessMixin(value): {
                stickiness+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              stickiness+:
                {
                  '#': { help: '', name: 'stickiness' },
                  '#withDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDuration(value): {
                    duration: value,
                  },
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    enabled: value,
                  },
                },
              '#withTargetGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTargetGroup(value): {
                target_group:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTargetGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTargetGroupMixin(value): {
                target_group+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              target_group+:
                {
                  '#': { help: '', name: 'target_group' },
                  '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withArn(value): {
                    arn: value,
                  },
                  '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withWeight(value): {
                    weight: value,
                  },
                },
            },
          '#withOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withOrder(value): {
            order: value,
          },
          '#withRedirect': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRedirect(value): {
            redirect:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRedirectMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRedirectMixin(value): {
            redirect+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          redirect+:
            {
              '#': { help: '', name: 'redirect' },
              '#withHost': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withHost(value): {
                host: value,
              },
              '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPath(value): {
                path: value,
              },
              '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPort(value): {
                port: value,
              },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withQuery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withQuery(value): {
                query: value,
              },
              '#withStatusCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStatusCode(value): {
                status_code: value,
              },
            },
          '#withTargetGroupArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTargetGroupArn(value): {
            target_group_arn: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLoadBalancerArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLoadBalancerArn(value): {
        load_balancer_arn: value,
      },
      '#withMutualAuthentication': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMutualAuthentication(value): {
        mutual_authentication:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMutualAuthenticationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMutualAuthenticationMixin(value): {
        mutual_authentication+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      mutual_authentication+:
        {
          '#': { help: '', name: 'mutual_authentication' },
          '#withAdvertiseTrustStoreCaNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAdvertiseTrustStoreCaNames(value): {
            advertise_trust_store_ca_names: value,
          },
          '#withIgnoreClientCertificateExpiry': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIgnoreClientCertificateExpiry(value=true): {
            ignore_client_certificate_expiry: value,
          },
          '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMode(value): {
            mode: value,
          },
          '#withTrustStoreArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTrustStoreArn(value): {
            trust_store_arn: value,
          },
        },
      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPort(value): {
        port: value,
      },
      '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProtocol(value): {
        protocol: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSslPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSslPolicy(value): {
        ssl_policy: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_lb_listener_rule:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lb_listener_rule: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAction(value): {
        action:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withActionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withActionMixin(value): {
        action+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      action+:
        {
          '#': { help: '', name: 'action' },
          '#withAuthenticateCognito': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticateCognito(value): {
            authenticate_cognito: value,
          },
          '#withAuthenticateCognitoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticateCognitoMixin(value): {
            authenticate_cognito+: value,
          },
          authenticate_cognito+:
            {
              '#withAuthenticationRequestExtraParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParams(value): {
                authenticate_cognito+: {
                  authentication_request_extra_params: value,
                },
              },
              '#withAuthenticationRequestExtraParamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParamsMixin(value): {
                authenticate_cognito+: {
                  authentication_request_extra_params+: value,
                },
              },
              '#withOnUnauthenticatedRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnUnauthenticatedRequest(value): {
                authenticate_cognito+: {
                  on_unauthenticated_request: value,
                },
              },
              '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withScope(value): {
                authenticate_cognito+: {
                  scope: value,
                },
              },
              '#withSessionCookieName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSessionCookieName(value): {
                authenticate_cognito+: {
                  session_cookie_name: value,
                },
              },
              '#withSessionTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withSessionTimeout(value): {
                authenticate_cognito+: {
                  session_timeout: value,
                },
              },
              '#withUserPoolArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserPoolArn(value): {
                authenticate_cognito+: {
                  user_pool_arn: value,
                },
              },
              '#withUserPoolClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserPoolClientId(value): {
                authenticate_cognito+: {
                  user_pool_client_id: value,
                },
              },
              '#withUserPoolDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserPoolDomain(value): {
                authenticate_cognito+: {
                  user_pool_domain: value,
                },
              },
            },
          '#withAuthenticateOidc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticateOidc(value): {
            authenticate_oidc: value,
          },
          '#withAuthenticateOidcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withAuthenticateOidcMixin(value): {
            authenticate_oidc+: value,
          },
          authenticate_oidc+:
            {
              '#withAuthenticationRequestExtraParams': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParams(value): {
                authenticate_oidc+: {
                  authentication_request_extra_params: value,
                },
              },
              '#withAuthenticationRequestExtraParamsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withAuthenticationRequestExtraParamsMixin(value): {
                authenticate_oidc+: {
                  authentication_request_extra_params+: value,
                },
              },
              '#withAuthorizationEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAuthorizationEndpoint(value): {
                authenticate_oidc+: {
                  authorization_endpoint: value,
                },
              },
              '#withClientId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withClientId(value): {
                authenticate_oidc+: {
                  client_id: value,
                },
              },
              '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIssuer(value): {
                authenticate_oidc+: {
                  issuer: value,
                },
              },
              '#withOnUnauthenticatedRequest': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOnUnauthenticatedRequest(value): {
                authenticate_oidc+: {
                  on_unauthenticated_request: value,
                },
              },
              '#withScope': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withScope(value): {
                authenticate_oidc+: {
                  scope: value,
                },
              },
              '#withSessionCookieName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSessionCookieName(value): {
                authenticate_oidc+: {
                  session_cookie_name: value,
                },
              },
              '#withSessionTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withSessionTimeout(value): {
                authenticate_oidc+: {
                  session_timeout: value,
                },
              },
              '#withTokenEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTokenEndpoint(value): {
                authenticate_oidc+: {
                  token_endpoint: value,
                },
              },
              '#withUserInfoEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserInfoEndpoint(value): {
                authenticate_oidc+: {
                  user_info_endpoint: value,
                },
              },
            },
          '#withFixedResponse': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFixedResponse(value): {
            fixed_response: value,
          },
          '#withFixedResponseMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withFixedResponseMixin(value): {
            fixed_response+: value,
          },
          fixed_response+:
            {
              '#withContentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentType(value): {
                fixed_response+: {
                  content_type: value,
                },
              },
              '#withMessageBody': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withMessageBody(value): {
                fixed_response+: {
                  message_body: value,
                },
              },
              '#withStatusCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStatusCode(value): {
                fixed_response+: {
                  status_code: value,
                },
              },
            },
          '#withForward': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withForward(value): {
            forward: value,
          },
          '#withForwardMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withForwardMixin(value): {
            forward+: value,
          },
          forward+:
            {
              '#withStickiness': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withStickiness(value): {
                forward+: {
                  stickiness: value,
                },
              },
              '#withStickinessMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withStickinessMixin(value): {
                forward+: {
                  stickiness+: value,
                },
              },
              stickiness+:
                {
                  '#withDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withDuration(value): {
                    forward+: {
                      stickiness+: {
                        duration: value,
                      },
                    },
                  },
                  '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                  withEnabled(value=true): {
                    forward+: {
                      stickiness+: {
                        enabled: value,
                      },
                    },
                  },
                },
              '#withTargetGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTargetGroup(value): {
                forward+: {
                  target_group:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withTargetGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTargetGroupMixin(value): {
                forward+: {
                  target_group+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              target_group+:
                {
                  '#': { help: '', name: 'target_group' },
                  '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withArn(value): {
                    arn: value,
                  },
                  '#withWeight': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withWeight(value): {
                    weight: value,
                  },
                },
            },
          '#withOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withOrder(value): {
            order: value,
          },
          '#withRedirect': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRedirect(value): {
            redirect: value,
          },
          '#withRedirectMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withRedirectMixin(value): {
            redirect+: value,
          },
          redirect+:
            {
              '#withHost': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withHost(value): {
                redirect+: {
                  host: value,
                },
              },
              '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPath(value): {
                redirect+: {
                  path: value,
                },
              },
              '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPort(value): {
                redirect+: {
                  port: value,
                },
              },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                redirect+: {
                  protocol: value,
                },
              },
              '#withQuery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withQuery(value): {
                redirect+: {
                  query: value,
                },
              },
              '#withStatusCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStatusCode(value): {
                redirect+: {
                  status_code: value,
                },
              },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCondition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCondition(value): {
        condition:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withConditionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConditionMixin(value): {
        condition+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      condition+:
        {
          '#': { help: '', name: 'condition' },
          '#withHostHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHostHeader(value): {
            host_header: value,
          },
          '#withHostHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHostHeaderMixin(value): {
            host_header+: value,
          },
          host_header+:
            {
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                host_header+: {
                  values:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                host_header+: {
                  values+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
            },
          '#withHttpHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpHeader(value): {
            http_header: value,
          },
          '#withHttpHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpHeaderMixin(value): {
            http_header+: value,
          },
          http_header+:
            {
              '#withHttpHeaderName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withHttpHeaderName(value): {
                http_header+: {
                  http_header_name: value,
                },
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                http_header+: {
                  values:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                http_header+: {
                  values+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
            },
          '#withHttpRequestMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpRequestMethod(value): {
            http_request_method: value,
          },
          '#withHttpRequestMethodMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withHttpRequestMethodMixin(value): {
            http_request_method+: value,
          },
          http_request_method+:
            {
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                http_request_method+: {
                  values:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                http_request_method+: {
                  values+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
            },
          '#withPathPattern': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPathPattern(value): {
            path_pattern: value,
          },
          '#withPathPatternMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withPathPatternMixin(value): {
            path_pattern+: value,
          },
          path_pattern+:
            {
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                path_pattern+: {
                  values:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                path_pattern+: {
                  values+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
            },
          '#withQueryString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withQueryString(value): {
            query_string: value,
          },
          '#withQueryStringMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withQueryStringMixin(value): {
            query_string+: value,
          },
          query_string+:
            {
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                query_string+: {
                  values:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                query_string+: {
                  values+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              values+:
                {
                  '#': { help: '', name: 'values' },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                  '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withValue(value): {
                    value: value,
                  },
                },
            },
          '#withSourceIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSourceIp(value): {
            source_ip: value,
          },
          '#withSourceIpMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withSourceIpMixin(value): {
            source_ip+: value,
          },
          source_ip+:
            {
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                source_ip+: {
                  values:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                source_ip+: {
                  values+:
                    (if std.isArray(value)
                     then value
                     else [value]),
                },
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withListenerArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withListenerArn(value): {
        listener_arn: value,
      },
      '#withPriority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPriority(value): {
        priority: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
  aws_lb_target_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lb_target_group: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withArnSuffix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArnSuffix(value): {
        arn_suffix: value,
      },
      '#withConnectionTermination': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withConnectionTermination(value=true): {
        connection_termination: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDeregistrationDelay': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDeregistrationDelay(value): {
        deregistration_delay: value,
      },
      '#withHealthCheck': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHealthCheck(value): {
        health_check:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHealthCheckMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHealthCheckMixin(value): {
        health_check+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      health_check+:
        {
          '#': { help: '', name: 'health_check' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withHealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withHealthyThreshold(value): {
            healthy_threshold: value,
          },
          '#withInterval': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withInterval(value): {
            interval: value,
          },
          '#withMatcher': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMatcher(value): {
            matcher: value,
          },
          '#withPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPath(value): {
            path: value,
          },
          '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPort(value): {
            port: value,
          },
          '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withProtocol(value): {
            protocol: value,
          },
          '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withTimeout(value): {
            timeout: value,
          },
          '#withUnhealthyThreshold': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withUnhealthyThreshold(value): {
            unhealthy_threshold: value,
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLambdaMultiValueHeadersEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withLambdaMultiValueHeadersEnabled(value=true): {
        lambda_multi_value_headers_enabled: value,
      },
      '#withLoadBalancerArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLoadBalancerArns(value): {
        load_balancer_arns:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLoadBalancerArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLoadBalancerArnsMixin(value): {
        load_balancer_arns+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLoadBalancingAlgorithmType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLoadBalancingAlgorithmType(value): {
        load_balancing_algorithm_type: value,
      },
      '#withLoadBalancingAnomalyMitigation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLoadBalancingAnomalyMitigation(value): {
        load_balancing_anomaly_mitigation: value,
      },
      '#withLoadBalancingCrossZoneEnabled': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLoadBalancingCrossZoneEnabled(value): {
        load_balancing_cross_zone_enabled: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPort(value): {
        port: value,
      },
      '#withPreserveClientIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPreserveClientIp(value): {
        preserve_client_ip: value,
      },
      '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProtocol(value): {
        protocol: value,
      },
      '#withProtocolVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProtocolVersion(value): {
        protocol_version: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withProxyProtocolV2': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withProxyProtocolV2(value=true): {
        proxy_protocol_v2: value,
      },
      '#withSlowStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSlowStart(value): {
        slow_start: value,
      },
      '#withStickiness': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStickiness(value): {
        stickiness:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStickinessMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStickinessMixin(value): {
        stickiness+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      stickiness+:
        {
          '#': { help: '', name: 'stickiness' },
          '#withCookieDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCookieDuration(value): {
            cookie_duration: value,
          },
          '#withCookieName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCookieName(value): {
            cookie_name: value,
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTargetType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTargetType(value): {
        target_type: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
    },
  aws_lb_trust_store:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_lb_trust_store: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
}
