// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'lambda',
  },
  aws_lambda_alias:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'function_name', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, function_name, name):
        {
          local this = self,
          data: {
            aws_lambda_alias: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withFunctionName(function_name)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withFunctionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFunctionName(value): {
        spec+: {
          function_name: value,
        },
      },
      '#withFunctionVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFunctionVersion(value): {
        spec+: {
          function_version: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withInvokeArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInvokeArn(value): {
        spec+: {
          invoke_arn: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_lambda_code_signing_config:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        {
          local this = self,
          data: {
            aws_lambda_code_signing_config: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAllowedPublishers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedPublishers(value): {
        spec+: {
          allowed_publishers:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withAllowedPublishersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAllowedPublishersMixin(value): {
        spec+: {
          allowed_publishers+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      allowed_publishers+:
        {
          '#': { help: '', name: 'allowed_publishers' },
          '#withSigningProfileVersionArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSigningProfileVersionArns(value): {
            signing_profile_version_arns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSigningProfileVersionArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSigningProfileVersionArnsMixin(value): {
            signing_profile_version_arns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withConfigId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withConfigId(value): {
        spec+: {
          config_id: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLastModified': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModified(value): {
        spec+: {
          last_modified: value,
        },
      },
      '#withPolicies': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPolicies(value): {
        spec+: {
          policies:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPoliciesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoliciesMixin(value): {
        spec+: {
          policies+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      policies+:
        {
          '#': { help: '', name: 'policies' },
          '#withUntrustedArtifactOnDeployment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUntrustedArtifactOnDeployment(value): {
            untrusted_artifact_on_deployment: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_lambda_function:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'function_name', type: 'string' }], help: '' } },
      new(tf_resource_key, function_name):
        {
          local this = self,
          data: {
            aws_lambda_function: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withFunctionName(function_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArchitectures': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArchitectures(value): {
        spec+: {
          architectures:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withArchitecturesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArchitecturesMixin(value): {
        spec+: {
          architectures+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCodeSha256': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCodeSha256(value): {
        spec+: {
          code_sha256: value,
        },
      },
      '#withCodeSigningConfigArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCodeSigningConfigArn(value): {
        spec+: {
          code_signing_config_arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDeadLetterConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDeadLetterConfig(value): {
        spec+: {
          dead_letter_config:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDeadLetterConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDeadLetterConfigMixin(value): {
        spec+: {
          dead_letter_config+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      dead_letter_config+:
        {
          '#': { help: '', name: 'dead_letter_config' },
          '#withTargetArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTargetArn(value): {
            target_arn: value,
          },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withEnvironment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnvironment(value): {
        spec+: {
          environment:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEnvironmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnvironmentMixin(value): {
        spec+: {
          environment+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      environment+:
        {
          '#': { help: '', name: 'environment' },
          '#withVariables': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVariables(value): {
            variables: value,
          },
          '#withVariablesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withVariablesMixin(value): {
            variables+: value,
          },
        },
      '#withEphemeralStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralStorage(value): {
        spec+: {
          ephemeral_storage:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withEphemeralStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEphemeralStorageMixin(value): {
        spec+: {
          ephemeral_storage+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      ephemeral_storage+:
        {
          '#': { help: '', name: 'ephemeral_storage' },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
        },
      '#withFileSystemConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFileSystemConfig(value): {
        spec+: {
          file_system_config:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFileSystemConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFileSystemConfigMixin(value): {
        spec+: {
          file_system_config+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      file_system_config+:
        {
          '#': { help: '', name: 'file_system_config' },
          '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withArn(value): {
            arn: value,
          },
          '#withLocalMountPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLocalMountPath(value): {
            local_mount_path: value,
          },
        },
      '#withFunctionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFunctionName(value): {
        spec+: {
          function_name: value,
        },
      },
      '#withHandler': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHandler(value): {
        spec+: {
          handler: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withImageUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withImageUri(value): {
        spec+: {
          image_uri: value,
        },
      },
      '#withInvokeArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInvokeArn(value): {
        spec+: {
          invoke_arn: value,
        },
      },
      '#withKmsKeyArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKmsKeyArn(value): {
        spec+: {
          kms_key_arn: value,
        },
      },
      '#withLastModified': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModified(value): {
        spec+: {
          last_modified: value,
        },
      },
      '#withLayers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLayers(value): {
        spec+: {
          layers:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withLayersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLayersMixin(value): {
        spec+: {
          layers+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withLoggingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLoggingConfig(value): {
        spec+: {
          logging_config:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withLoggingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLoggingConfigMixin(value): {
        spec+: {
          logging_config+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      logging_config+:
        {
          '#': { help: '', name: 'logging_config' },
          '#withApplicationLogLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withApplicationLogLevel(value): {
            application_log_level: value,
          },
          '#withLogFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLogFormat(value): {
            log_format: value,
          },
          '#withLogGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLogGroup(value): {
            log_group: value,
          },
          '#withSystemLogLevel': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSystemLogLevel(value): {
            system_log_level: value,
          },
        },
      '#withMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMemorySize(value): {
        spec+: {
          memory_size: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withQualifiedArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQualifiedArn(value): {
        spec+: {
          qualified_arn: value,
        },
      },
      '#withQualifiedInvokeArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQualifiedInvokeArn(value): {
        spec+: {
          qualified_invoke_arn: value,
        },
      },
      '#withQualifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQualifier(value): {
        spec+: {
          qualifier: value,
        },
      },
      '#withReservedConcurrentExecutions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withReservedConcurrentExecutions(value): {
        spec+: {
          reserved_concurrent_executions: value,
        },
      },
      '#withRole': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRole(value): {
        spec+: {
          role: value,
        },
      },
      '#withRuntime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRuntime(value): {
        spec+: {
          runtime: value,
        },
      },
      '#withSigningJobArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSigningJobArn(value): {
        spec+: {
          signing_job_arn: value,
        },
      },
      '#withSigningProfileVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSigningProfileVersionArn(value): {
        spec+: {
          signing_profile_version_arn: value,
        },
      },
      '#withSourceCodeHash': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSourceCodeHash(value): {
        spec+: {
          source_code_hash: value,
        },
      },
      '#withSourceCodeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSourceCodeSize(value): {
        spec+: {
          source_code_size: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTimeout': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTimeout(value): {
        spec+: {
          timeout: value,
        },
      },
      '#withTracingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTracingConfig(value): {
        spec+: {
          tracing_config:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTracingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTracingConfigMixin(value): {
        spec+: {
          tracing_config+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      tracing_config+:
        {
          '#': { help: '', name: 'tracing_config' },
          '#withMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMode(value): {
            mode: value,
          },
        },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        spec+: {
          version: value,
        },
      },
      '#withVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcConfig(value): {
        spec+: {
          vpc_config:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcConfigMixin(value): {
        spec+: {
          vpc_config+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      vpc_config+:
        {
          '#': { help: '', name: 'vpc_config' },
          '#withIpv6AllowedForDualStack': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withIpv6AllowedForDualStack(value=true): {
            ipv6_allowed_for_dual_stack: value,
          },
          '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIds(value): {
            security_group_ids:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIdsMixin(value): {
            security_group_ids+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetIds(value): {
            subnet_ids:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetIdsMixin(value): {
            subnet_ids+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVpcId(value): {
            vpc_id: value,
          },
        },
    },
  aws_lambda_function_url:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'function_name', type: 'string' }], help: '' } },
      new(tf_resource_key, function_name):
        {
          local this = self,
          data: {
            aws_lambda_function_url: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withFunctionName(function_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withAuthorizationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAuthorizationType(value): {
        spec+: {
          authorization_type: value,
        },
      },
      '#withCors': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCors(value): {
        spec+: {
          cors:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCorsMixin(value): {
        spec+: {
          cors+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      cors+:
        {
          '#': { help: '', name: 'cors' },
          '#withAllowCredentials': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAllowCredentials(value=true): {
            allow_credentials: value,
          },
          '#withAllowHeaders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowHeaders(value): {
            allow_headers:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAllowHeadersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowHeadersMixin(value): {
            allow_headers+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAllowMethods': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowMethods(value): {
            allow_methods:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAllowMethodsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowMethodsMixin(value): {
            allow_methods+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAllowOrigins': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowOrigins(value): {
            allow_origins:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAllowOriginsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAllowOriginsMixin(value): {
            allow_origins+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withExposeHeaders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExposeHeaders(value): {
            expose_headers:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withExposeHeadersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withExposeHeadersMixin(value): {
            expose_headers+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMaxAge': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxAge(value): {
            max_age: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreationTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreationTime(value): {
        spec+: {
          creation_time: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFunctionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFunctionArn(value): {
        spec+: {
          function_arn: value,
        },
      },
      '#withFunctionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFunctionName(value): {
        spec+: {
          function_name: value,
        },
      },
      '#withFunctionUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFunctionUrl(value): {
        spec+: {
          function_url: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withInvokeMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInvokeMode(value): {
        spec+: {
          invoke_mode: value,
        },
      },
      '#withLastModifiedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModifiedTime(value): {
        spec+: {
          last_modified_time: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withQualifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQualifier(value): {
        spec+: {
          qualifier: value,
        },
      },
      '#withUrlId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUrlId(value): {
        spec+: {
          url_id: value,
        },
      },
    },
  aws_lambda_functions:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          data: {
            aws_lambda_functions: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFunctionArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFunctionArns(value): {
        spec+: {
          function_arns:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFunctionArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFunctionArnsMixin(value): {
        spec+: {
          function_arns+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFunctionNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFunctionNames(value): {
        spec+: {
          function_names:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFunctionNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFunctionNamesMixin(value): {
        spec+: {
          function_names+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_lambda_invocation:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'function_name', type: 'string' }, { default: null, enums: null, name: 'input', type: 'string' }], help: '' } },
      new(tf_resource_key, function_name, input):
        {
          local this = self,
          data: {
            aws_lambda_invocation: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withFunctionName(function_name)
        + self.withInput(input),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFunctionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFunctionName(value): {
        spec+: {
          function_name: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withInput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInput(value): {
        spec+: {
          input: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withQualifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQualifier(value): {
        spec+: {
          qualifier: value,
        },
      },
      '#withResult': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResult(value): {
        spec+: {
          result: value,
        },
      },
    },
  aws_lambda_layer_version:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'layer_name', type: 'string' }], help: '' } },
      new(tf_resource_key, layer_name):
        {
          local this = self,
          data: {
            aws_lambda_layer_version: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withLayerName(layer_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCodeSha256': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCodeSha256(value): {
        spec+: {
          code_sha256: value,
        },
      },
      '#withCompatibleArchitecture': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCompatibleArchitecture(value): {
        spec+: {
          compatible_architecture: value,
        },
      },
      '#withCompatibleArchitectures': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCompatibleArchitectures(value): {
        spec+: {
          compatible_architectures:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCompatibleArchitecturesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCompatibleArchitecturesMixin(value): {
        spec+: {
          compatible_architectures+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCompatibleRuntime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCompatibleRuntime(value): {
        spec+: {
          compatible_runtime: value,
        },
      },
      '#withCompatibleRuntimes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCompatibleRuntimes(value): {
        spec+: {
          compatible_runtimes:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCompatibleRuntimesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCompatibleRuntimesMixin(value): {
        spec+: {
          compatible_runtimes+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedDate(value): {
        spec+: {
          created_date: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withLayerArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLayerArn(value): {
        spec+: {
          layer_arn: value,
        },
      },
      '#withLayerName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLayerName(value): {
        spec+: {
          layer_name: value,
        },
      },
      '#withLicenseInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLicenseInfo(value): {
        spec+: {
          license_info: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSigningJobArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSigningJobArn(value): {
        spec+: {
          signing_job_arn: value,
        },
      },
      '#withSigningProfileVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSigningProfileVersionArn(value): {
        spec+: {
          signing_profile_version_arn: value,
        },
      },
      '#withSourceCodeHash': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSourceCodeHash(value): {
        spec+: {
          source_code_hash: value,
        },
      },
      '#withSourceCodeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSourceCodeSize(value): {
        spec+: {
          source_code_size: value,
        },
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withVersion(value): {
        spec+: {
          version: value,
        },
      },
    },
}
