// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'signer',
  },
  aws_signer_signing_job:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'job_id', type: 'string' }], help: '' } },
      new(tf_resource_key, job_id):
        {
          local this = self,
          data: {
            aws_signer_signing_job: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withJobId(job_id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCompletedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCompletedAt(value): {
        spec+: {
          completed_at: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        spec+: {
          created_at: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withJobId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJobId(value): {
        spec+: {
          job_id: value,
        },
      },
      '#withJobInvoker': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJobInvoker(value): {
        spec+: {
          job_invoker: value,
        },
      },
      '#withJobOwner': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withJobOwner(value): {
        spec+: {
          job_owner: value,
        },
      },
      '#withPlatformDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatformDisplayName(value): {
        spec+: {
          platform_display_name: value,
        },
      },
      '#withPlatformId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatformId(value): {
        spec+: {
          platform_id: value,
        },
      },
      '#withProfileName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProfileName(value): {
        spec+: {
          profile_name: value,
        },
      },
      '#withProfileVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProfileVersion(value): {
        spec+: {
          profile_version: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRequestedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRequestedBy(value): {
        spec+: {
          requested_by: value,
        },
      },
      '#withRevocationRecord': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRevocationRecord(value): {
        spec+: {
          revocation_record:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRevocationRecordMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRevocationRecordMixin(value): {
        spec+: {
          revocation_record+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      revocation_record+:
        {
          '#': { help: '', name: 'revocation_record' },
          '#withReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withReason(value): {
            reason: value,
          },
          '#withRevokedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRevokedAt(value): {
            revoked_at: value,
          },
          '#withRevokedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRevokedBy(value): {
            revoked_by: value,
          },
        },
      '#withSignatureExpiresAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSignatureExpiresAt(value): {
        spec+: {
          signature_expires_at: value,
        },
      },
      '#withSignedObject': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSignedObject(value): {
        spec+: {
          signed_object:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSignedObjectMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSignedObjectMixin(value): {
        spec+: {
          signed_object+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      signed_object+:
        {
          '#': { help: '', name: 'signed_object' },
          '#withS3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3(value): {
            s3:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withS3Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3Mixin(value): {
            s3+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          s3+:
            {
              '#': { help: '', name: 's3' },
              '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucket(value): {
                bucket: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
            },
        },
      '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSource(value): {
        spec+: {
          source:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSourceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSourceMixin(value): {
        spec+: {
          source+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      source+:
        {
          '#': { help: '', name: 'source' },
          '#withS3': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3(value): {
            s3:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withS3Mixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withS3Mixin(value): {
            s3+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          s3+:
            {
              '#': { help: '', name: 's3' },
              '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withBucket(value): {
                bucket: value,
              },
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                key: value,
              },
              '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVersion(value): {
                version: value,
              },
            },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withStatusReason': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatusReason(value): {
        spec+: {
          status_reason: value,
        },
      },
    },
  aws_signer_signing_profile:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        {
          local this = self,
          data: {
            aws_signer_signing_profile: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withPlatformDisplayName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatformDisplayName(value): {
        spec+: {
          platform_display_name: value,
        },
      },
      '#withPlatformId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatformId(value): {
        spec+: {
          platform_id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withRevocationRecord': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRevocationRecord(value): {
        spec+: {
          revocation_record:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withRevocationRecordMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRevocationRecordMixin(value): {
        spec+: {
          revocation_record+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      revocation_record+:
        {
          '#': { help: '', name: 'revocation_record' },
          '#withRevocationEffectiveFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRevocationEffectiveFrom(value): {
            revocation_effective_from: value,
          },
          '#withRevokedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRevokedAt(value): {
            revoked_at: value,
          },
          '#withRevokedBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRevokedBy(value): {
            revoked_by: value,
          },
        },
      '#withSignatureValidityPeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSignatureValidityPeriod(value): {
        spec+: {
          signature_validity_period:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSignatureValidityPeriodMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSignatureValidityPeriodMixin(value): {
        spec+: {
          signature_validity_period+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      signature_validity_period+:
        {
          '#': { help: '', name: 'signature_validity_period' },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        spec+: {
          version: value,
        },
      },
      '#withVersionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersionArn(value): {
        spec+: {
          version_arn: value,
        },
      },
    },
}
