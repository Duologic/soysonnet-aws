// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'cloudfront',
  },
  aws_cloudfront_cache_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_cache_policy: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComment(value): {
        comment: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultTtl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultTtl(value): {
        default_ttl: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withMaxTtl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxTtl(value): {
        max_ttl: value,
      },
      '#withMinTtl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMinTtl(value): {
        min_ttl: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withParametersInCacheKeyAndForwardedToOrigin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withParametersInCacheKeyAndForwardedToOrigin(value): {
        parameters_in_cache_key_and_forwarded_to_origin:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withParametersInCacheKeyAndForwardedToOriginMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withParametersInCacheKeyAndForwardedToOriginMixin(value): {
        parameters_in_cache_key_and_forwarded_to_origin+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      parameters_in_cache_key_and_forwarded_to_origin+:
        {
          '#': { help: '', name: 'parameters_in_cache_key_and_forwarded_to_origin' },
          '#withCookiesConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCookiesConfig(value): {
            cookies_config:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCookiesConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCookiesConfigMixin(value): {
            cookies_config+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          cookies_config+:
            {
              '#': { help: '', name: 'cookies_config' },
              '#withCookieBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCookieBehavior(value): {
                cookie_behavior: value,
              },
              '#withCookies': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCookies(value): {
                cookies:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCookiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCookiesMixin(value): {
                cookies+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              cookies+:
                {
                  '#': { help: '', name: 'cookies' },
                  '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withItems(value): {
                    items:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withItemsMixin(value): {
                    items+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
            },
          '#withEnableAcceptEncodingBrotli': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableAcceptEncodingBrotli(value=true): {
            enable_accept_encoding_brotli: value,
          },
          '#withEnableAcceptEncodingGzip': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnableAcceptEncodingGzip(value=true): {
            enable_accept_encoding_gzip: value,
          },
          '#withHeadersConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHeadersConfig(value): {
            headers_config:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHeadersConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHeadersConfigMixin(value): {
            headers_config+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          headers_config+:
            {
              '#': { help: '', name: 'headers_config' },
              '#withHeaderBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withHeaderBehavior(value): {
                header_behavior: value,
              },
              '#withHeaders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHeaders(value): {
                headers:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withHeadersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withHeadersMixin(value): {
                headers+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              headers+:
                {
                  '#': { help: '', name: 'headers' },
                  '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withItems(value): {
                    items:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withItemsMixin(value): {
                    items+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
            },
          '#withQueryStringsConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryStringsConfig(value): {
            query_strings_config:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withQueryStringsConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryStringsConfigMixin(value): {
            query_strings_config+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          query_strings_config+:
            {
              '#': { help: '', name: 'query_strings_config' },
              '#withQueryStringBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withQueryStringBehavior(value): {
                query_string_behavior: value,
              },
              '#withQueryStrings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQueryStrings(value): {
                query_strings:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withQueryStringsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withQueryStringsMixin(value): {
                query_strings+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              query_strings+:
                {
                  '#': { help: '', name: 'query_strings' },
                  '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withItems(value): {
                    items:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withItemsMixin(value): {
                    items+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
            },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_cloudfront_distribution:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_distribution: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAliases': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAliases(value): {
        aliases:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAliasesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAliasesMixin(value): {
        aliases+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDomainName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDomainName(value): {
        domain_name: value,
      },
      '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnabled(value=true): {
        enabled: value,
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withHostedZoneId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostedZoneId(value): {
        hosted_zone_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInProgressValidationBatches': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInProgressValidationBatches(value): {
        in_progress_validation_batches: value,
      },
      '#withLastModifiedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModifiedTime(value): {
        last_modified_time: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withWebAclId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWebAclId(value): {
        web_acl_id: value,
      },
    },
  aws_cloudfront_function:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }, { default: null, enums: null, name: 'stage', type: 'string' }], help: '' } },
      new(tf_resource_key, name, stage):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name)
        + self.withStage(stage),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_function: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCode(value): {
        code: value,
      },
      '#withComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComment(value): {
        comment: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKeyValueStoreAssociations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKeyValueStoreAssociations(value): {
        key_value_store_associations:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKeyValueStoreAssociationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKeyValueStoreAssociationsMixin(value): {
        key_value_store_associations+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLastModifiedTime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModifiedTime(value): {
        last_modified_time: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRuntime': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRuntime(value): {
        runtime: value,
      },
      '#withStage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStage(value): {
        stage: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
    },
  aws_cloudfront_log_delivery_canonical_user_id:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_log_delivery_canonical_user_id: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRegion(value): {
        region: value,
      },
    },
  aws_cloudfront_origin_access_control:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_origin_access_control: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOriginAccessControlOriginType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOriginAccessControlOriginType(value): {
        origin_access_control_origin_type: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSigningBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSigningBehavior(value): {
        signing_behavior: value,
      },
      '#withSigningProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSigningProtocol(value): {
        signing_protocol: value,
      },
    },
  aws_cloudfront_origin_access_identities:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_origin_access_identities: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withComments': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withComments(value): {
        comments:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCommentsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCommentsMixin(value): {
        comments+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIamArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamArns(value): {
        iam_arns:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIamArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIamArnsMixin(value): {
        iam_arns+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withS3CanonicalUserIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withS3CanonicalUserIds(value): {
        s3_canonical_user_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withS3CanonicalUserIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withS3CanonicalUserIdsMixin(value): {
        s3_canonical_user_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_cloudfront_origin_access_identity:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_origin_access_identity: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCallerReference': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCallerReference(value): {
        caller_reference: value,
      },
      '#withCloudfrontAccessIdentityPath': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCloudfrontAccessIdentityPath(value): {
        cloudfront_access_identity_path: value,
      },
      '#withComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComment(value): {
        comment: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withIamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIamArn(value): {
        iam_arn: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withS3CanonicalUserId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withS3CanonicalUserId(value): {
        s3_canonical_user_id: value,
      },
    },
  aws_cloudfront_origin_request_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_origin_request_policy: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComment(value): {
        comment: value,
      },
      '#withCookiesConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCookiesConfig(value): {
        cookies_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCookiesConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCookiesConfigMixin(value): {
        cookies_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      cookies_config+:
        {
          '#': { help: '', name: 'cookies_config' },
          '#withCookieBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCookieBehavior(value): {
            cookie_behavior: value,
          },
          '#withCookies': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCookies(value): {
            cookies:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCookiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCookiesMixin(value): {
            cookies+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          cookies+:
            {
              '#': { help: '', name: 'cookies' },
              '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItems(value): {
                items:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItemsMixin(value): {
                items+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withHeadersConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHeadersConfig(value): {
        headers_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHeadersConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withHeadersConfigMixin(value): {
        headers_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      headers_config+:
        {
          '#': { help: '', name: 'headers_config' },
          '#withHeaderBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withHeaderBehavior(value): {
            header_behavior: value,
          },
          '#withHeaders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHeaders(value): {
            headers:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withHeadersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withHeadersMixin(value): {
            headers+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          headers+:
            {
              '#': { help: '', name: 'headers' },
              '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItems(value): {
                items:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItemsMixin(value): {
                items+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withQueryStringsConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withQueryStringsConfig(value): {
        query_strings_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withQueryStringsConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withQueryStringsConfigMixin(value): {
        query_strings_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      query_strings_config+:
        {
          '#': { help: '', name: 'query_strings_config' },
          '#withQueryStringBehavior': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withQueryStringBehavior(value): {
            query_string_behavior: value,
          },
          '#withQueryStrings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryStrings(value): {
            query_strings:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withQueryStringsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withQueryStringsMixin(value): {
            query_strings+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          query_strings+:
            {
              '#': { help: '', name: 'query_strings' },
              '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItems(value): {
                items:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItemsMixin(value): {
                items+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
        },
    },
  aws_cloudfront_realtime_log_config:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_realtime_log_config: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpoint(value): {
        endpoint:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpointMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpointMixin(value): {
        endpoint+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      endpoint+:
        {
          '#': { help: '', name: 'endpoint' },
          '#withKinesisStreamConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKinesisStreamConfig(value): {
            kinesis_stream_config:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withKinesisStreamConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withKinesisStreamConfigMixin(value): {
            kinesis_stream_config+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          kinesis_stream_config+:
            {
              '#': { help: '', name: 'kinesis_stream_config' },
              '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRoleArn(value): {
                role_arn: value,
              },
              '#withStreamArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withStreamArn(value): {
                stream_arn: value,
              },
            },
          '#withStreamType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStreamType(value): {
            stream_type: value,
          },
        },
      '#withFields': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFields(value): {
        fields:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFieldsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFieldsMixin(value): {
        fields+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSamplingRate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSamplingRate(value): {
        sampling_rate: value,
      },
    },
  aws_cloudfront_response_headers_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_cloudfront_response_headers_policy: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withComment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withComment(value): {
        comment: value,
      },
      '#withCorsConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCorsConfig(value): {
        cors_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCorsConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCorsConfigMixin(value): {
        cors_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      cors_config+:
        {
          '#': { help: '', name: 'cors_config' },
          '#withAccessControlAllowCredentials': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withAccessControlAllowCredentials(value=true): {
            access_control_allow_credentials: value,
          },
          '#withAccessControlAllowHeaders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlAllowHeaders(value): {
            access_control_allow_headers:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAccessControlAllowHeadersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlAllowHeadersMixin(value): {
            access_control_allow_headers+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          access_control_allow_headers+:
            {
              '#': { help: '', name: 'access_control_allow_headers' },
              '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItems(value): {
                items:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItemsMixin(value): {
                items+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withAccessControlAllowMethods': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlAllowMethods(value): {
            access_control_allow_methods:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAccessControlAllowMethodsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlAllowMethodsMixin(value): {
            access_control_allow_methods+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          access_control_allow_methods+:
            {
              '#': { help: '', name: 'access_control_allow_methods' },
              '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItems(value): {
                items:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItemsMixin(value): {
                items+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withAccessControlAllowOrigins': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlAllowOrigins(value): {
            access_control_allow_origins:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAccessControlAllowOriginsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlAllowOriginsMixin(value): {
            access_control_allow_origins+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          access_control_allow_origins+:
            {
              '#': { help: '', name: 'access_control_allow_origins' },
              '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItems(value): {
                items:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItemsMixin(value): {
                items+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withAccessControlExposeHeaders': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlExposeHeaders(value): {
            access_control_expose_headers:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAccessControlExposeHeadersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAccessControlExposeHeadersMixin(value): {
            access_control_expose_headers+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          access_control_expose_headers+:
            {
              '#': { help: '', name: 'access_control_expose_headers' },
              '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItems(value): {
                items:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withItemsMixin(value): {
                items+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withAccessControlMaxAgeSec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withAccessControlMaxAgeSec(value): {
            access_control_max_age_sec: value,
          },
          '#withOriginOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withOriginOverride(value=true): {
            origin_override: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCustomHeadersConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomHeadersConfig(value): {
        custom_headers_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCustomHeadersConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCustomHeadersConfigMixin(value): {
        custom_headers_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      custom_headers_config+:
        {
          '#': { help: '', name: 'custom_headers_config' },
          '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withItems(value): {
            items:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withItemsMixin(value): {
            items+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          items+:
            {
              '#': { help: '', name: 'items' },
              '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withHeader(value): {
                header: value,
              },
              '#withOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withOverride(value=true): {
                override: value,
              },
              '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withValue(value): {
                value: value,
              },
            },
        },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRemoveHeadersConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRemoveHeadersConfig(value): {
        remove_headers_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRemoveHeadersConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRemoveHeadersConfigMixin(value): {
        remove_headers_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      remove_headers_config+:
        {
          '#': { help: '', name: 'remove_headers_config' },
          '#withItems': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withItems(value): {
            items:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withItemsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withItemsMixin(value): {
            items+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          items+:
            {
              '#': { help: '', name: 'items' },
              '#withHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withHeader(value): {
                header: value,
              },
            },
        },
      '#withSecurityHeadersConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityHeadersConfig(value): {
        security_headers_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityHeadersConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityHeadersConfigMixin(value): {
        security_headers_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      security_headers_config+:
        {
          '#': { help: '', name: 'security_headers_config' },
          '#withContentSecurityPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContentSecurityPolicy(value): {
            content_security_policy:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withContentSecurityPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContentSecurityPolicyMixin(value): {
            content_security_policy+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          content_security_policy+:
            {
              '#': { help: '', name: 'content_security_policy' },
              '#withContentSecurityPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withContentSecurityPolicy(value): {
                content_security_policy: value,
              },
              '#withOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withOverride(value=true): {
                override: value,
              },
            },
          '#withContentTypeOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContentTypeOptions(value): {
            content_type_options:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withContentTypeOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContentTypeOptionsMixin(value): {
            content_type_options+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          content_type_options+:
            {
              '#': { help: '', name: 'content_type_options' },
              '#withOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withOverride(value=true): {
                override: value,
              },
            },
          '#withFrameOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFrameOptions(value): {
            frame_options:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFrameOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFrameOptionsMixin(value): {
            frame_options+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          frame_options+:
            {
              '#': { help: '', name: 'frame_options' },
              '#withFrameOption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withFrameOption(value): {
                frame_option: value,
              },
              '#withOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withOverride(value=true): {
                override: value,
              },
            },
          '#withReferrerPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReferrerPolicy(value): {
            referrer_policy:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withReferrerPolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withReferrerPolicyMixin(value): {
            referrer_policy+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          referrer_policy+:
            {
              '#': { help: '', name: 'referrer_policy' },
              '#withOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withOverride(value=true): {
                override: value,
              },
              '#withReferrerPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withReferrerPolicy(value): {
                referrer_policy: value,
              },
            },
          '#withStrictTransportSecurity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStrictTransportSecurity(value): {
            strict_transport_security:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStrictTransportSecurityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStrictTransportSecurityMixin(value): {
            strict_transport_security+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          strict_transport_security+:
            {
              '#': { help: '', name: 'strict_transport_security' },
              '#withAccessControlMaxAgeSec': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withAccessControlMaxAgeSec(value): {
                access_control_max_age_sec: value,
              },
              '#withIncludeSubdomains': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withIncludeSubdomains(value=true): {
                include_subdomains: value,
              },
              '#withOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withOverride(value=true): {
                override: value,
              },
              '#withPreload': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withPreload(value=true): {
                preload: value,
              },
            },
          '#withXssProtection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withXssProtection(value): {
            xss_protection:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withXssProtectionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withXssProtectionMixin(value): {
            xss_protection+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          xss_protection+:
            {
              '#': { help: '', name: 'xss_protection' },
              '#withModeBlock': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withModeBlock(value=true): {
                mode_block: value,
              },
              '#withOverride': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withOverride(value=true): {
                override: value,
              },
              '#withProtection': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withProtection(value=true): {
                protection: value,
              },
              '#withReportUri': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withReportUri(value): {
                report_uri: value,
              },
            },
        },
      '#withServerTimingHeadersConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServerTimingHeadersConfig(value): {
        server_timing_headers_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServerTimingHeadersConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServerTimingHeadersConfigMixin(value): {
        server_timing_headers_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      server_timing_headers_config+:
        {
          '#': { help: '', name: 'server_timing_headers_config' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withSamplingRate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSamplingRate(value): {
            sampling_rate: value,
          },
        },
    },
}
