// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'eks',
  },
  aws_eks_access_entry:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_name', type: 'string' }, { default: null, enums: null, name: 'principal_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_name, principal_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withClusterName(cluster_name)
        + self.withPrincipalArn(principal_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_access_entry+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAccessEntryArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAccessEntryArn(value): {
        access_entry_arn: value,
      },
      '#withClusterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterName(value): {
        cluster_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKubernetesGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKubernetesGroups(value): {
        kubernetes_groups:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKubernetesGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKubernetesGroupsMixin(value): {
        kubernetes_groups+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withModifiedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModifiedAt(value): {
        modified_at: value,
      },
      '#withPrincipalArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPrincipalArn(value): {
        principal_arn: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTagsAll': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAll(value): {
        tags_all: value,
      },
      '#withTagsAllMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsAllMixin(value): {
        tags_all+: value,
      },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        type: value,
      },
      '#withUserName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserName(value): {
        user_name: value,
      },
    },
  aws_eks_addon:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'addon_name', type: 'string' }, { default: null, enums: null, name: 'cluster_name', type: 'string' }], help: '' } },
      new(tf_resource_key, addon_name, cluster_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withAddonName(addon_name)
        + self.withClusterName(cluster_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_addon+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAddonName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAddonName(value): {
        addon_name: value,
      },
      '#withAddonVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAddonVersion(value): {
        addon_version: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withClusterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterName(value): {
        cluster_name: value,
      },
      '#withConfigurationValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withConfigurationValues(value): {
        configuration_values: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withModifiedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withModifiedAt(value): {
        modified_at: value,
      },
      '#withPodIdentityAssociation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPodIdentityAssociation(value): {
        pod_identity_association:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPodIdentityAssociationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPodIdentityAssociationMixin(value): {
        pod_identity_association+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      pod_identity_association+:
        {
          '#': { help: '', name: 'pod_identity_association' },
          '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRoleArn(value): {
            role_arn: value,
          },
          '#withServiceAccount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceAccount(value): {
            service_account: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withServiceAccountRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServiceAccountRoleArn(value): {
        service_account_role_arn: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
  aws_eks_addon_version:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'addon_name', type: 'string' }, { default: null, enums: null, name: 'kubernetes_version', type: 'string' }], help: '' } },
      new(tf_resource_key, addon_name, kubernetes_version):
        self.withTfResourceKey(tf_resource_key)
        + self.withAddonName(addon_name)
        + self.withKubernetesVersion(kubernetes_version),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_addon_version+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAddonName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAddonName(value): {
        addon_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKubernetesVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKubernetesVersion(value): {
        kubernetes_version: value,
      },
      '#withMostRecent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withMostRecent(value=true): {
        most_recent: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
    },
  aws_eks_cluster:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_cluster+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAccessConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAccessConfig(value): {
        access_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAccessConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAccessConfigMixin(value): {
        access_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      access_config+:
        {
          '#': { help: '', name: 'access_config' },
          '#withAuthenticationMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAuthenticationMode(value): {
            authentication_mode: value,
          },
          '#withBootstrapClusterCreatorAdminPermissions': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withBootstrapClusterCreatorAdminPermissions(value=true): {
            bootstrap_cluster_creator_admin_permissions: value,
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCertificateAuthority': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCertificateAuthority(value): {
        certificate_authority:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCertificateAuthorityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCertificateAuthorityMixin(value): {
        certificate_authority+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      certificate_authority+:
        {
          '#': { help: '', name: 'certificate_authority' },
          '#withData': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withData(value): {
            data: value,
          },
        },
      '#withClusterId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterId(value): {
        cluster_id: value,
      },
      '#withComputeConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withComputeConfig(value): {
        compute_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withComputeConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withComputeConfigMixin(value): {
        compute_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      compute_config+:
        {
          '#': { help: '', name: 'compute_config' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withNodePools': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNodePools(value): {
            node_pools:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNodePoolsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNodePoolsMixin(value): {
            node_pools+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNodeRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNodeRoleArn(value): {
            node_role_arn: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnabledClusterLogTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnabledClusterLogTypes(value): {
        enabled_cluster_log_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnabledClusterLogTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEnabledClusterLogTypesMixin(value): {
        enabled_cluster_log_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndpoint(value): {
        endpoint: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIdentity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdentity(value): {
        identity:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdentityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdentityMixin(value): {
        identity+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      identity+:
        {
          '#': { help: '', name: 'identity' },
          '#withOidc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOidc(value): {
            oidc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withOidcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOidcMixin(value): {
            oidc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          oidc+:
            {
              '#': { help: '', name: 'oidc' },
              '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIssuer(value): {
                issuer: value,
              },
            },
        },
      '#withKubernetesNetworkConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKubernetesNetworkConfig(value): {
        kubernetes_network_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKubernetesNetworkConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKubernetesNetworkConfigMixin(value): {
        kubernetes_network_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      kubernetes_network_config+:
        {
          '#': { help: '', name: 'kubernetes_network_config' },
          '#withElasticLoadBalancing': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElasticLoadBalancing(value): {
            elastic_load_balancing:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withElasticLoadBalancingMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElasticLoadBalancingMixin(value): {
            elastic_load_balancing+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          elastic_load_balancing+:
            {
              '#': { help: '', name: 'elastic_load_balancing' },
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                enabled: value,
              },
            },
          '#withIpFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withIpFamily(value): {
            ip_family: value,
          },
          '#withServiceIpv4Cidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceIpv4Cidr(value): {
            service_ipv4_cidr: value,
          },
          '#withServiceIpv6Cidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withServiceIpv6Cidr(value): {
            service_ipv6_cidr: value,
          },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOutpostConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutpostConfig(value): {
        outpost_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOutpostConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOutpostConfigMixin(value): {
        outpost_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      outpost_config+:
        {
          '#': { help: '', name: 'outpost_config' },
          '#withControlPlaneInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withControlPlaneInstanceType(value): {
            control_plane_instance_type: value,
          },
          '#withControlPlanePlacement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withControlPlanePlacement(value): {
            control_plane_placement:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withControlPlanePlacementMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withControlPlanePlacementMixin(value): {
            control_plane_placement+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          control_plane_placement+:
            {
              '#': { help: '', name: 'control_plane_placement' },
              '#withGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGroupName(value): {
                group_name: value,
              },
            },
          '#withOutpostArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutpostArns(value): {
            outpost_arns:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withOutpostArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutpostArnsMixin(value): {
            outpost_arns+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withPlatformVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPlatformVersion(value): {
        platform_version: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRemoteNetworkConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRemoteNetworkConfig(value): {
        remote_network_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRemoteNetworkConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRemoteNetworkConfigMixin(value): {
        remote_network_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      remote_network_config+:
        {
          '#': { help: '', name: 'remote_network_config' },
          '#withRemoteNodeNetworks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRemoteNodeNetworks(value): {
            remote_node_networks:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRemoteNodeNetworksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRemoteNodeNetworksMixin(value): {
            remote_node_networks+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          remote_node_networks+:
            {
              '#': { help: '', name: 'remote_node_networks' },
              '#withCidrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCidrs(value): {
                cidrs:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCidrsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCidrsMixin(value): {
                cidrs+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withRemotePodNetworks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRemotePodNetworks(value): {
            remote_pod_networks:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRemotePodNetworksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRemotePodNetworksMixin(value): {
            remote_pod_networks+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          remote_pod_networks+:
            {
              '#': { help: '', name: 'remote_pod_networks' },
              '#withCidrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCidrs(value): {
                cidrs:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCidrsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCidrsMixin(value): {
                cidrs+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
        },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withStorageConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStorageConfig(value): {
        storage_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withStorageConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withStorageConfigMixin(value): {
        storage_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      storage_config+:
        {
          '#': { help: '', name: 'storage_config' },
          '#withBlockStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBlockStorage(value): {
            block_storage:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withBlockStorageMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withBlockStorageMixin(value): {
            block_storage+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          block_storage+:
            {
              '#': { help: '', name: 'block_storage' },
              '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEnabled(value=true): {
                enabled: value,
              },
            },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUpgradePolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUpgradePolicy(value): {
        upgrade_policy:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withUpgradePolicyMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUpgradePolicyMixin(value): {
        upgrade_policy+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      upgrade_policy+:
        {
          '#': { help: '', name: 'upgrade_policy' },
          '#withSupportType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSupportType(value): {
            support_type: value,
          },
        },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
      '#withVpcConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcConfig(value): {
        vpc_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVpcConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withVpcConfigMixin(value): {
        vpc_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      vpc_config+:
        {
          '#': { help: '', name: 'vpc_config' },
          '#withClusterSecurityGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClusterSecurityGroupId(value): {
            cluster_security_group_id: value,
          },
          '#withEndpointPrivateAccess': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEndpointPrivateAccess(value=true): {
            endpoint_private_access: value,
          },
          '#withEndpointPublicAccess': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEndpointPublicAccess(value=true): {
            endpoint_public_access: value,
          },
          '#withPublicAccessCidrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPublicAccessCidrs(value): {
            public_access_cidrs:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPublicAccessCidrsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPublicAccessCidrsMixin(value): {
            public_access_cidrs+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIds(value): {
            security_group_ids:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupIdsMixin(value): {
            security_group_ids+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetIds(value): {
            subnet_ids:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetIdsMixin(value): {
            subnet_ids+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVpcId(value): {
            vpc_id: value,
          },
        },
      '#withZonalShiftConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withZonalShiftConfig(value): {
        zonal_shift_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withZonalShiftConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withZonalShiftConfigMixin(value): {
        zonal_shift_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      zonal_shift_config+:
        {
          '#': { help: '', name: 'zonal_shift_config' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
        },
    },
  aws_eks_cluster_auth:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_cluster_auth+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withToken': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withToken(value): {
        token: value,
      },
    },
  aws_eks_clusters:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_clusters+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNames(value): {
        names:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNamesMixin(value): {
        names+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_eks_node_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_name', type: 'string' }, { default: null, enums: null, name: 'node_group_name', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_name, node_group_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withClusterName(cluster_name)
        + self.withNodeGroupName(node_group_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_node_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAmiType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAmiType(value): {
        ami_type: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCapacityType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCapacityType(value): {
        capacity_type: value,
      },
      '#withClusterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterName(value): {
        cluster_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDiskSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDiskSize(value): {
        disk_size: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceTypes(value): {
        instance_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceTypesMixin(value): {
        instance_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLabels': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLabels(value): {
        labels: value,
      },
      '#withLabelsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withLabelsMixin(value): {
        labels+: value,
      },
      '#withLaunchTemplate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLaunchTemplate(value): {
        launch_template:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLaunchTemplateMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLaunchTemplateMixin(value): {
        launch_template+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      launch_template+:
        {
          '#': { help: '', name: 'launch_template' },
          '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withId(value): {
            id: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withVersion(value): {
            version: value,
          },
        },
      '#withNodeGroupName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNodeGroupName(value): {
        node_group_name: value,
      },
      '#withNodeRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNodeRoleArn(value): {
        node_role_arn: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withReleaseVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withReleaseVersion(value): {
        release_version: value,
      },
      '#withRemoteAccess': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRemoteAccess(value): {
        remote_access:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRemoteAccessMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRemoteAccessMixin(value): {
        remote_access+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      remote_access+:
        {
          '#': { help: '', name: 'remote_access' },
          '#withEc2SshKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEc2SshKey(value): {
            ec2_ssh_key: value,
          },
          '#withSourceSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceSecurityGroupIds(value): {
            source_security_group_ids:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSourceSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceSecurityGroupIdsMixin(value): {
            source_security_group_ids+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withResources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResources(value): {
        resources:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourcesMixin(value): {
        resources+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      resources+:
        {
          '#': { help: '', name: 'resources' },
          '#withAutoscalingGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAutoscalingGroups(value): {
            autoscaling_groups:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAutoscalingGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAutoscalingGroupsMixin(value): {
            autoscaling_groups+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          autoscaling_groups+:
            {
              '#': { help: '', name: 'autoscaling_groups' },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withRemoteAccessSecurityGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRemoteAccessSecurityGroupId(value): {
            remote_access_security_group_id: value,
          },
        },
      '#withScalingConfig': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withScalingConfig(value): {
        scaling_config:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withScalingConfigMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withScalingConfigMixin(value): {
        scaling_config+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      scaling_config+:
        {
          '#': { help: '', name: 'scaling_config' },
          '#withDesiredSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withDesiredSize(value): {
            desired_size: value,
          },
          '#withMaxSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaxSize(value): {
            max_size: value,
          },
          '#withMinSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMinSize(value): {
            min_size: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTaints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTaints(value): {
        taints:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTaintsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTaintsMixin(value): {
        taints+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      taints+:
        {
          '#': { help: '', name: 'taints' },
          '#withEffect': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEffect(value): {
            effect: value,
          },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
    },
  aws_eks_node_groups:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_name', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_name):
        self.withTfResourceKey(tf_resource_key)
        + self.withClusterName(cluster_name),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_eks_node_groups+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withClusterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterName(value): {
        cluster_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNames(value): {
        names:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNamesMixin(value): {
        names+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
}
