// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'bedrockagent',
  },
  aws_bedrockagent_agent_versions:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'agent_id', type: 'string' }], help: '' } },
      new(tf_resource_key, agent_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withAgentId(agent_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_bedrockagent_agent_versions+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAgentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAgentId(value): {
        agent_id: value,
      },
      '#withAgentVersionSummaries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAgentVersionSummaries(value): {
        agent_version_summaries:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAgentVersionSummariesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAgentVersionSummariesMixin(value): {
        agent_version_summaries+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      agent_version_summaries+:
        {
          '#': { help: '', name: 'agent_version_summaries' },
          '#withAgentName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAgentName(value): {
            agent_name: value,
          },
          '#withAgentStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAgentStatus(value): {
            agent_status: value,
          },
          '#withAgentVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAgentVersion(value): {
            agent_version: value,
          },
          '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCreatedAt(value): {
            created_at: value,
          },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            description: value,
          },
          '#withGuardrailConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGuardrailConfiguration(value): {
            guardrail_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withGuardrailConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withGuardrailConfigurationMixin(value): {
            guardrail_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          guardrail_configuration+:
            {
              '#': { help: '', name: 'guardrail_configuration' },
              '#withGuardrailIdentifier': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGuardrailIdentifier(value): {
                guardrail_identifier: value,
              },
              '#withGuardrailVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGuardrailVersion(value): {
                guardrail_version: value,
              },
            },
          '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUpdatedAt(value): {
            updated_at: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
}
