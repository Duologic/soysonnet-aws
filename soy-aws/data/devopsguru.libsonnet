// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'devopsguru',
  },
  aws_devopsguru_notification_channel:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        {
          local this = self,
          data: {
            aws_devopsguru_notification_channel: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilters(value): {
        spec+: {
          filters:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFiltersMixin(value): {
        spec+: {
          filters+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      filters+:
        {
          '#': { help: '', name: 'filters' },
          '#withMessageTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMessageTypes(value): {
            message_types:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withMessageTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withMessageTypesMixin(value): {
            message_types+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSeverities': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSeverities(value): {
            severities:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSeveritiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSeveritiesMixin(value): {
            severities+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSns(value): {
        spec+: {
          sns:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSnsMixin(value): {
        spec+: {
          sns+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      sns+:
        {
          '#': { help: '', name: 'sns' },
          '#withTopicArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTopicArn(value): {
            topic_arn: value,
          },
        },
    },
  aws_devopsguru_resource_collection:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'type', type: 'string' }], help: '' } },
      new(tf_resource_key, type):
        {
          local this = self,
          data: {
            aws_devopsguru_resource_collection: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withType(type),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCloudformation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCloudformation(value): {
        spec+: {
          cloudformation:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCloudformationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCloudformationMixin(value): {
        spec+: {
          cloudformation+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      cloudformation+:
        {
          '#': { help: '', name: 'cloudformation' },
          '#withStackNames': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStackNames(value): {
            stack_names:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStackNamesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStackNamesMixin(value): {
            stack_names+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      tags+:
        {
          '#': { help: '', name: 'tags' },
          '#withAppBoundaryKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAppBoundaryKey(value): {
            app_boundary_key: value,
          },
          '#withTagValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTagValues(value): {
            tag_values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTagValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTagValuesMixin(value): {
            tag_values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withType(value): {
        spec+: {
          type: value,
        },
      },
    },
}
