// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'kendra',
  },
  aws_kendra_experience:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'experience_id', type: 'string' }, { default: null, enums: null, name: 'index_id', type: 'string' }], help: '' } },
      new(tf_resource_key, experience_id, index_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withExperienceId(experience_id)
        + self.withIndexId(index_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_kendra_experience: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConfiguration(value): {
        configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConfigurationMixin(value): {
        configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      configuration+:
        {
          '#': { help: '', name: 'configuration' },
          '#withContentSourceConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContentSourceConfiguration(value): {
            content_source_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withContentSourceConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withContentSourceConfigurationMixin(value): {
            content_source_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          content_source_configuration+:
            {
              '#': { help: '', name: 'content_source_configuration' },
              '#withDataSourceIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDataSourceIds(value): {
                data_source_ids:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDataSourceIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDataSourceIdsMixin(value): {
                data_source_ids+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDirectPutContent': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withDirectPutContent(value=true): {
                direct_put_content: value,
              },
              '#withFaqIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFaqIds(value): {
                faq_ids:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withFaqIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withFaqIdsMixin(value): {
                faq_ids+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withUserIdentityConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUserIdentityConfiguration(value): {
            user_identity_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withUserIdentityConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withUserIdentityConfigurationMixin(value): {
            user_identity_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          user_identity_configuration+:
            {
              '#': { help: '', name: 'user_identity_configuration' },
              '#withIdentityAttributeName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIdentityAttributeName(value): {
                identity_attribute_name: value,
              },
            },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withEndpoints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpoints(value): {
        endpoints:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndpointsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEndpointsMixin(value): {
        endpoints+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      endpoints+:
        {
          '#': { help: '', name: 'endpoints' },
          '#withEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEndpoint(value): {
            endpoint: value,
          },
          '#withEndpointType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEndpointType(value): {
            endpoint_type: value,
          },
        },
      '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withErrorMessage(value): {
        error_message: value,
      },
      '#withExperienceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExperienceId(value): {
        experience_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIndexId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIndexId(value): {
        index_id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
    },
  aws_kendra_faq:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'faq_id', type: 'string' }, { default: null, enums: null, name: 'index_id', type: 'string' }], help: '' } },
      new(tf_resource_key, faq_id, index_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withFaqId(faq_id)
        + self.withIndexId(index_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_kendra_faq: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withErrorMessage(value): {
        error_message: value,
      },
      '#withFaqId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFaqId(value): {
        faq_id: value,
      },
      '#withFileFormat': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withFileFormat(value): {
        file_format: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIndexId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIndexId(value): {
        index_id: value,
      },
      '#withLanguageCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLanguageCode(value): {
        language_code: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withS3Path': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withS3Path(value): {
        s3_path:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withS3PathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withS3PathMixin(value): {
        s3_path+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      s3_path+:
        {
          '#': { help: '', name: 's3_path' },
          '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucket(value): {
            bucket: value,
          },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
    },
  aws_kendra_index:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'id', type: 'string' }], help: '' } },
      new(tf_resource_key, id):
        self.withTfResourceKey(tf_resource_key)
        + self.withId(id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_kendra_index: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCapacityUnits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCapacityUnits(value): {
        capacity_units:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCapacityUnitsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCapacityUnitsMixin(value): {
        capacity_units+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      capacity_units+:
        {
          '#': { help: '', name: 'capacity_units' },
          '#withQueryCapacityUnits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withQueryCapacityUnits(value): {
            query_capacity_units: value,
          },
          '#withStorageCapacityUnits': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withStorageCapacityUnits(value): {
            storage_capacity_units: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDocumentMetadataConfigurationUpdates': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDocumentMetadataConfigurationUpdates(value): {
        document_metadata_configuration_updates:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDocumentMetadataConfigurationUpdatesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDocumentMetadataConfigurationUpdatesMixin(value): {
        document_metadata_configuration_updates+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      document_metadata_configuration_updates+:
        {
          '#': { help: '', name: 'document_metadata_configuration_updates' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withRelevance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelevance(value): {
            relevance:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRelevanceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRelevanceMixin(value): {
            relevance+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          relevance+:
            {
              '#': { help: '', name: 'relevance' },
              '#withDuration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDuration(value): {
                duration: value,
              },
              '#withFreshness': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withFreshness(value=true): {
                freshness: value,
              },
              '#withImportance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withImportance(value): {
                importance: value,
              },
              '#withRankOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRankOrder(value): {
                rank_order: value,
              },
              '#withValuesImportanceMap': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withValuesImportanceMap(value): {
                values_importance_map: value,
              },
              '#withValuesImportanceMapMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withValuesImportanceMapMixin(value): {
                values_importance_map+: value,
              },
            },
          '#withSearch': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSearch(value): {
            search:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSearchMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSearchMixin(value): {
            search+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          search+:
            {
              '#': { help: '', name: 'search' },
              '#withDisplayable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withDisplayable(value=true): {
                displayable: value,
              },
              '#withFacetable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withFacetable(value=true): {
                facetable: value,
              },
              '#withSearchable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withSearchable(value=true): {
                searchable: value,
              },
              '#withSortable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withSortable(value=true): {
                sortable: value,
              },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withEdition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEdition(value): {
        edition: value,
      },
      '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withErrorMessage(value): {
        error_message: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIndexStatistics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIndexStatistics(value): {
        index_statistics:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIndexStatisticsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIndexStatisticsMixin(value): {
        index_statistics+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      index_statistics+:
        {
          '#': { help: '', name: 'index_statistics' },
          '#withFaqStatistics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFaqStatistics(value): {
            faq_statistics:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withFaqStatisticsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withFaqStatisticsMixin(value): {
            faq_statistics+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          faq_statistics+:
            {
              '#': { help: '', name: 'faq_statistics' },
              '#withIndexedQuestionAnswersCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIndexedQuestionAnswersCount(value): {
                indexed_question_answers_count: value,
              },
            },
          '#withTextDocumentStatistics': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTextDocumentStatistics(value): {
            text_document_statistics:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTextDocumentStatisticsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTextDocumentStatisticsMixin(value): {
            text_document_statistics+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          text_document_statistics+:
            {
              '#': { help: '', name: 'text_document_statistics' },
              '#withIndexedTextBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIndexedTextBytes(value): {
                indexed_text_bytes: value,
              },
              '#withIndexedTextDocumentsCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withIndexedTextDocumentsCount(value): {
                indexed_text_documents_count: value,
              },
            },
        },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withServerSideEncryptionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServerSideEncryptionConfiguration(value): {
        server_side_encryption_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withServerSideEncryptionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withServerSideEncryptionConfigurationMixin(value): {
        server_side_encryption_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      server_side_encryption_configuration+:
        {
          '#': { help: '', name: 'server_side_encryption_configuration' },
          '#withKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKmsKeyId(value): {
            kms_key_id: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
      '#withUserContextPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUserContextPolicy(value): {
        user_context_policy: value,
      },
      '#withUserGroupResolutionConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUserGroupResolutionConfiguration(value): {
        user_group_resolution_configuration:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withUserGroupResolutionConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUserGroupResolutionConfigurationMixin(value): {
        user_group_resolution_configuration+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      user_group_resolution_configuration+:
        {
          '#': { help: '', name: 'user_group_resolution_configuration' },
          '#withUserGroupResolutionMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withUserGroupResolutionMode(value): {
            user_group_resolution_mode: value,
          },
        },
      '#withUserTokenConfigurations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUserTokenConfigurations(value): {
        user_token_configurations:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withUserTokenConfigurationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withUserTokenConfigurationsMixin(value): {
        user_token_configurations+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      user_token_configurations+:
        {
          '#': { help: '', name: 'user_token_configurations' },
          '#withJsonTokenTypeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withJsonTokenTypeConfiguration(value): {
            json_token_type_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withJsonTokenTypeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withJsonTokenTypeConfigurationMixin(value): {
            json_token_type_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          json_token_type_configuration+:
            {
              '#': { help: '', name: 'json_token_type_configuration' },
              '#withGroupAttributeField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGroupAttributeField(value): {
                group_attribute_field: value,
              },
              '#withUserNameAttributeField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserNameAttributeField(value): {
                user_name_attribute_field: value,
              },
            },
          '#withJwtTokenTypeConfiguration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withJwtTokenTypeConfiguration(value): {
            jwt_token_type_configuration:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withJwtTokenTypeConfigurationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withJwtTokenTypeConfigurationMixin(value): {
            jwt_token_type_configuration+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          jwt_token_type_configuration+:
            {
              '#': { help: '', name: 'jwt_token_type_configuration' },
              '#withClaimRegex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withClaimRegex(value): {
                claim_regex: value,
              },
              '#withGroupAttributeField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGroupAttributeField(value): {
                group_attribute_field: value,
              },
              '#withIssuer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withIssuer(value): {
                issuer: value,
              },
              '#withKeyLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKeyLocation(value): {
                key_location: value,
              },
              '#withSecretsManagerArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecretsManagerArn(value): {
                secrets_manager_arn: value,
              },
              '#withUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUrl(value): {
                url: value,
              },
              '#withUserNameAttributeField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withUserNameAttributeField(value): {
                user_name_attribute_field: value,
              },
            },
        },
    },
  aws_kendra_query_suggestions_block_list:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'index_id', type: 'string' }, { default: null, enums: null, name: 'query_suggestions_block_list_id', type: 'string' }], help: '' } },
      new(tf_resource_key, index_id, query_suggestions_block_list_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withIndexId(index_id)
        + self.withQuerySuggestionsBlockListId(query_suggestions_block_list_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_kendra_query_suggestions_block_list: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withErrorMessage(value): {
        error_message: value,
      },
      '#withFileSizeBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withFileSizeBytes(value): {
        file_size_bytes: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIndexId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIndexId(value): {
        index_id: value,
      },
      '#withItemCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withItemCount(value): {
        item_count: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withQuerySuggestionsBlockListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withQuerySuggestionsBlockListId(value): {
        query_suggestions_block_list_id: value,
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withSourceS3Path': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSourceS3Path(value): {
        source_s3_path:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSourceS3PathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSourceS3PathMixin(value): {
        source_s3_path+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      source_s3_path+:
        {
          '#': { help: '', name: 'source_s3_path' },
          '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucket(value): {
            bucket: value,
          },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
    },
  aws_kendra_thesaurus:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'index_id', type: 'string' }, { default: null, enums: null, name: 'thesaurus_id', type: 'string' }], help: '' } },
      new(tf_resource_key, index_id, thesaurus_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withIndexId(index_id)
        + self.withThesaurusId(thesaurus_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_kendra_thesaurus: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCreatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCreatedAt(value): {
        created_at: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withErrorMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withErrorMessage(value): {
        error_message: value,
      },
      '#withFileSizeBytes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withFileSizeBytes(value): {
        file_size_bytes: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIndexId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIndexId(value): {
        index_id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRoleArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRoleArn(value): {
        role_arn: value,
      },
      '#withSourceS3Path': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSourceS3Path(value): {
        source_s3_path:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSourceS3PathMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSourceS3PathMixin(value): {
        source_s3_path+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      source_s3_path+:
        {
          '#': { help: '', name: 'source_s3_path' },
          '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBucket(value): {
            bucket: value,
          },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
        },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withSynonymRuleCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSynonymRuleCount(value): {
        synonym_rule_count: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTermCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTermCount(value): {
        term_count: value,
      },
      '#withThesaurusId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withThesaurusId(value): {
        thesaurus_id: value,
      },
      '#withUpdatedAt': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpdatedAt(value): {
        updated_at: value,
      },
    },
}
