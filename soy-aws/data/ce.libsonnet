// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'ce',
  },
  aws_ce_cost_category:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cost_category_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, cost_category_arn):
        self.withTfResourceKey(tf_resource_key)
        + self.withCostCategoryArn(cost_category_arn),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ce_cost_category+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCostCategoryArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCostCategoryArn(value): {
        cost_category_arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultValue(value): {
        default_value: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEffectiveEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEffectiveEnd(value): {
        effective_end: value,
      },
      '#withEffectiveStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEffectiveStart(value): {
        effective_start: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRule(value): {
        rule:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRuleMixin(value): {
        rule+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      rule+:
        {
          '#': { help: '', name: 'rule' },
          '#withInheritedValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInheritedValue(value): {
            inherited_value:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInheritedValueMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInheritedValueMixin(value): {
            inherited_value+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          inherited_value+:
            {
              '#': { help: '', name: 'inherited_value' },
              '#withDimensionKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDimensionKey(value): {
                dimension_key: value,
              },
              '#withDimensionName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDimensionName(value): {
                dimension_name: value,
              },
            },
          '#withRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRule(value): {
            rule:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRuleMixin(value): {
            rule+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          rule+:
            {
              '#': { help: '', name: 'rule' },
              '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAnd(value): {
                and:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withAndMixin(value): {
                and+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              and+:
                {
                  '#': { help: '', name: 'and' },
                  '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAnd(value): {
                    and:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAndMixin(value): {
                    and+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  and+:
                    {
                      '#': { help: '', name: 'and' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCostCategory(value): {
                    cost_category:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCostCategoryMixin(value): {
                    cost_category+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  cost_category+:
                    {
                      '#': { help: '', name: 'cost_category' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDimension(value): {
                    dimension:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDimensionMixin(value): {
                    dimension+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  dimension+:
                    {
                      '#': { help: '', name: 'dimension' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNot(value): {
                    not:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNotMixin(value): {
                    not+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  not+:
                    {
                      '#': { help: '', name: 'not' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOr(value): {
                    or:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOrMixin(value): {
                    or+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  or+:
                    {
                      '#': { help: '', name: 'or' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTags(value): {
                    tags:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTagsMixin(value): {
                    tags+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  tags+:
                    {
                      '#': { help: '', name: 'tags' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                },
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCostCategory(value): {
                cost_category:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withCostCategoryMixin(value): {
                cost_category+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              cost_category+:
                {
                  '#': { help: '', name: 'cost_category' },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDimension(value): {
                dimension:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDimensionMixin(value): {
                dimension+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              dimension+:
                {
                  '#': { help: '', name: 'dimension' },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNot(value): {
                not:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNotMixin(value): {
                not+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              not+:
                {
                  '#': { help: '', name: 'not' },
                  '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAnd(value): {
                    and:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAndMixin(value): {
                    and+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  and+:
                    {
                      '#': { help: '', name: 'and' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCostCategory(value): {
                    cost_category:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCostCategoryMixin(value): {
                    cost_category+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  cost_category+:
                    {
                      '#': { help: '', name: 'cost_category' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDimension(value): {
                    dimension:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDimensionMixin(value): {
                    dimension+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  dimension+:
                    {
                      '#': { help: '', name: 'dimension' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNot(value): {
                    not:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNotMixin(value): {
                    not+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  not+:
                    {
                      '#': { help: '', name: 'not' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOr(value): {
                    or:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOrMixin(value): {
                    or+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  or+:
                    {
                      '#': { help: '', name: 'or' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTags(value): {
                    tags:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTagsMixin(value): {
                    tags+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  tags+:
                    {
                      '#': { help: '', name: 'tags' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                },
              '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOr(value): {
                or:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withOrMixin(value): {
                or+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              or+:
                {
                  '#': { help: '', name: 'or' },
                  '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAnd(value): {
                    and:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withAndMixin(value): {
                    and+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  and+:
                    {
                      '#': { help: '', name: 'and' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCostCategory(value): {
                    cost_category:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withCostCategoryMixin(value): {
                    cost_category+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  cost_category+:
                    {
                      '#': { help: '', name: 'cost_category' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDimension(value): {
                    dimension:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withDimensionMixin(value): {
                    dimension+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  dimension+:
                    {
                      '#': { help: '', name: 'dimension' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                  '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNot(value): {
                    not:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withNotMixin(value): {
                    not+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  not+:
                    {
                      '#': { help: '', name: 'not' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOr(value): {
                    or:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withOrMixin(value): {
                    or+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  or+:
                    {
                      '#': { help: '', name: 'or' },
                      '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategory(value): {
                        cost_category:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withCostCategoryMixin(value): {
                        cost_category+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      cost_category+:
                        {
                          '#': { help: '', name: 'cost_category' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimension(value): {
                        dimension:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withDimensionMixin(value): {
                        dimension+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      dimension+:
                        {
                          '#': { help: '', name: 'dimension' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTags(value): {
                        tags:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withTagsMixin(value): {
                        tags+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      tags+:
                        {
                          '#': { help: '', name: 'tags' },
                          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                          withKey(value): {
                            key: value,
                          },
                          '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptions(value): {
                            match_options:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withMatchOptionsMixin(value): {
                            match_options+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValues(value): {
                            values:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                          withValuesMixin(value): {
                            values+:
                              (if std.isArray(value)
                               then value
                               else [value]),
                          },
                        },
                    },
                  '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTags(value): {
                    tags:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withTagsMixin(value): {
                    tags+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  tags+:
                    {
                      '#': { help: '', name: 'tags' },
                      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                      withKey(value): {
                        key: value,
                      },
                      '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptions(value): {
                        match_options:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withMatchOptionsMixin(value): {
                        match_options+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValues(value): {
                        values:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withValuesMixin(value): {
                        values+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                    },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTags(value): {
                tags:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withTagsMixin(value): {
                tags+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              tags+:
                {
                  '#': { help: '', name: 'tags' },
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    key: value,
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
            },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
          '#withValue': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withValue(value): {
            value: value,
          },
        },
      '#withRuleVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRuleVersion(value): {
        rule_version: value,
      },
      '#withSplitChargeRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSplitChargeRule(value): {
        split_charge_rule:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSplitChargeRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSplitChargeRuleMixin(value): {
        split_charge_rule+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      split_charge_rule+:
        {
          '#': { help: '', name: 'split_charge_rule' },
          '#withMethod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMethod(value): {
            method: value,
          },
          '#withParameter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withParameter(value): {
            parameter:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withParameterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withParameterMixin(value): {
            parameter+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          parameter+:
            {
              '#': { help: '', name: 'parameter' },
              '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withType(value): {
                type: value,
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                values:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                values+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSource(value): {
            source: value,
          },
          '#withTargets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTargets(value): {
            targets:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTargetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTargetsMixin(value): {
            targets+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
  aws_ce_tags:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'time_period', type: 'object' }], help: '' } },
      new(tf_resource_key, time_period):
        self.withTfResourceKey(tf_resource_key)
        + self.withTimePeriod(time_period),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ce_tags+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFilter(value): {
        filter: value,
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withFilterMixin(value): {
        filter+: value,
      },
      filter+:
        {
          '#withAnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAnd(value): {
            filter+: {
              and:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withAndMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAndMixin(value): {
            filter+: {
              and+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          and+:
            {
              '#': { help: '', name: 'and' },
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategory(value): {
                cost_category: value,
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategoryMixin(value): {
                cost_category+: value,
              },
              cost_category+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    cost_category+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    cost_category+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    cost_category+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    cost_category+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    cost_category+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimension(value): {
                dimension: value,
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimensionMixin(value): {
                dimension+: value,
              },
              dimension+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    dimension+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    dimension+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    dimension+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    dimension+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    dimension+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                tags: value,
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                tags+: value,
              },
              tags+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    tags+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    tags+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    tags+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    tags+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    tags+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
            },
          '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCostCategory(value): {
            filter+: {
              cost_category: value,
            },
          },
          '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withCostCategoryMixin(value): {
            filter+: {
              cost_category+: value,
            },
          },
          cost_category+:
            {
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                filter+: {
                  cost_category+: {
                    key: value,
                  },
                },
              },
              '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptions(value): {
                filter+: {
                  cost_category+: {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptionsMixin(value): {
                filter+: {
                  cost_category+: {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                filter+: {
                  cost_category+: {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                filter+: {
                  cost_category+: {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDimension(value): {
            filter+: {
              dimension: value,
            },
          },
          '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withDimensionMixin(value): {
            filter+: {
              dimension+: value,
            },
          },
          dimension+:
            {
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                filter+: {
                  dimension+: {
                    key: value,
                  },
                },
              },
              '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptions(value): {
                filter+: {
                  dimension+: {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptionsMixin(value): {
                filter+: {
                  dimension+: {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                filter+: {
                  dimension+: {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                filter+: {
                  dimension+: {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
          '#withNot': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withNot(value): {
            filter+: {
              not: value,
            },
          },
          '#withNotMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withNotMixin(value): {
            filter+: {
              not+: value,
            },
          },
          not+:
            {
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategory(value): {
                filter+: {
                  not+: {
                    cost_category: value,
                  },
                },
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategoryMixin(value): {
                filter+: {
                  not+: {
                    cost_category+: value,
                  },
                },
              },
              cost_category+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    filter+: {
                      not+: {
                        cost_category+: {
                          key: value,
                        },
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    filter+: {
                      not+: {
                        cost_category+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    filter+: {
                      not+: {
                        cost_category+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    filter+: {
                      not+: {
                        cost_category+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    filter+: {
                      not+: {
                        cost_category+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimension(value): {
                filter+: {
                  not+: {
                    dimension: value,
                  },
                },
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimensionMixin(value): {
                filter+: {
                  not+: {
                    dimension+: value,
                  },
                },
              },
              dimension+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    filter+: {
                      not+: {
                        dimension+: {
                          key: value,
                        },
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    filter+: {
                      not+: {
                        dimension+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    filter+: {
                      not+: {
                        dimension+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    filter+: {
                      not+: {
                        dimension+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    filter+: {
                      not+: {
                        dimension+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                filter+: {
                  not+: {
                    tags: value,
                  },
                },
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                filter+: {
                  not+: {
                    tags+: value,
                  },
                },
              },
              tags+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    filter+: {
                      not+: {
                        tags+: {
                          key: value,
                        },
                      },
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    filter+: {
                      not+: {
                        tags+: {
                          match_options:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    filter+: {
                      not+: {
                        tags+: {
                          match_options+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    filter+: {
                      not+: {
                        tags+: {
                          values:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    filter+: {
                      not+: {
                        tags+: {
                          values+:
                            (if std.isArray(value)
                             then value
                             else [value]),
                        },
                      },
                    },
                  },
                },
            },
          '#withOr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOr(value): {
            filter+: {
              or:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          '#withOrMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOrMixin(value): {
            filter+: {
              or+:
                (if std.isArray(value)
                 then value
                 else [value]),
            },
          },
          or+:
            {
              '#': { help: '', name: 'or' },
              '#withCostCategory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategory(value): {
                cost_category: value,
              },
              '#withCostCategoryMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withCostCategoryMixin(value): {
                cost_category+: value,
              },
              cost_category+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    cost_category+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    cost_category+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    cost_category+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    cost_category+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    cost_category+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withDimension': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimension(value): {
                dimension: value,
              },
              '#withDimensionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withDimensionMixin(value): {
                dimension+: value,
              },
              dimension+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    dimension+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    dimension+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    dimension+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    dimension+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    dimension+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
              '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTags(value): {
                tags: value,
              },
              '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
              withTagsMixin(value): {
                tags+: value,
              },
              tags+:
                {
                  '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withKey(value): {
                    tags+: {
                      key: value,
                    },
                  },
                  '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptions(value): {
                    tags+: {
                      match_options:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withMatchOptionsMixin(value): {
                    tags+: {
                      match_options+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValues(value): {
                    tags+: {
                      values:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                  '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withValuesMixin(value): {
                    tags+: {
                      values+:
                        (if std.isArray(value)
                         then value
                         else [value]),
                    },
                  },
                },
            },
          '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTags(value): {
            filter+: {
              tags: value,
            },
          },
          '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTagsMixin(value): {
            filter+: {
              tags+: value,
            },
          },
          tags+:
            {
              '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withKey(value): {
                filter+: {
                  tags+: {
                    key: value,
                  },
                },
              },
              '#withMatchOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptions(value): {
                filter+: {
                  tags+: {
                    match_options:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withMatchOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withMatchOptionsMixin(value): {
                filter+: {
                  tags+: {
                    match_options+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValues(value): {
                filter+: {
                  tags+: {
                    values:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
              '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withValuesMixin(value): {
                filter+: {
                  tags+: {
                    values+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                },
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSearchString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSearchString(value): {
        search_string: value,
      },
      '#withSortBy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSortBy(value): {
        sort_by:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSortByMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSortByMixin(value): {
        sort_by+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      sort_by+:
        {
          '#': { help: '', name: 'sort_by' },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
          '#withSortOrder': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSortOrder(value): {
            sort_order: value,
          },
        },
      '#withTagKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTagKey(value): {
        tag_key: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTags(value): {
        tags:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTagsMixin(value): {
        tags+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTimePeriod': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimePeriod(value): {
        time_period: value,
      },
      '#withTimePeriodMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimePeriodMixin(value): {
        time_period+: value,
      },
      time_period+:
        {
          '#withEnd': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withEnd(value): {
            time_period+: {
              end: value,
            },
          },
          '#withStart': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withStart(value): {
            time_period+: {
              start: value,
            },
          },
        },
    },
}
