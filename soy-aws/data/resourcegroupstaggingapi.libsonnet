// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'resourcegroupstaggingapi',
  },
  aws_resourcegroupstaggingapi_resources:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_resourcegroupstaggingapi_resources+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExcludeCompliantResources': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withExcludeCompliantResources(value=true): {
        exclude_compliant_resources: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIncludeComplianceDetails': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withIncludeComplianceDetails(value=true): {
        include_compliance_details: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withResourceArnList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceArnList(value): {
        resource_arn_list:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceArnListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceArnListMixin(value): {
        resource_arn_list+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceTagMappingList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceTagMappingList(value): {
        resource_tag_mapping_list:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceTagMappingListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceTagMappingListMixin(value): {
        resource_tag_mapping_list+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      resource_tag_mapping_list+:
        {
          '#': { help: '', name: 'resource_tag_mapping_list' },
          '#withComplianceDetails': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceDetails(value): {
            compliance_details:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withComplianceDetailsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComplianceDetailsMixin(value): {
            compliance_details+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          compliance_details+:
            {
              '#': { help: '', name: 'compliance_details' },
              '#withComplianceStatus': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withComplianceStatus(value=true): {
                compliance_status: value,
              },
              '#withKeysWithNoncompliantValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withKeysWithNoncompliantValues(value): {
                keys_with_noncompliant_values:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withKeysWithNoncompliantValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withKeysWithNoncompliantValuesMixin(value): {
                keys_with_noncompliant_values+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withNonCompliantKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNonCompliantKeys(value): {
                non_compliant_keys:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withNonCompliantKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withNonCompliantKeysMixin(value): {
                non_compliant_keys+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
            },
          '#withResourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withResourceArn(value): {
            resource_arn: value,
          },
          '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTags(value): {
            tags: value,
          },
          '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
          withTagsMixin(value): {
            tags+: value,
          },
        },
      '#withResourceTypeFilters': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceTypeFilters(value): {
        resource_type_filters:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withResourceTypeFiltersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withResourceTypeFiltersMixin(value): {
        resource_type_filters+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTagFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTagFilter(value): {
        tag_filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTagFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTagFilterMixin(value): {
        tag_filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      tag_filter+:
        {
          '#': { help: '', name: 'tag_filter' },
          '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withKey(value): {
            key: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
    },
}
