// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'msk',
  },
  aws_msk_bootstrap_brokers:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_arn):
        {
          local this = self,
          data: {
            aws_msk_bootstrap_brokers: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withClusterArn(cluster_arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withBootstrapBrokers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokers(value): {
        spec+: {
          bootstrap_brokers: value,
        },
      },
      '#withBootstrapBrokersPublicSaslIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersPublicSaslIam(value): {
        spec+: {
          bootstrap_brokers_public_sasl_iam: value,
        },
      },
      '#withBootstrapBrokersPublicSaslScram': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersPublicSaslScram(value): {
        spec+: {
          bootstrap_brokers_public_sasl_scram: value,
        },
      },
      '#withBootstrapBrokersPublicTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersPublicTls(value): {
        spec+: {
          bootstrap_brokers_public_tls: value,
        },
      },
      '#withBootstrapBrokersSaslIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersSaslIam(value): {
        spec+: {
          bootstrap_brokers_sasl_iam: value,
        },
      },
      '#withBootstrapBrokersSaslScram': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersSaslScram(value): {
        spec+: {
          bootstrap_brokers_sasl_scram: value,
        },
      },
      '#withBootstrapBrokersTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersTls(value): {
        spec+: {
          bootstrap_brokers_tls: value,
        },
      },
      '#withBootstrapBrokersVpcConnectivitySaslIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersVpcConnectivitySaslIam(value): {
        spec+: {
          bootstrap_brokers_vpc_connectivity_sasl_iam: value,
        },
      },
      '#withBootstrapBrokersVpcConnectivitySaslScram': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersVpcConnectivitySaslScram(value): {
        spec+: {
          bootstrap_brokers_vpc_connectivity_sasl_scram: value,
        },
      },
      '#withBootstrapBrokersVpcConnectivityTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersVpcConnectivityTls(value): {
        spec+: {
          bootstrap_brokers_vpc_connectivity_tls: value,
        },
      },
      '#withClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterArn(value): {
        spec+: {
          cluster_arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_msk_broker_nodes:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_arn', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_arn):
        {
          local this = self,
          data: {
            aws_msk_broker_nodes: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withClusterArn(cluster_arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterArn(value): {
        spec+: {
          cluster_arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withNodeInfoList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNodeInfoList(value): {
        spec+: {
          node_info_list:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withNodeInfoListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNodeInfoListMixin(value): {
        spec+: {
          node_info_list+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      node_info_list+:
        {
          '#': { help: '', name: 'node_info_list' },
          '#withAttachedEniId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAttachedEniId(value): {
            attached_eni_id: value,
          },
          '#withBrokerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBrokerId(value): {
            broker_id: value,
          },
          '#withClientSubnet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClientSubnet(value): {
            client_subnet: value,
          },
          '#withClientVpcIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withClientVpcIpAddress(value): {
            client_vpc_ip_address: value,
          },
          '#withEndpoints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEndpoints(value): {
            endpoints:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withEndpointsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withEndpointsMixin(value): {
            endpoints+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNodeArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNodeArn(value): {
            node_arn: value,
          },
        },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
    },
  aws_msk_cluster:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'cluster_name', type: 'string' }], help: '' } },
      new(tf_resource_key, cluster_name):
        {
          local this = self,
          data: {
            aws_msk_cluster: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withClusterName(cluster_name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withBootstrapBrokers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokers(value): {
        spec+: {
          bootstrap_brokers: value,
        },
      },
      '#withBootstrapBrokersPublicSaslIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersPublicSaslIam(value): {
        spec+: {
          bootstrap_brokers_public_sasl_iam: value,
        },
      },
      '#withBootstrapBrokersPublicSaslScram': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersPublicSaslScram(value): {
        spec+: {
          bootstrap_brokers_public_sasl_scram: value,
        },
      },
      '#withBootstrapBrokersPublicTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersPublicTls(value): {
        spec+: {
          bootstrap_brokers_public_tls: value,
        },
      },
      '#withBootstrapBrokersSaslIam': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersSaslIam(value): {
        spec+: {
          bootstrap_brokers_sasl_iam: value,
        },
      },
      '#withBootstrapBrokersSaslScram': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersSaslScram(value): {
        spec+: {
          bootstrap_brokers_sasl_scram: value,
        },
      },
      '#withBootstrapBrokersTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBootstrapBrokersTls(value): {
        spec+: {
          bootstrap_brokers_tls: value,
        },
      },
      '#withBrokerNodeGroupInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBrokerNodeGroupInfo(value): {
        spec+: {
          broker_node_group_info:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withBrokerNodeGroupInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBrokerNodeGroupInfoMixin(value): {
        spec+: {
          broker_node_group_info+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      broker_node_group_info+:
        {
          '#': { help: '', name: 'broker_node_group_info' },
          '#withAzDistribution': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAzDistribution(value): {
            az_distribution: value,
          },
          '#withClientSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withClientSubnets(value): {
            client_subnets:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withClientSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withClientSubnetsMixin(value): {
            client_subnets+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConnectivityInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConnectivityInfo(value): {
            connectivity_info:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withConnectivityInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withConnectivityInfoMixin(value): {
            connectivity_info+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          connectivity_info+:
            {
              '#': { help: '', name: 'connectivity_info' },
              '#withPublicAccess': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPublicAccess(value): {
                public_access:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPublicAccessMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPublicAccessMixin(value): {
                public_access+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              public_access+:
                {
                  '#': { help: '', name: 'public_access' },
                  '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withType(value): {
                    type: value,
                  },
                },
              '#withVpcConnectivity': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVpcConnectivity(value): {
                vpc_connectivity:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withVpcConnectivityMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withVpcConnectivityMixin(value): {
                vpc_connectivity+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              vpc_connectivity+:
                {
                  '#': { help: '', name: 'vpc_connectivity' },
                  '#withClientAuthentication': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withClientAuthentication(value): {
                    client_authentication:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withClientAuthenticationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withClientAuthenticationMixin(value): {
                    client_authentication+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  client_authentication+:
                    {
                      '#': { help: '', name: 'client_authentication' },
                      '#withSasl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSasl(value): {
                        sasl:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      '#withSaslMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                      withSaslMixin(value): {
                        sasl+:
                          (if std.isArray(value)
                           then value
                           else [value]),
                      },
                      sasl+:
                        {
                          '#': { help: '', name: 'sasl' },
                          '#withIam': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withIam(value=true): {
                            iam: value,
                          },
                          '#withScram': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                          withScram(value=true): {
                            scram: value,
                          },
                        },
                      '#withTls': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withTls(value=true): {
                        tls: value,
                      },
                    },
                },
            },
          '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withInstanceType(value): {
            instance_type: value,
          },
          '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroups(value): {
            security_groups:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupsMixin(value): {
            security_groups+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStorageInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStorageInfo(value): {
            storage_info:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withStorageInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withStorageInfoMixin(value): {
            storage_info+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          storage_info+:
            {
              '#': { help: '', name: 'storage_info' },
              '#withEbsStorageInfo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEbsStorageInfo(value): {
                ebs_storage_info:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withEbsStorageInfoMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withEbsStorageInfoMixin(value): {
                ebs_storage_info+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              ebs_storage_info+:
                {
                  '#': { help: '', name: 'ebs_storage_info' },
                  '#withProvisionedThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withProvisionedThroughput(value): {
                    provisioned_throughput:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  '#withProvisionedThroughputMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
                  withProvisionedThroughputMixin(value): {
                    provisioned_throughput+:
                      (if std.isArray(value)
                       then value
                       else [value]),
                  },
                  provisioned_throughput+:
                    {
                      '#': { help: '', name: 'provisioned_throughput' },
                      '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
                      withEnabled(value=true): {
                        enabled: value,
                      },
                      '#withVolumeThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                      withVolumeThroughput(value): {
                        volume_throughput: value,
                      },
                    },
                  '#withVolumeSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withVolumeSize(value): {
                    volume_size: value,
                  },
                },
            },
        },
      '#withClusterName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterName(value): {
        spec+: {
          cluster_name: value,
        },
      },
      '#withClusterUuid': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClusterUuid(value): {
        spec+: {
          cluster_uuid: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withKafkaVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKafkaVersion(value): {
        spec+: {
          kafka_version: value,
        },
      },
      '#withNumberOfBrokerNodes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withNumberOfBrokerNodes(value): {
        spec+: {
          number_of_broker_nodes: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withZookeeperConnectString': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withZookeeperConnectString(value): {
        spec+: {
          zookeeper_connect_string: value,
        },
      },
      '#withZookeeperConnectStringTls': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withZookeeperConnectStringTls(value): {
        spec+: {
          zookeeper_connect_string_tls: value,
        },
      },
    },
  aws_msk_configuration:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'name', type: 'string' }], help: '' } },
      new(tf_resource_key, name):
        {
          local this = self,
          data: {
            aws_msk_configuration: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withName(name),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        spec+: {
          description: value,
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withKafkaVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKafkaVersions(value): {
        spec+: {
          kafka_versions:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withKafkaVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKafkaVersionsMixin(value): {
        spec+: {
          kafka_versions+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withLatestRevision': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withLatestRevision(value): {
        spec+: {
          latest_revision: value,
        },
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        spec+: {
          name: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withServerProperties': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServerProperties(value): {
        spec+: {
          server_properties: value,
        },
      },
    },
  aws_msk_kafka_version:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        {
          local this = self,
          data: {
            aws_msk_kafka_version: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withPreferredVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredVersions(value): {
        spec+: {
          preferred_versions:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withPreferredVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredVersionsMixin(value): {
        spec+: {
          preferred_versions+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        spec+: {
          status: value,
        },
      },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersion(value): {
        spec+: {
          version: value,
        },
      },
    },
  aws_msk_vpc_connection:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'arn', type: 'string' }], help: '' } },
      new(tf_resource_key, arn):
        {
          local this = self,
          data: {
            aws_msk_vpc_connection: {
              [this.tf_resource_key]: this.spec,
            },
          },
          spec:: {},
        }
        + self.withTfResourceKey(tf_resource_key)
        + self.withArn(arn),
      withTfResourceKey(tf_resource_key): {
        tf_resource_key:: tf_resource_key,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        spec+: {
          arn: value,
        },
      },
      '#withAuthentication': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAuthentication(value): {
        spec+: {
          authentication: value,
        },
      },
      '#withClientSubnets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientSubnets(value): {
        spec+: {
          client_subnets:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withClientSubnetsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientSubnetsMixin(value): {
        spec+: {
          client_subnets+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        spec+: {
          count: value,
        },
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        spec+: {
          depends_on:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        spec+: {
          depends_on+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        spec+: {
          id: value,
        },
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        spec+: {
          provider: value,
        },
      },
      '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroups(value): {
        spec+: {
          security_groups:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupsMixin(value): {
        spec+: {
          security_groups+:
            (if std.isArray(value)
             then value
             else [value]),
        },
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        spec+: {
          tags: value,
        },
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        spec+: {
          tags+: value,
        },
      },
      '#withTargetClusterArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTargetClusterArn(value): {
        spec+: {
          target_cluster_arn: value,
        },
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        spec+: {
          vpc_id: value,
        },
      },
    },
}
