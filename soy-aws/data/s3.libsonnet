// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 's3',
  },
  aws_s3_account_public_access_block:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_account_public_access_block: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAccountId(value): {
        account_id: value,
      },
      '#withBlockPublicAcls': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withBlockPublicAcls(value=true): {
        block_public_acls: value,
      },
      '#withBlockPublicPolicy': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withBlockPublicPolicy(value=true): {
        block_public_policy: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIgnorePublicAcls': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withIgnorePublicAcls(value=true): {
        ignore_public_acls: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRestrictPublicBuckets': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withRestrictPublicBuckets(value=true): {
        restrict_public_buckets: value,
      },
    },
  aws_s3_bucket:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bucket', type: 'string' }], help: '' } },
      new(tf_resource_key, bucket):
        self.withTfResourceKey(tf_resource_key)
        + self.withBucket(bucket),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_bucket: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucket(value): {
        bucket: value,
      },
      '#withBucketDomainName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucketDomainName(value): {
        bucket_domain_name: value,
      },
      '#withBucketRegionalDomainName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucketRegionalDomainName(value): {
        bucket_regional_domain_name: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withHostedZoneId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostedZoneId(value): {
        hosted_zone_id: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRegion(value): {
        region: value,
      },
      '#withWebsiteDomain': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWebsiteDomain(value): {
        website_domain: value,
      },
      '#withWebsiteEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWebsiteEndpoint(value): {
        website_endpoint: value,
      },
    },
  aws_s3_bucket_object:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bucket', type: 'string' }, { default: null, enums: null, name: 'key', type: 'string' }], help: '' } },
      new(tf_resource_key, bucket, key):
        self.withTfResourceKey(tf_resource_key)
        + self.withBucket(bucket)
        + self.withKey(key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_bucket_object: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBody': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBody(value): {
        body: value,
      },
      '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucket(value): {
        bucket: value,
      },
      '#withBucketKeyEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withBucketKeyEnabled(value=true): {
        bucket_key_enabled: value,
      },
      '#withCacheControl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCacheControl(value): {
        cache_control: value,
      },
      '#withContentDisposition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentDisposition(value): {
        content_disposition: value,
      },
      '#withContentEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentEncoding(value): {
        content_encoding: value,
      },
      '#withContentLanguage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentLanguage(value): {
        content_language: value,
      },
      '#withContentLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withContentLength(value): {
        content_length: value,
      },
      '#withContentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentType(value): {
        content_type: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withExpiration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpiration(value): {
        expiration: value,
      },
      '#withExpires': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpires(value): {
        expires: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKey(value): {
        key: value,
      },
      '#withLastModified': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModified(value): {
        last_modified: value,
      },
      '#withMetadata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMetadata(value): {
        metadata: value,
      },
      '#withMetadataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMetadataMixin(value): {
        metadata+: value,
      },
      '#withObjectLockLegalHoldStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withObjectLockLegalHoldStatus(value): {
        object_lock_legal_hold_status: value,
      },
      '#withObjectLockMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withObjectLockMode(value): {
        object_lock_mode: value,
      },
      '#withObjectLockRetainUntilDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withObjectLockRetainUntilDate(value): {
        object_lock_retain_until_date: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRange(value): {
        range: value,
      },
      '#withServerSideEncryption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServerSideEncryption(value): {
        server_side_encryption: value,
      },
      '#withSseKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSseKmsKeyId(value): {
        sse_kms_key_id: value,
      },
      '#withStorageClass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageClass(value): {
        storage_class: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withVersionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersionId(value): {
        version_id: value,
      },
      '#withWebsiteRedirectLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWebsiteRedirectLocation(value): {
        website_redirect_location: value,
      },
    },
  aws_s3_bucket_objects:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bucket', type: 'string' }], help: '' } },
      new(tf_resource_key, bucket):
        self.withTfResourceKey(tf_resource_key)
        + self.withBucket(bucket),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_bucket_objects: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucket(value): {
        bucket: value,
      },
      '#withCommonPrefixes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCommonPrefixes(value): {
        common_prefixes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCommonPrefixesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCommonPrefixesMixin(value): {
        common_prefixes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDelimiter(value): {
        delimiter: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEncodingType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEncodingType(value): {
        encoding_type: value,
      },
      '#withFetchOwner': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withFetchOwner(value=true): {
        fetch_owner: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKeys(value): {
        keys:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKeysMixin(value): {
        keys+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMaxKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxKeys(value): {
        max_keys: value,
      },
      '#withOwners': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOwners(value): {
        owners:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOwnersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOwnersMixin(value): {
        owners+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPrefix(value): {
        prefix: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withStartAfter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStartAfter(value): {
        start_after: value,
      },
    },
  aws_s3_bucket_policy:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bucket', type: 'string' }], help: '' } },
      new(tf_resource_key, bucket):
        self.withTfResourceKey(tf_resource_key)
        + self.withBucket(bucket),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_bucket_policy: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucket(value): {
        bucket: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withPolicy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPolicy(value): {
        policy: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_s3_directory_buckets:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_directory_buckets: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArns(value): {
        arns:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withArnsMixin(value): {
        arns+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBuckets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBuckets(value): {
        buckets:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBucketsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBucketsMixin(value): {
        buckets+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
    },
  aws_s3_object:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bucket', type: 'string' }, { default: null, enums: null, name: 'key', type: 'string' }], help: '' } },
      new(tf_resource_key, bucket, key):
        self.withTfResourceKey(tf_resource_key)
        + self.withBucket(bucket)
        + self.withKey(key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_object: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBody': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBody(value): {
        body: value,
      },
      '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucket(value): {
        bucket: value,
      },
      '#withBucketKeyEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withBucketKeyEnabled(value=true): {
        bucket_key_enabled: value,
      },
      '#withCacheControl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCacheControl(value): {
        cache_control: value,
      },
      '#withChecksumCrc32': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withChecksumCrc32(value): {
        checksum_crc32: value,
      },
      '#withChecksumCrc32c': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withChecksumCrc32c(value): {
        checksum_crc32c: value,
      },
      '#withChecksumMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withChecksumMode(value): {
        checksum_mode: value,
      },
      '#withChecksumSha1': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withChecksumSha1(value): {
        checksum_sha1: value,
      },
      '#withChecksumSha256': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withChecksumSha256(value): {
        checksum_sha256: value,
      },
      '#withContentDisposition': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentDisposition(value): {
        content_disposition: value,
      },
      '#withContentEncoding': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentEncoding(value): {
        content_encoding: value,
      },
      '#withContentLanguage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentLanguage(value): {
        content_language: value,
      },
      '#withContentLength': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withContentLength(value): {
        content_length: value,
      },
      '#withContentType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withContentType(value): {
        content_type: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEtag': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEtag(value): {
        etag: value,
      },
      '#withExpiration': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpiration(value): {
        expiration: value,
      },
      '#withExpires': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withExpires(value): {
        expires: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKey': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withKey(value): {
        key: value,
      },
      '#withLastModified': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLastModified(value): {
        last_modified: value,
      },
      '#withMetadata': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMetadata(value): {
        metadata: value,
      },
      '#withMetadataMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withMetadataMixin(value): {
        metadata+: value,
      },
      '#withObjectLockLegalHoldStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withObjectLockLegalHoldStatus(value): {
        object_lock_legal_hold_status: value,
      },
      '#withObjectLockMode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withObjectLockMode(value): {
        object_lock_mode: value,
      },
      '#withObjectLockRetainUntilDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withObjectLockRetainUntilDate(value): {
        object_lock_retain_until_date: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRange(value): {
        range: value,
      },
      '#withServerSideEncryption': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServerSideEncryption(value): {
        server_side_encryption: value,
      },
      '#withSseKmsKeyId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSseKmsKeyId(value): {
        sse_kms_key_id: value,
      },
      '#withStorageClass': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStorageClass(value): {
        storage_class: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withVersionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVersionId(value): {
        version_id: value,
      },
      '#withWebsiteRedirectLocation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWebsiteRedirectLocation(value): {
        website_redirect_location: value,
      },
    },
  aws_s3_objects:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'bucket', type: 'string' }], help: '' } },
      new(tf_resource_key, bucket):
        self.withTfResourceKey(tf_resource_key)
        + self.withBucket(bucket),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data: {
              aws_s3_objects: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withBucket': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBucket(value): {
        bucket: value,
      },
      '#withCommonPrefixes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCommonPrefixes(value): {
        common_prefixes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCommonPrefixesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withCommonPrefixesMixin(value): {
        common_prefixes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDelimiter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDelimiter(value): {
        delimiter: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEncodingType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEncodingType(value): {
        encoding_type: value,
      },
      '#withFetchOwner': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withFetchOwner(value=true): {
        fetch_owner: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKeys(value): {
        keys:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withKeysMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withKeysMixin(value): {
        keys+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMaxKeys': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxKeys(value): {
        max_keys: value,
      },
      '#withOwners': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOwners(value): {
        owners:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withOwnersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withOwnersMixin(value): {
        owners+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPrefix': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPrefix(value): {
        prefix: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRequestCharged': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRequestCharged(value): {
        request_charged: value,
      },
      '#withRequestPayer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withRequestPayer(value): {
        request_payer: value,
      },
      '#withStartAfter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStartAfter(value): {
        start_after: value,
      },
    },
}
