// DO NOT EDIT: this file is generated by soysonnet
{
  '#': {
    help: '',
    name: 'ec2',
  },
  aws_ec2_capacity_block_offering:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'capacity_duration_hours', type: 'number' }, { default: null, enums: null, name: 'instance_count', type: 'number' }, { default: null, enums: null, name: 'instance_type', type: 'string' }], help: '' } },
      new(tf_resource_key, capacity_duration_hours, instance_count, instance_type):
        self.withTfResourceKey(tf_resource_key)
        + self.withCapacityDurationHours(capacity_duration_hours)
        + self.withInstanceCount(instance_count)
        + self.withInstanceType(instance_type),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_capacity_block_offering+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAvailabilityZone(value): {
        availability_zone: value,
      },
      '#withCapacityBlockOfferingId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCapacityBlockOfferingId(value): {
        capacity_block_offering_id: value,
      },
      '#withCapacityDurationHours': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCapacityDurationHours(value): {
        capacity_duration_hours: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCurrencyCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withCurrencyCode(value): {
        currency_code: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEndDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEndDateRange(value): {
        end_date_range: value,
      },
      '#withInstanceCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withInstanceCount(value): {
        instance_count: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withStartDateRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStartDateRange(value): {
        start_date_range: value,
      },
      '#withTenancy': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTenancy(value): {
        tenancy: value,
      },
      '#withUpfrontFee': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withUpfrontFee(value): {
        upfront_fee: value,
      },
    },
  aws_ec2_client_vpn_endpoint:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_client_vpn_endpoint+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAuthenticationOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAuthenticationOptions(value): {
        authentication_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAuthenticationOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAuthenticationOptionsMixin(value): {
        authentication_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      authentication_options+:
        {
          '#': { help: '', name: 'authentication_options' },
          '#withActiveDirectoryId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withActiveDirectoryId(value): {
            active_directory_id: value,
          },
          '#withRootCertificateChainArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRootCertificateChainArn(value): {
            root_certificate_chain_arn: value,
          },
          '#withSamlProviderArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSamlProviderArn(value): {
            saml_provider_arn: value,
          },
          '#withSelfServiceSamlProviderArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSelfServiceSamlProviderArn(value): {
            self_service_saml_provider_arn: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withClientCidrBlock': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClientCidrBlock(value): {
        client_cidr_block: value,
      },
      '#withClientConnectOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientConnectOptions(value): {
        client_connect_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClientConnectOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientConnectOptionsMixin(value): {
        client_connect_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      client_connect_options+:
        {
          '#': { help: '', name: 'client_connect_options' },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
          '#withLambdaFunctionArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLambdaFunctionArn(value): {
            lambda_function_arn: value,
          },
        },
      '#withClientLoginBannerOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientLoginBannerOptions(value): {
        client_login_banner_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withClientLoginBannerOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withClientLoginBannerOptionsMixin(value): {
        client_login_banner_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      client_login_banner_options+:
        {
          '#': { help: '', name: 'client_login_banner_options' },
          '#withBannerText': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withBannerText(value): {
            banner_text: value,
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
        },
      '#withClientVpnEndpointId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withClientVpnEndpointId(value): {
        client_vpn_endpoint_id: value,
      },
      '#withConnectionLogOptions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConnectionLogOptions(value): {
        connection_log_options:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withConnectionLogOptionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withConnectionLogOptionsMixin(value): {
        connection_log_options+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      connection_log_options+:
        {
          '#': { help: '', name: 'connection_log_options' },
          '#withCloudwatchLogGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCloudwatchLogGroup(value): {
            cloudwatch_log_group: value,
          },
          '#withCloudwatchLogStream': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCloudwatchLogStream(value): {
            cloudwatch_log_stream: value,
          },
          '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
          withEnabled(value=true): {
            enabled: value,
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDnsName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDnsName(value): {
        dns_name: value,
      },
      '#withDnsServers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDnsServers(value): {
        dns_servers:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDnsServersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDnsServersMixin(value): {
        dns_servers+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSecurityGroupIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIds(value): {
        security_group_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSecurityGroupIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSecurityGroupIdsMixin(value): {
        security_group_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSelfServicePortal': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSelfServicePortal(value): {
        self_service_portal: value,
      },
      '#withSelfServicePortalUrl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSelfServicePortalUrl(value): {
        self_service_portal_url: value,
      },
      '#withServerCertificateArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withServerCertificateArn(value): {
        server_certificate_arn: value,
      },
      '#withSessionTimeoutHours': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSessionTimeoutHours(value): {
        session_timeout_hours: value,
      },
      '#withSplitTunnel': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withSplitTunnel(value=true): {
        split_tunnel: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransportProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransportProtocol(value): {
        transport_protocol: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
      '#withVpnPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withVpnPort(value): {
        vpn_port: value,
      },
    },
  aws_ec2_coip_pool:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_coip_pool+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLocalGatewayRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocalGatewayRouteTableId(value): {
        local_gateway_route_table_id: value,
      },
      '#withPoolCidrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolCidrs(value): {
        pool_cidrs:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPoolCidrsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolCidrsMixin(value): {
        pool_cidrs+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPoolId(value): {
        pool_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_coip_pools:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_coip_pools+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withPoolIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolIds(value): {
        pool_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPoolIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolIdsMixin(value): {
        pool_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_host:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_host+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAssetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAssetId(value): {
        asset_id: value,
      },
      '#withAutoPlacement': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAutoPlacement(value): {
        auto_placement: value,
      },
      '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAvailabilityZone(value): {
        availability_zone: value,
      },
      '#withCores': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCores(value): {
        cores: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withHostId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostId(value): {
        host_id: value,
      },
      '#withHostRecovery': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHostRecovery(value): {
        host_recovery: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceFamily(value): {
        instance_family: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withOutpostArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOutpostArn(value): {
        outpost_arn: value,
      },
      '#withOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwnerId(value): {
        owner_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSockets': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSockets(value): {
        sockets: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTotalVcpus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalVcpus(value): {
        total_vcpus: value,
      },
    },
  aws_ec2_instance_type:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'instance_type', type: 'string' }], help: '' } },
      new(tf_resource_key, instance_type):
        self.withTfResourceKey(tf_resource_key)
        + self.withInstanceType(instance_type),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_instance_type+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAutoRecoverySupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withAutoRecoverySupported(value=true): {
        auto_recovery_supported: value,
      },
      '#withBandwidthWeightings': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBandwidthWeightings(value): {
        bandwidth_weightings:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBandwidthWeightingsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBandwidthWeightingsMixin(value): {
        bandwidth_weightings+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBareMetal': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withBareMetal(value=true): {
        bare_metal: value,
      },
      '#withBootModes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBootModes(value): {
        boot_modes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBootModesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBootModesMixin(value): {
        boot_modes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBurstablePerformanceSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withBurstablePerformanceSupported(value=true): {
        burstable_performance_supported: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withCurrentGeneration': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withCurrentGeneration(value=true): {
        current_generation: value,
      },
      '#withDedicatedHostsSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDedicatedHostsSupported(value=true): {
        dedicated_hosts_supported: value,
      },
      '#withDefaultCores': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultCores(value): {
        default_cores: value,
      },
      '#withDefaultNetworkCardIndex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultNetworkCardIndex(value): {
        default_network_card_index: value,
      },
      '#withDefaultThreadsPerCore': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultThreadsPerCore(value): {
        default_threads_per_core: value,
      },
      '#withDefaultVcpus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDefaultVcpus(value): {
        default_vcpus: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEbsEncryptionSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEbsEncryptionSupport(value): {
        ebs_encryption_support: value,
      },
      '#withEbsNvmeSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEbsNvmeSupport(value): {
        ebs_nvme_support: value,
      },
      '#withEbsOptimizedSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEbsOptimizedSupport(value): {
        ebs_optimized_support: value,
      },
      '#withEbsPerformanceBaselineBandwidth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEbsPerformanceBaselineBandwidth(value): {
        ebs_performance_baseline_bandwidth: value,
      },
      '#withEbsPerformanceBaselineIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEbsPerformanceBaselineIops(value): {
        ebs_performance_baseline_iops: value,
      },
      '#withEbsPerformanceBaselineThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEbsPerformanceBaselineThroughput(value): {
        ebs_performance_baseline_throughput: value,
      },
      '#withEbsPerformanceMaximumBandwidth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEbsPerformanceMaximumBandwidth(value): {
        ebs_performance_maximum_bandwidth: value,
      },
      '#withEbsPerformanceMaximumIops': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEbsPerformanceMaximumIops(value): {
        ebs_performance_maximum_iops: value,
      },
      '#withEbsPerformanceMaximumThroughput': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEbsPerformanceMaximumThroughput(value): {
        ebs_performance_maximum_throughput: value,
      },
      '#withEfaMaximumInterfaces': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withEfaMaximumInterfaces(value): {
        efa_maximum_interfaces: value,
      },
      '#withEfaSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEfaSupported(value=true): {
        efa_supported: value,
      },
      '#withEnaSrdSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnaSrdSupported(value=true): {
        ena_srd_supported: value,
      },
      '#withEnaSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withEnaSupport(value): {
        ena_support: value,
      },
      '#withEncryptionInTransitSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEncryptionInTransitSupported(value=true): {
        encryption_in_transit_supported: value,
      },
      '#withFpgas': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFpgas(value): {
        fpgas:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFpgasMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFpgasMixin(value): {
        fpgas+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      fpgas+:
        {
          '#': { help: '', name: 'fpgas' },
          '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCount(value): {
            count: value,
          },
          '#withManufacturer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withManufacturer(value): {
            manufacturer: value,
          },
          '#withMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMemorySize(value): {
            memory_size: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withFreeTierEligible': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withFreeTierEligible(value=true): {
        free_tier_eligible: value,
      },
      '#withGpus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGpus(value): {
        gpus:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withGpusMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withGpusMixin(value): {
        gpus+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      gpus+:
        {
          '#': { help: '', name: 'gpus' },
          '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCount(value): {
            count: value,
          },
          '#withManufacturer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withManufacturer(value): {
            manufacturer: value,
          },
          '#withMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMemorySize(value): {
            memory_size: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withHibernationSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withHibernationSupported(value=true): {
        hibernation_supported: value,
      },
      '#withHypervisor': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withHypervisor(value): {
        hypervisor: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInferenceAccelerators': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceAccelerators(value): {
        inference_accelerators:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInferenceAcceleratorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInferenceAcceleratorsMixin(value): {
        inference_accelerators+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      inference_accelerators+:
        {
          '#': { help: '', name: 'inference_accelerators' },
          '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCount(value): {
            count: value,
          },
          '#withManufacturer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withManufacturer(value): {
            manufacturer: value,
          },
          '#withMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMemorySize(value): {
            memory_size: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withInstanceDisks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceDisks(value): {
        instance_disks:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstanceDisksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceDisksMixin(value): {
        instance_disks+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      instance_disks+:
        {
          '#': { help: '', name: 'instance_disks' },
          '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCount(value): {
            count: value,
          },
          '#withSize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSize(value): {
            size: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withInstanceStorageSupported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withInstanceStorageSupported(value=true): {
        instance_storage_supported: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withIpv6Supported': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withIpv6Supported(value=true): {
        ipv6_supported: value,
      },
      '#withMaximumIpv4AddressesPerInterface': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaximumIpv4AddressesPerInterface(value): {
        maximum_ipv4_addresses_per_interface: value,
      },
      '#withMaximumIpv6AddressesPerInterface': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaximumIpv6AddressesPerInterface(value): {
        maximum_ipv6_addresses_per_interface: value,
      },
      '#withMaximumNetworkCards': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaximumNetworkCards(value): {
        maximum_network_cards: value,
      },
      '#withMaximumNetworkInterfaces': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaximumNetworkInterfaces(value): {
        maximum_network_interfaces: value,
      },
      '#withMediaAccelerators': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMediaAccelerators(value): {
        media_accelerators:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMediaAcceleratorsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMediaAcceleratorsMixin(value): {
        media_accelerators+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      media_accelerators+:
        {
          '#': { help: '', name: 'media_accelerators' },
          '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCount(value): {
            count: value,
          },
          '#withManufacturer': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withManufacturer(value): {
            manufacturer: value,
          },
          '#withMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMemorySize(value): {
            memory_size: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMemorySize(value): {
        memory_size: value,
      },
      '#withNetworkCards': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkCards(value): {
        network_cards:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNetworkCardsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNetworkCardsMixin(value): {
        network_cards+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      network_cards+:
        {
          '#': { help: '', name: 'network_cards' },
          '#withBaselineBandwidth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withBaselineBandwidth(value): {
            baseline_bandwidth: value,
          },
          '#withIndex': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withIndex(value): {
            index: value,
          },
          '#withMaximumInterfaces': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMaximumInterfaces(value): {
            maximum_interfaces: value,
          },
          '#withPeakBandwidth': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPeakBandwidth(value): {
            peak_bandwidth: value,
          },
          '#withPerformance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPerformance(value): {
            performance: value,
          },
        },
      '#withNetworkPerformance': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkPerformance(value): {
        network_performance: value,
      },
      '#withNeuronDevices': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNeuronDevices(value): {
        neuron_devices:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNeuronDevicesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNeuronDevicesMixin(value): {
        neuron_devices+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      neuron_devices+:
        {
          '#': { help: '', name: 'neuron_devices' },
          '#withCoreCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCoreCount(value): {
            core_count: value,
          },
          '#withCoreVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCoreVersion(value): {
            core_version: value,
          },
          '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withCount(value): {
            count: value,
          },
          '#withMemorySize': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withMemorySize(value): {
            memory_size: value,
          },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
        },
      '#withNitroEnclavesSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNitroEnclavesSupport(value): {
        nitro_enclaves_support: value,
      },
      '#withNitroTpmSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNitroTpmSupport(value): {
        nitro_tpm_support: value,
      },
      '#withNitroTpmSupportedVersions': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNitroTpmSupportedVersions(value): {
        nitro_tpm_supported_versions:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withNitroTpmSupportedVersionsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withNitroTpmSupportedVersionsMixin(value): {
        nitro_tpm_supported_versions+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPhcSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPhcSupport(value): {
        phc_support: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSupportedArchitectures': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedArchitectures(value): {
        supported_architectures:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedArchitecturesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedArchitecturesMixin(value): {
        supported_architectures+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedCpuFeatures': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedCpuFeatures(value): {
        supported_cpu_features:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedCpuFeaturesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedCpuFeaturesMixin(value): {
        supported_cpu_features+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedPlacementStrategies': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedPlacementStrategies(value): {
        supported_placement_strategies:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedPlacementStrategiesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedPlacementStrategiesMixin(value): {
        supported_placement_strategies+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedRootDeviceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedRootDeviceTypes(value): {
        supported_root_device_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedRootDeviceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedRootDeviceTypesMixin(value): {
        supported_root_device_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedUsagesClasses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedUsagesClasses(value): {
        supported_usages_classes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedUsagesClassesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedUsagesClassesMixin(value): {
        supported_usages_classes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedVirtualizationTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedVirtualizationTypes(value): {
        supported_virtualization_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSupportedVirtualizationTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSupportedVirtualizationTypesMixin(value): {
        supported_virtualization_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSustainedClockSpeed': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withSustainedClockSpeed(value): {
        sustained_clock_speed: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTotalFpgaMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalFpgaMemory(value): {
        total_fpga_memory: value,
      },
      '#withTotalGpuMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalGpuMemory(value): {
        total_gpu_memory: value,
      },
      '#withTotalInferenceMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalInferenceMemory(value): {
        total_inference_memory: value,
      },
      '#withTotalInstanceStorage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalInstanceStorage(value): {
        total_instance_storage: value,
      },
      '#withTotalMediaMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalMediaMemory(value): {
        total_media_memory: value,
      },
      '#withTotalNeuronDeviceMemory': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalNeuronDeviceMemory(value): {
        total_neuron_device_memory: value,
      },
      '#withValidCores': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidCores(value): {
        valid_cores:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidCoresMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidCoresMixin(value): {
        valid_cores+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidThreadsPerCore': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidThreadsPerCore(value): {
        valid_threads_per_core:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withValidThreadsPerCoreMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withValidThreadsPerCoreMixin(value): {
        valid_threads_per_core+:
          (if std.isArray(value)
           then value
           else [value]),
      },
    },
  aws_ec2_instance_type_offering:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_instance_type_offering+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withLocationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocationType(value): {
        location_type: value,
      },
      '#withPreferredInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredInstanceTypes(value): {
        preferred_instance_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPreferredInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPreferredInstanceTypesMixin(value): {
        preferred_instance_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_instance_type_offerings:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_instance_type_offerings+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceTypes(value): {
        instance_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceTypesMixin(value): {
        instance_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocationType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocationType(value): {
        location_type: value,
      },
      '#withLocationTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocationTypes(value): {
        location_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocationTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocationTypesMixin(value): {
        location_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocations(value): {
        locations:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocationsMixin(value): {
        locations+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_instance_types:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_instance_types+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceTypes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceTypes(value): {
        instance_types:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInstanceTypesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInstanceTypesMixin(value): {
        instance_types+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_local_gateway:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_local_gateway+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withOutpostArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOutpostArn(value): {
        outpost_arn: value,
      },
      '#withOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwnerId(value): {
        owner_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_local_gateway_route_table:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_local_gateway_route_table+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLocalGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocalGatewayId(value): {
        local_gateway_id: value,
      },
      '#withLocalGatewayRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocalGatewayRouteTableId(value): {
        local_gateway_route_table_id: value,
      },
      '#withOutpostArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOutpostArn(value): {
        outpost_arn: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_local_gateway_route_tables:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_local_gateway_route_tables+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_local_gateway_virtual_interface:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_local_gateway_virtual_interface+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLocalAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocalAddress(value): {
        local_address: value,
      },
      '#withLocalBgpAsn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withLocalBgpAsn(value): {
        local_bgp_asn: value,
      },
      '#withLocalGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocalGatewayId(value): {
        local_gateway_id: value,
      },
      '#withLocalGatewayVirtualInterfaceIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocalGatewayVirtualInterfaceIds(value): {
        local_gateway_virtual_interface_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocalGatewayVirtualInterfaceIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocalGatewayVirtualInterfaceIdsMixin(value): {
        local_gateway_virtual_interface_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPeerAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPeerAddress(value): {
        peer_address: value,
      },
      '#withPeerBgpAsn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withPeerBgpAsn(value): {
        peer_bgp_asn: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withVlan': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withVlan(value): {
        vlan: value,
      },
    },
  aws_ec2_local_gateway_virtual_interface_group:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_local_gateway_virtual_interface_group+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withLocalGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withLocalGatewayId(value): {
        local_gateway_id: value,
      },
      '#withLocalGatewayVirtualInterfaceIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocalGatewayVirtualInterfaceIds(value): {
        local_gateway_virtual_interface_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocalGatewayVirtualInterfaceIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocalGatewayVirtualInterfaceIdsMixin(value): {
        local_gateway_virtual_interface_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_local_gateway_virtual_interface_groups:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_local_gateway_virtual_interface_groups+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocalGatewayVirtualInterfaceIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocalGatewayVirtualInterfaceIds(value): {
        local_gateway_virtual_interface_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withLocalGatewayVirtualInterfaceIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withLocalGatewayVirtualInterfaceIdsMixin(value): {
        local_gateway_virtual_interface_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_local_gateways:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_local_gateways+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_managed_prefix_list:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_managed_prefix_list+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAddressFamily': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAddressFamily(value): {
        address_family: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEntries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEntries(value): {
        entries:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEntriesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withEntriesMixin(value): {
        entries+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      entries+:
        {
          '#': { help: '', name: 'entries' },
          '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withCidr(value): {
            cidr: value,
          },
          '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDescription(value): {
            description: value,
          },
        },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withMaxEntries': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withMaxEntries(value): {
        max_entries: value,
      },
      '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withName(value): {
        name: value,
      },
      '#withOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwnerId(value): {
        owner_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withVersion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withVersion(value): {
        version: value,
      },
    },
  aws_ec2_managed_prefix_lists:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_managed_prefix_lists+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
  aws_ec2_network_insights_analysis:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_network_insights_analysis+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAlternatePathHints': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAlternatePathHints(value): {
        alternate_path_hints:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAlternatePathHintsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAlternatePathHintsMixin(value): {
        alternate_path_hints+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      alternate_path_hints+:
        {
          '#': { help: '', name: 'alternate_path_hints' },
          '#withComponentArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withComponentArn(value): {
            component_arn: value,
          },
          '#withComponentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withComponentId(value): {
            component_id: value,
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExplanations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExplanations(value): {
        explanations:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withExplanationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withExplanationsMixin(value): {
        explanations+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      explanations+:
        {
          '#': { help: '', name: 'explanations' },
          '#withAcl': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAcl(value): {
            acl:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAclMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAclMixin(value): {
            acl+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          acl+:
            {
              '#': { help: '', name: 'acl' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withAclRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAclRule(value): {
            acl_rule:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAclRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAclRuleMixin(value): {
            acl_rule+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          acl_rule+:
            {
              '#': { help: '', name: 'acl_rule' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
              '#withEgress': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEgress(value=true): {
                egress: value,
              },
              '#withPortRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRange(value): {
                port_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRangeMixin(value): {
                port_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_range+:
                {
                  '#': { help: '', name: 'port_range' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withRuleAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRuleAction(value): {
                rule_action: value,
              },
              '#withRuleNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withRuleNumber(value): {
                rule_number: value,
              },
            },
          '#withAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withAddress(value): {
            address: value,
          },
          '#withAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAddresses(value): {
            addresses:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAddressesMixin(value): {
            addresses+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAttachedTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAttachedTo(value): {
            attached_to:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAttachedToMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAttachedToMixin(value): {
            attached_to+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          attached_to+:
            {
              '#': { help: '', name: 'attached_to' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withAvailabilityZones': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAvailabilityZones(value): {
            availability_zones:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAvailabilityZonesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAvailabilityZonesMixin(value): {
            availability_zones+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCidrs': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCidrs(value): {
            cidrs:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCidrsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCidrsMixin(value): {
            cidrs+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withClassicLoadBalancerListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withClassicLoadBalancerListener(value): {
            classic_load_balancer_listener:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withClassicLoadBalancerListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withClassicLoadBalancerListenerMixin(value): {
            classic_load_balancer_listener+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          classic_load_balancer_listener+:
            {
              '#': { help: '', name: 'classic_load_balancer_listener' },
              '#withInstancePort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withInstancePort(value): {
                instance_port: value,
              },
              '#withLoadBalancerPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withLoadBalancerPort(value): {
                load_balancer_port: value,
              },
            },
          '#withComponent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComponent(value): {
            component:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withComponentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComponentMixin(value): {
            component+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          component+:
            {
              '#': { help: '', name: 'component' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withCustomerGateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomerGateway(value): {
            customer_gateway:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withCustomerGatewayMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withCustomerGatewayMixin(value): {
            customer_gateway+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          customer_gateway+:
            {
              '#': { help: '', name: 'customer_gateway' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestination(value): {
            destination:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDestinationMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationMixin(value): {
            destination+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          destination+:
            {
              '#': { help: '', name: 'destination' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withDestinationVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationVpc(value): {
            destination_vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDestinationVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationVpcMixin(value): {
            destination_vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          destination_vpc+:
            {
              '#': { help: '', name: 'destination_vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withDirection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDirection(value): {
            direction: value,
          },
          '#withElasticLoadBalancerListener': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElasticLoadBalancerListener(value): {
            elastic_load_balancer_listener:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withElasticLoadBalancerListenerMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withElasticLoadBalancerListenerMixin(value): {
            elastic_load_balancer_listener+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          elastic_load_balancer_listener+:
            {
              '#': { help: '', name: 'elastic_load_balancer_listener' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withExplanationCode': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withExplanationCode(value): {
            explanation_code: value,
          },
          '#withIngressRouteTable': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIngressRouteTable(value): {
            ingress_route_table:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withIngressRouteTableMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withIngressRouteTableMixin(value): {
            ingress_route_table+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          ingress_route_table+:
            {
              '#': { help: '', name: 'ingress_route_table' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withInternetGateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInternetGateway(value): {
            internet_gateway:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInternetGatewayMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInternetGatewayMixin(value): {
            internet_gateway+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          internet_gateway+:
            {
              '#': { help: '', name: 'internet_gateway' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withLoadBalancerArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLoadBalancerArn(value): {
            load_balancer_arn: value,
          },
          '#withLoadBalancerListenerPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withLoadBalancerListenerPort(value): {
            load_balancer_listener_port: value,
          },
          '#withLoadBalancerTargetGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLoadBalancerTargetGroup(value): {
            load_balancer_target_group:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLoadBalancerTargetGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLoadBalancerTargetGroupMixin(value): {
            load_balancer_target_group+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          load_balancer_target_group+:
            {
              '#': { help: '', name: 'load_balancer_target_group' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withLoadBalancerTargetGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLoadBalancerTargetGroups(value): {
            load_balancer_target_groups:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withLoadBalancerTargetGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withLoadBalancerTargetGroupsMixin(value): {
            load_balancer_target_groups+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          load_balancer_target_groups+:
            {
              '#': { help: '', name: 'load_balancer_target_groups' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withLoadBalancerTargetPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withLoadBalancerTargetPort(value): {
            load_balancer_target_port: value,
          },
          '#withMissingComponent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withMissingComponent(value): {
            missing_component: value,
          },
          '#withNatGateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNatGateway(value): {
            nat_gateway:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNatGatewayMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNatGatewayMixin(value): {
            nat_gateway+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          nat_gateway+:
            {
              '#': { help: '', name: 'nat_gateway' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withNetworkInterface': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkInterface(value): {
            network_interface:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withNetworkInterfaceMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withNetworkInterfaceMixin(value): {
            network_interface+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          network_interface+:
            {
              '#': { help: '', name: 'network_interface' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withPacketField': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPacketField(value): {
            packet_field: value,
          },
          '#withPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withPort(value): {
            port: value,
          },
          '#withPortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPortRanges(value): {
            port_ranges:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPortRangesMixin(value): {
            port_ranges+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          port_ranges+:
            {
              '#': { help: '', name: 'port_ranges' },
              '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withFrom(value): {
                from: value,
              },
              '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withTo(value): {
                to: value,
              },
            },
          '#withPrefixList': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPrefixList(value): {
            prefix_list:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withPrefixListMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withPrefixListMixin(value): {
            prefix_list+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          prefix_list+:
            {
              '#': { help: '', name: 'prefix_list' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withProtocols': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProtocols(value): {
            protocols:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withProtocolsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withProtocolsMixin(value): {
            protocols+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRouteTable': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTable(value): {
            route_table:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRouteTableMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTableMixin(value): {
            route_table+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          route_table+:
            {
              '#': { help: '', name: 'route_table' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withRouteTableRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTableRoute(value): {
            route_table_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRouteTableRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTableRouteMixin(value): {
            route_table_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          route_table_route+:
            {
              '#': { help: '', name: 'route_table_route' },
              '#withDestinationCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationCidr(value): {
                destination_cidr: value,
              },
              '#withDestinationPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationPrefixListId(value): {
                destination_prefix_list_id: value,
              },
              '#withEgressOnlyInternetGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEgressOnlyInternetGatewayId(value): {
                egress_only_internet_gateway_id: value,
              },
              '#withGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGatewayId(value): {
                gateway_id: value,
              },
              '#withInstanceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInstanceId(value): {
                instance_id: value,
              },
              '#withNatGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNatGatewayId(value): {
                nat_gateway_id: value,
              },
              '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNetworkInterfaceId(value): {
                network_interface_id: value,
              },
              '#withOrigin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOrigin(value): {
                origin: value,
              },
              '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTransitGatewayId(value): {
                transit_gateway_id: value,
              },
              '#withVpcPeeringConnectionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcPeeringConnectionId(value): {
                vpc_peering_connection_id: value,
              },
            },
          '#withSecurityGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroup(value): {
            security_group:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupMixin(value): {
            security_group+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          security_group+:
            {
              '#': { help: '', name: 'security_group' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withSecurityGroupRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupRule(value): {
            security_group_rule:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupRuleMixin(value): {
            security_group_rule+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          security_group_rule+:
            {
              '#': { help: '', name: 'security_group_rule' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
              '#withDirection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDirection(value): {
                direction: value,
              },
              '#withPortRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRange(value): {
                port_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRangeMixin(value): {
                port_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_range+:
                {
                  '#': { help: '', name: 'port_range' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefixListId(value): {
                prefix_list_id: value,
              },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withSecurityGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecurityGroupId(value): {
                security_group_id: value,
              },
            },
          '#withSecurityGroups': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroups(value): {
            security_groups:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupsMixin(value): {
            security_groups+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          security_groups+:
            {
              '#': { help: '', name: 'security_groups' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withSourceVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceVpc(value): {
            source_vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSourceVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceVpcMixin(value): {
            source_vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          source_vpc+:
            {
              '#': { help: '', name: 'source_vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withState(value): {
            state: value,
          },
          '#withSubnet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnet(value): {
            subnet:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetMixin(value): {
            subnet+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          subnet+:
            {
              '#': { help: '', name: 'subnet' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withSubnetRouteTable': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetRouteTable(value): {
            subnet_route_table:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetRouteTableMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetRouteTableMixin(value): {
            subnet_route_table+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          subnet_route_table+:
            {
              '#': { help: '', name: 'subnet_route_table' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGateway(value): {
            transit_gateway:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayMixin(value): {
            transit_gateway+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway+:
            {
              '#': { help: '', name: 'transit_gateway' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGatewayAttachment': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayAttachment(value): {
            transit_gateway_attachment:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayAttachmentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayAttachmentMixin(value): {
            transit_gateway_attachment+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway_attachment+:
            {
              '#': { help: '', name: 'transit_gateway_attachment' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGatewayRouteTable': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTable(value): {
            transit_gateway_route_table:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayRouteTableMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTableMixin(value): {
            transit_gateway_route_table+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway_route_table+:
            {
              '#': { help: '', name: 'transit_gateway_route_table' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGatewayRouteTableRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTableRoute(value): {
            transit_gateway_route_table_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayRouteTableRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTableRouteMixin(value): {
            transit_gateway_route_table_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway_route_table_route+:
            {
              '#': { help: '', name: 'transit_gateway_route_table_route' },
              '#withAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttachmentId(value): {
                attachment_id: value,
              },
              '#withDestinationCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationCidr(value): {
                destination_cidr: value,
              },
              '#withPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefixListId(value): {
                prefix_list_id: value,
              },
              '#withResourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceId(value): {
                resource_id: value,
              },
              '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceType(value): {
                resource_type: value,
              },
              '#withRouteOrigin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRouteOrigin(value): {
                route_origin: value,
              },
              '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withState(value): {
                state: value,
              },
            },
          '#withVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpc(value): {
            vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcMixin(value): {
            vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpc+:
            {
              '#': { help: '', name: 'vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withVpcEndpoint': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcEndpoint(value): {
            vpc_endpoint:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcEndpointMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcEndpointMixin(value): {
            vpc_endpoint+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpc_endpoint+:
            {
              '#': { help: '', name: 'vpc_endpoint' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withVpcPeeringConnection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcPeeringConnection(value): {
            vpc_peering_connection:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcPeeringConnectionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcPeeringConnectionMixin(value): {
            vpc_peering_connection+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpc_peering_connection+:
            {
              '#': { help: '', name: 'vpc_peering_connection' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withVpnConnection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpnConnection(value): {
            vpn_connection:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpnConnectionMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpnConnectionMixin(value): {
            vpn_connection+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpn_connection+:
            {
              '#': { help: '', name: 'vpn_connection' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withVpnGateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpnGateway(value): {
            vpn_gateway:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpnGatewayMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpnGatewayMixin(value): {
            vpn_gateway+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpn_gateway+:
            {
              '#': { help: '', name: 'vpn_gateway' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
        },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withFilterInArns': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterInArns(value): {
        filter_in_arns:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterInArnsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterInArnsMixin(value): {
        filter_in_arns+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withForwardPathComponents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withForwardPathComponents(value): {
        forward_path_components:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withForwardPathComponentsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withForwardPathComponentsMixin(value): {
        forward_path_components+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      forward_path_components+:
        {
          '#': { help: '', name: 'forward_path_components' },
          '#withAclRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAclRule(value): {
            acl_rule:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAclRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAclRuleMixin(value): {
            acl_rule+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          acl_rule+:
            {
              '#': { help: '', name: 'acl_rule' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
              '#withEgress': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEgress(value=true): {
                egress: value,
              },
              '#withPortRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRange(value): {
                port_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRangeMixin(value): {
                port_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_range+:
                {
                  '#': { help: '', name: 'port_range' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withRuleAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRuleAction(value): {
                rule_action: value,
              },
              '#withRuleNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withRuleNumber(value): {
                rule_number: value,
              },
            },
          '#withAdditionalDetails': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdditionalDetails(value): {
            additional_details:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAdditionalDetailsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdditionalDetailsMixin(value): {
            additional_details+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          additional_details+:
            {
              '#': { help: '', name: 'additional_details' },
              '#withAdditionalDetailType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAdditionalDetailType(value): {
                additional_detail_type: value,
              },
              '#withComponent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withComponent(value): {
                component:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withComponentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withComponentMixin(value): {
                component+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              component+:
                {
                  '#': { help: '', name: 'component' },
                  '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withArn(value): {
                    arn: value,
                  },
                  '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withId(value): {
                    id: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                },
            },
          '#withAttachedTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAttachedTo(value): {
            attached_to:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAttachedToMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAttachedToMixin(value): {
            attached_to+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          attached_to+:
            {
              '#': { help: '', name: 'attached_to' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withComponent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComponent(value): {
            component:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withComponentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComponentMixin(value): {
            component+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          component+:
            {
              '#': { help: '', name: 'component' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withDestinationVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationVpc(value): {
            destination_vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDestinationVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationVpcMixin(value): {
            destination_vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          destination_vpc+:
            {
              '#': { help: '', name: 'destination_vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withInboundHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInboundHeader(value): {
            inbound_header:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInboundHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInboundHeaderMixin(value): {
            inbound_header+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          inbound_header+:
            {
              '#': { help: '', name: 'inbound_header' },
              '#withDestinationAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddresses(value): {
                destination_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddressesMixin(value): {
                destination_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRanges(value): {
                destination_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRangesMixin(value): {
                destination_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              destination_port_ranges+:
                {
                  '#': { help: '', name: 'destination_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withSourceAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddresses(value): {
                source_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddressesMixin(value): {
                source_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRanges(value): {
                source_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRangesMixin(value): {
                source_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_port_ranges+:
                {
                  '#': { help: '', name: 'source_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
            },
          '#withOutboundHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutboundHeader(value): {
            outbound_header:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withOutboundHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutboundHeaderMixin(value): {
            outbound_header+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          outbound_header+:
            {
              '#': { help: '', name: 'outbound_header' },
              '#withDestinationAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddresses(value): {
                destination_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddressesMixin(value): {
                destination_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRanges(value): {
                destination_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRangesMixin(value): {
                destination_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              destination_port_ranges+:
                {
                  '#': { help: '', name: 'destination_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withSourceAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddresses(value): {
                source_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddressesMixin(value): {
                source_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRanges(value): {
                source_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRangesMixin(value): {
                source_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_port_ranges+:
                {
                  '#': { help: '', name: 'source_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
            },
          '#withRouteTableRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTableRoute(value): {
            route_table_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRouteTableRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTableRouteMixin(value): {
            route_table_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          route_table_route+:
            {
              '#': { help: '', name: 'route_table_route' },
              '#withDestinationCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationCidr(value): {
                destination_cidr: value,
              },
              '#withDestinationPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationPrefixListId(value): {
                destination_prefix_list_id: value,
              },
              '#withEgressOnlyInternetGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEgressOnlyInternetGatewayId(value): {
                egress_only_internet_gateway_id: value,
              },
              '#withGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGatewayId(value): {
                gateway_id: value,
              },
              '#withInstanceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInstanceId(value): {
                instance_id: value,
              },
              '#withNatGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNatGatewayId(value): {
                nat_gateway_id: value,
              },
              '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNetworkInterfaceId(value): {
                network_interface_id: value,
              },
              '#withOrigin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOrigin(value): {
                origin: value,
              },
              '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTransitGatewayId(value): {
                transit_gateway_id: value,
              },
              '#withVpcPeeringConnectionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcPeeringConnectionId(value): {
                vpc_peering_connection_id: value,
              },
            },
          '#withSecurityGroupRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupRule(value): {
            security_group_rule:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupRuleMixin(value): {
            security_group_rule+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          security_group_rule+:
            {
              '#': { help: '', name: 'security_group_rule' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
              '#withDirection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDirection(value): {
                direction: value,
              },
              '#withPortRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRange(value): {
                port_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRangeMixin(value): {
                port_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_range+:
                {
                  '#': { help: '', name: 'port_range' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefixListId(value): {
                prefix_list_id: value,
              },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withSecurityGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecurityGroupId(value): {
                security_group_id: value,
              },
            },
          '#withSequenceNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSequenceNumber(value): {
            sequence_number: value,
          },
          '#withSourceVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceVpc(value): {
            source_vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSourceVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceVpcMixin(value): {
            source_vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          source_vpc+:
            {
              '#': { help: '', name: 'source_vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withSubnet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnet(value): {
            subnet:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetMixin(value): {
            subnet+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          subnet+:
            {
              '#': { help: '', name: 'subnet' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGateway(value): {
            transit_gateway:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayMixin(value): {
            transit_gateway+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway+:
            {
              '#': { help: '', name: 'transit_gateway' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGatewayRouteTableRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTableRoute(value): {
            transit_gateway_route_table_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayRouteTableRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTableRouteMixin(value): {
            transit_gateway_route_table_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway_route_table_route+:
            {
              '#': { help: '', name: 'transit_gateway_route_table_route' },
              '#withAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttachmentId(value): {
                attachment_id: value,
              },
              '#withDestinationCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationCidr(value): {
                destination_cidr: value,
              },
              '#withPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefixListId(value): {
                prefix_list_id: value,
              },
              '#withResourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceId(value): {
                resource_id: value,
              },
              '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceType(value): {
                resource_type: value,
              },
              '#withRouteOrigin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRouteOrigin(value): {
                route_origin: value,
              },
              '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withState(value): {
                state: value,
              },
            },
          '#withVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpc(value): {
            vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcMixin(value): {
            vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpc+:
            {
              '#': { help: '', name: 'vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withNetworkInsightsAnalysisId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkInsightsAnalysisId(value): {
        network_insights_analysis_id: value,
      },
      '#withNetworkInsightsPathId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkInsightsPathId(value): {
        network_insights_path_id: value,
      },
      '#withPathFound': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withPathFound(value=true): {
        path_found: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withReturnPathComponents': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReturnPathComponents(value): {
        return_path_components:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withReturnPathComponentsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withReturnPathComponentsMixin(value): {
        return_path_components+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      return_path_components+:
        {
          '#': { help: '', name: 'return_path_components' },
          '#withAclRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAclRule(value): {
            acl_rule:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAclRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAclRuleMixin(value): {
            acl_rule+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          acl_rule+:
            {
              '#': { help: '', name: 'acl_rule' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
              '#withEgress': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
              withEgress(value=true): {
                egress: value,
              },
              '#withPortRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRange(value): {
                port_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRangeMixin(value): {
                port_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_range+:
                {
                  '#': { help: '', name: 'port_range' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withRuleAction': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRuleAction(value): {
                rule_action: value,
              },
              '#withRuleNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
              withRuleNumber(value): {
                rule_number: value,
              },
            },
          '#withAdditionalDetails': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdditionalDetails(value): {
            additional_details:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAdditionalDetailsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAdditionalDetailsMixin(value): {
            additional_details+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          additional_details+:
            {
              '#': { help: '', name: 'additional_details' },
              '#withAdditionalDetailType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAdditionalDetailType(value): {
                additional_detail_type: value,
              },
              '#withComponent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withComponent(value): {
                component:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withComponentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withComponentMixin(value): {
                component+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              component+:
                {
                  '#': { help: '', name: 'component' },
                  '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withArn(value): {
                    arn: value,
                  },
                  '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withId(value): {
                    id: value,
                  },
                  '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
                  withName(value): {
                    name: value,
                  },
                },
            },
          '#withAttachedTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAttachedTo(value): {
            attached_to:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withAttachedToMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withAttachedToMixin(value): {
            attached_to+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          attached_to+:
            {
              '#': { help: '', name: 'attached_to' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withComponent': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComponent(value): {
            component:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withComponentMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withComponentMixin(value): {
            component+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          component+:
            {
              '#': { help: '', name: 'component' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withDestinationVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationVpc(value): {
            destination_vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withDestinationVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withDestinationVpcMixin(value): {
            destination_vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          destination_vpc+:
            {
              '#': { help: '', name: 'destination_vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withInboundHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInboundHeader(value): {
            inbound_header:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withInboundHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withInboundHeaderMixin(value): {
            inbound_header+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          inbound_header+:
            {
              '#': { help: '', name: 'inbound_header' },
              '#withDestinationAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddresses(value): {
                destination_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddressesMixin(value): {
                destination_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRanges(value): {
                destination_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRangesMixin(value): {
                destination_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              destination_port_ranges+:
                {
                  '#': { help: '', name: 'destination_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withSourceAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddresses(value): {
                source_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddressesMixin(value): {
                source_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRanges(value): {
                source_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRangesMixin(value): {
                source_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_port_ranges+:
                {
                  '#': { help: '', name: 'source_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
            },
          '#withOutboundHeader': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutboundHeader(value): {
            outbound_header:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withOutboundHeaderMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withOutboundHeaderMixin(value): {
            outbound_header+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          outbound_header+:
            {
              '#': { help: '', name: 'outbound_header' },
              '#withDestinationAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddresses(value): {
                destination_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationAddressesMixin(value): {
                destination_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRanges(value): {
                destination_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withDestinationPortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withDestinationPortRangesMixin(value): {
                destination_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              destination_port_ranges+:
                {
                  '#': { help: '', name: 'destination_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withSourceAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddresses(value): {
                source_addresses:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourceAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourceAddressesMixin(value): {
                source_addresses+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRanges(value): {
                source_port_ranges:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withSourcePortRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withSourcePortRangesMixin(value): {
                source_port_ranges+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              source_port_ranges+:
                {
                  '#': { help: '', name: 'source_port_ranges' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
            },
          '#withRouteTableRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTableRoute(value): {
            route_table_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withRouteTableRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withRouteTableRouteMixin(value): {
            route_table_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          route_table_route+:
            {
              '#': { help: '', name: 'route_table_route' },
              '#withDestinationCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationCidr(value): {
                destination_cidr: value,
              },
              '#withDestinationPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationPrefixListId(value): {
                destination_prefix_list_id: value,
              },
              '#withEgressOnlyInternetGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withEgressOnlyInternetGatewayId(value): {
                egress_only_internet_gateway_id: value,
              },
              '#withGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withGatewayId(value): {
                gateway_id: value,
              },
              '#withInstanceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withInstanceId(value): {
                instance_id: value,
              },
              '#withNatGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNatGatewayId(value): {
                nat_gateway_id: value,
              },
              '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withNetworkInterfaceId(value): {
                network_interface_id: value,
              },
              '#withOrigin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withOrigin(value): {
                origin: value,
              },
              '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withTransitGatewayId(value): {
                transit_gateway_id: value,
              },
              '#withVpcPeeringConnectionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withVpcPeeringConnectionId(value): {
                vpc_peering_connection_id: value,
              },
            },
          '#withSecurityGroupRule': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupRule(value): {
            security_group_rule:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSecurityGroupRuleMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSecurityGroupRuleMixin(value): {
            security_group_rule+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          security_group_rule+:
            {
              '#': { help: '', name: 'security_group_rule' },
              '#withCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withCidr(value): {
                cidr: value,
              },
              '#withDirection': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDirection(value): {
                direction: value,
              },
              '#withPortRange': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRange(value): {
                port_range:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              '#withPortRangeMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
              withPortRangeMixin(value): {
                port_range+:
                  (if std.isArray(value)
                   then value
                   else [value]),
              },
              port_range+:
                {
                  '#': { help: '', name: 'port_range' },
                  '#withFrom': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withFrom(value): {
                    from: value,
                  },
                  '#withTo': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
                  withTo(value): {
                    to: value,
                  },
                },
              '#withPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefixListId(value): {
                prefix_list_id: value,
              },
              '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withProtocol(value): {
                protocol: value,
              },
              '#withSecurityGroupId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withSecurityGroupId(value): {
                security_group_id: value,
              },
            },
          '#withSequenceNumber': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withSequenceNumber(value): {
            sequence_number: value,
          },
          '#withSourceVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceVpc(value): {
            source_vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSourceVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSourceVpcMixin(value): {
            source_vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          source_vpc+:
            {
              '#': { help: '', name: 'source_vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withSubnet': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnet(value): {
            subnet:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withSubnetMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withSubnetMixin(value): {
            subnet+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          subnet+:
            {
              '#': { help: '', name: 'subnet' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGateway': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGateway(value): {
            transit_gateway:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayMixin(value): {
            transit_gateway+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway+:
            {
              '#': { help: '', name: 'transit_gateway' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
          '#withTransitGatewayRouteTableRoute': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTableRoute(value): {
            transit_gateway_route_table_route:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withTransitGatewayRouteTableRouteMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withTransitGatewayRouteTableRouteMixin(value): {
            transit_gateway_route_table_route+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          transit_gateway_route_table_route+:
            {
              '#': { help: '', name: 'transit_gateway_route_table_route' },
              '#withAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withAttachmentId(value): {
                attachment_id: value,
              },
              '#withDestinationCidr': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withDestinationCidr(value): {
                destination_cidr: value,
              },
              '#withPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withPrefixListId(value): {
                prefix_list_id: value,
              },
              '#withResourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceId(value): {
                resource_id: value,
              },
              '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withResourceType(value): {
                resource_type: value,
              },
              '#withRouteOrigin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withRouteOrigin(value): {
                route_origin: value,
              },
              '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withState(value): {
                state: value,
              },
            },
          '#withVpc': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpc(value): {
            vpc:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withVpcMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withVpcMixin(value): {
            vpc+:
              (if std.isArray(value)
               then value
               else [value]),
          },
          vpc+:
            {
              '#': { help: '', name: 'vpc' },
              '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withArn(value): {
                arn: value,
              },
              '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withId(value): {
                id: value,
              },
              '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
              withName(value): {
                name: value,
              },
            },
        },
      '#withStartDate': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStartDate(value): {
        start_date: value,
      },
      '#withStatus': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatus(value): {
        status: value,
      },
      '#withStatusMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStatusMessage(value): {
        status_message: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withWarningMessage': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withWarningMessage(value): {
        warning_message: value,
      },
    },
  aws_ec2_network_insights_path:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_network_insights_path+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDestination': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDestination(value): {
        destination: value,
      },
      '#withDestinationArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDestinationArn(value): {
        destination_arn: value,
      },
      '#withDestinationIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDestinationIp(value): {
        destination_ip: value,
      },
      '#withDestinationPort': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withDestinationPort(value): {
        destination_port: value,
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withNetworkInsightsPathId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkInsightsPathId(value): {
        network_insights_path_id: value,
      },
      '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProtocol(value): {
        protocol: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSource': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSource(value): {
        source: value,
      },
      '#withSourceArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSourceArn(value): {
        source_arn: value,
      },
      '#withSourceIp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSourceIp(value): {
        source_ip: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
  aws_ec2_public_ipv4_pool:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'pool_id', type: 'string' }], help: '' } },
      new(tf_resource_key, pool_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withPoolId(pool_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_public_ipv4_pool+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withNetworkBorderGroup': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withNetworkBorderGroup(value): {
        network_border_group: value,
      },
      '#withPoolAddressRanges': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolAddressRanges(value): {
        pool_address_ranges:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPoolAddressRangesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolAddressRangesMixin(value): {
        pool_address_ranges+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      pool_address_ranges+:
        {
          '#': { help: '', name: 'pool_address_ranges' },
          '#withAddressCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withAddressCount(value): {
            address_count: value,
          },
          '#withAvailableAddressCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
          withAvailableAddressCount(value): {
            available_address_count: value,
          },
          '#withFirstAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withFirstAddress(value): {
            first_address: value,
          },
          '#withLastAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withLastAddress(value): {
            last_address: value,
          },
        },
      '#withPoolId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPoolId(value): {
        pool_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTotalAddressCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalAddressCount(value): {
        total_address_count: value,
      },
      '#withTotalAvailableAddressCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withTotalAvailableAddressCount(value): {
        total_available_address_count: value,
      },
    },
  aws_ec2_public_ipv4_pools:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_public_ipv4_pools+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withPoolIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolIds(value): {
        pool_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPoolIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withPoolIdsMixin(value): {
        pool_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
    },
  aws_ec2_serial_console_access:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_serial_console_access+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withEnabled': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withEnabled(value=true): {
        enabled: value,
      },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_spot_price:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_spot_price+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAvailabilityZone': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAvailabilityZone(value): {
        availability_zone: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInstanceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withInstanceType(value): {
        instance_type: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSpotPrice': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSpotPrice(value): {
        spot_price: value,
      },
      '#withSpotPriceTimestamp': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSpotPriceTimestamp(value): {
        spot_price_timestamp: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_transit_gateway:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withAmazonSideAsn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withAmazonSideAsn(value): {
        amazon_side_asn: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAssociationDefaultRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAssociationDefaultRouteTableId(value): {
        association_default_route_table_id: value,
      },
      '#withAutoAcceptSharedAttachments': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAutoAcceptSharedAttachments(value): {
        auto_accept_shared_attachments: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultRouteTableAssociation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultRouteTableAssociation(value): {
        default_route_table_association: value,
      },
      '#withDefaultRouteTablePropagation': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDefaultRouteTablePropagation(value): {
        default_route_table_propagation: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDescription': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDescription(value): {
        description: value,
      },
      '#withDnsSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDnsSupport(value): {
        dns_support: value,
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withMulticastSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withMulticastSupport(value): {
        multicast_support: value,
      },
      '#withOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwnerId(value): {
        owner_id: value,
      },
      '#withPropagationDefaultRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPropagationDefaultRouteTableId(value): {
        propagation_default_route_table_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSecurityGroupReferencingSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSecurityGroupReferencingSupport(value): {
        security_group_referencing_support: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayCidrBlocks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTransitGatewayCidrBlocks(value): {
        transit_gateway_cidr_blocks:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTransitGatewayCidrBlocksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withTransitGatewayCidrBlocksMixin(value): {
        transit_gateway_cidr_blocks+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withVpnEcmpSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpnEcmpSupport(value): {
        vpn_ecmp_support: value,
      },
    },
  aws_ec2_transit_gateway_attachment:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_attachment+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAssociationState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAssociationState(value): {
        association_state: value,
      },
      '#withAssociationTransitGatewayRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAssociationTransitGatewayRouteTableId(value): {
        association_transit_gateway_route_table_id: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withResourceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceId(value): {
        resource_id: value,
      },
      '#withResourceOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceOwnerId(value): {
        resource_owner_id: value,
      },
      '#withResourceType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withResourceType(value): {
        resource_type: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTransitGatewayAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayAttachmentId(value): {
        transit_gateway_attachment_id: value,
      },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
      '#withTransitGatewayOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayOwnerId(value): {
        transit_gateway_owner_id: value,
      },
    },
  aws_ec2_transit_gateway_attachments:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_attachments+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_transit_gateway_connect:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_connect+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProtocol': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProtocol(value): {
        protocol: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayConnectId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayConnectId(value): {
        transit_gateway_connect_id: value,
      },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
      '#withTransportAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransportAttachmentId(value): {
        transport_attachment_id: value,
      },
    },
  aws_ec2_transit_gateway_connect_peer:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_connect_peer+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withBgpAsn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBgpAsn(value): {
        bgp_asn: value,
      },
      '#withBgpPeerAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withBgpPeerAddress(value): {
        bgp_peer_address: value,
      },
      '#withBgpTransitGatewayAddresses': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBgpTransitGatewayAddresses(value): {
        bgp_transit_gateway_addresses:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withBgpTransitGatewayAddressesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withBgpTransitGatewayAddressesMixin(value): {
        bgp_transit_gateway_addresses+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withInsideCidrBlocks': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInsideCidrBlocks(value): {
        inside_cidr_blocks:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withInsideCidrBlocksMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withInsideCidrBlocksMixin(value): {
        inside_cidr_blocks+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withPeerAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPeerAddress(value): {
        peer_address: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayAddress(value): {
        transit_gateway_address: value,
      },
      '#withTransitGatewayAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayAttachmentId(value): {
        transit_gateway_attachment_id: value,
      },
      '#withTransitGatewayConnectPeerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayConnectPeerId(value): {
        transit_gateway_connect_peer_id: value,
      },
    },
  aws_ec2_transit_gateway_dx_gateway_attachment:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_dx_gateway_attachment+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDxGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDxGatewayId(value): {
        dx_gateway_id: value,
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
    },
  aws_ec2_transit_gateway_multicast_domain:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_multicast_domain+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withAssociations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAssociations(value): {
        associations:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withAssociationsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withAssociationsMixin(value): {
        associations+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      associations+:
        {
          '#': { help: '', name: 'associations' },
          '#withSubnetId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withSubnetId(value): {
            subnet_id: value,
          },
          '#withTransitGatewayAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTransitGatewayAttachmentId(value): {
            transit_gateway_attachment_id: value,
          },
        },
      '#withAutoAcceptSharedAssociations': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withAutoAcceptSharedAssociations(value): {
        auto_accept_shared_associations: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIgmpv2Support': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIgmpv2Support(value): {
        igmpv2_support: value,
      },
      '#withMembers': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembers(value): {
        members:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withMembersMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withMembersMixin(value): {
        members+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      members+:
        {
          '#': { help: '', name: 'members' },
          '#withGroupIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGroupIpAddress(value): {
            group_ip_address: value,
          },
          '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNetworkInterfaceId(value): {
            network_interface_id: value,
          },
        },
      '#withOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withOwnerId(value): {
        owner_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSources': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSources(value): {
        sources:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSourcesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSourcesMixin(value): {
        sources+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      sources+:
        {
          '#': { help: '', name: 'sources' },
          '#withGroupIpAddress': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withGroupIpAddress(value): {
            group_ip_address: value,
          },
          '#withNetworkInterfaceId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withNetworkInterfaceId(value): {
            network_interface_id: value,
          },
        },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withStaticSourcesSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withStaticSourcesSupport(value): {
        static_sources_support: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayAttachmentId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayAttachmentId(value): {
        transit_gateway_attachment_id: value,
      },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
      '#withTransitGatewayMulticastDomainId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayMulticastDomainId(value): {
        transit_gateway_multicast_domain_id: value,
      },
    },
  aws_ec2_transit_gateway_peering_attachment:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_peering_attachment+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withPeerAccountId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPeerAccountId(value): {
        peer_account_id: value,
      },
      '#withPeerRegion': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPeerRegion(value): {
        peer_region: value,
      },
      '#withPeerTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withPeerTransitGatewayId(value): {
        peer_transit_gateway_id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withState(value): {
        state: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
    },
  aws_ec2_transit_gateway_peering_attachments:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_peering_attachments+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_transit_gateway_route_table:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_route_table+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDefaultAssociationRouteTable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDefaultAssociationRouteTable(value=true): {
        default_association_route_table: value,
      },
      '#withDefaultPropagationRouteTable': { 'function': { args: [{ default: true, enums: null, name: 'value', type: ['boolean'] }], help: '' } },
      withDefaultPropagationRouteTable(value=true): {
        default_propagation_route_table: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
    },
  aws_ec2_transit_gateway_route_table_associations:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'transit_gateway_route_table_id', type: 'string' }], help: '' } },
      new(tf_resource_key, transit_gateway_route_table_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withTransitGatewayRouteTableId(transit_gateway_route_table_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_route_table_associations+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayRouteTableId(value): {
        transit_gateway_route_table_id: value,
      },
    },
  aws_ec2_transit_gateway_route_table_propagations:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'transit_gateway_route_table_id', type: 'string' }], help: '' } },
      new(tf_resource_key, transit_gateway_route_table_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withTransitGatewayRouteTableId(transit_gateway_route_table_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_route_table_propagations+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayRouteTableId(value): {
        transit_gateway_route_table_id: value,
      },
    },
  aws_ec2_transit_gateway_route_table_routes:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }, { default: null, enums: null, name: 'filter', type: 'array' }, { default: null, enums: null, name: 'transit_gateway_route_table_id', type: 'string' }], help: '' } },
      new(tf_resource_key, filter, transit_gateway_route_table_id):
        self.withTfResourceKey(tf_resource_key)
        + self.withFilter(filter)
        + self.withTransitGatewayRouteTableId(transit_gateway_route_table_id),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_route_table_routes+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withRoutes': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRoutes(value): {
        routes:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withRoutesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withRoutesMixin(value): {
        routes+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      routes+:
        {
          '#': { help: '', name: 'routes' },
          '#withDestinationCidrBlock': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withDestinationCidrBlock(value): {
            destination_cidr_block: value,
          },
          '#withPrefixListId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withPrefixListId(value): {
            prefix_list_id: value,
          },
          '#withState': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withState(value): {
            state: value,
          },
          '#withTransitGatewayRouteTableAnnouncementId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withTransitGatewayRouteTableAnnouncementId(value): {
            transit_gateway_route_table_announcement_id: value,
          },
          '#withType': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withType(value): {
            type: value,
          },
        },
      '#withTransitGatewayRouteTableId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayRouteTableId(value): {
        transit_gateway_route_table_id: value,
      },
    },
  aws_ec2_transit_gateway_route_tables:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_route_tables+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_transit_gateway_vpc_attachment:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_vpc_attachment+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withApplianceModeSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withApplianceModeSupport(value): {
        appliance_mode_support: value,
      },
      '#withArn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withArn(value): {
        arn: value,
      },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDnsSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withDnsSupport(value): {
        dns_support: value,
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIpv6Support': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withIpv6Support(value): {
        ipv6_support: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withSecurityGroupReferencingSupport': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withSecurityGroupReferencingSupport(value): {
        security_group_referencing_support: value,
      },
      '#withSubnetIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIds(value): {
        subnet_ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withSubnetIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withSubnetIdsMixin(value): {
        subnet_ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
      '#withVpcId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcId(value): {
        vpc_id: value,
      },
      '#withVpcOwnerId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpcOwnerId(value): {
        vpc_owner_id: value,
      },
    },
  aws_ec2_transit_gateway_vpc_attachments:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_vpc_attachments+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withIds': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIds(value): {
        ids:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withIdsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withIdsMixin(value): {
        ids+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
    },
  aws_ec2_transit_gateway_vpn_attachment:
    {
      '#new': { 'function': { args: [{ default: null, enums: null, name: 'tf_resource_key', type: 'string' }], help: '' } },
      new(tf_resource_key):
        self.withTfResourceKey(tf_resource_key),
      withTfResourceKey(tf_resource_key):
        {
          local this = self,
          _manifest():: {
            data+: {
              aws_ec2_transit_gateway_vpn_attachment+: {
                [tf_resource_key]: this,
              },
            },
          },
        },
      '#withCount': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['number'] }], help: '' } },
      withCount(value): {
        count: value,
      },
      '#withDependsOn': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOn(value): {
        depends_on:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withDependsOnMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withDependsOnMixin(value): {
        depends_on+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilter': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilter(value): {
        filter:
          (if std.isArray(value)
           then value
           else [value]),
      },
      '#withFilterMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
      withFilterMixin(value): {
        filter+:
          (if std.isArray(value)
           then value
           else [value]),
      },
      filter+:
        {
          '#': { help: '', name: 'filter' },
          '#withName': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withName(value): {
            name: value,
          },
          '#withValues': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValues(value): {
            values:
              (if std.isArray(value)
               then value
               else [value]),
          },
          '#withValuesMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['array'] }], help: '' } },
          withValuesMixin(value): {
            values+:
              (if std.isArray(value)
               then value
               else [value]),
          },
        },
      '#withId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withId(value): {
        id: value,
      },
      '#withProvider': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withProvider(value): {
        provider: value,
      },
      '#withTags': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTags(value): {
        tags: value,
      },
      '#withTagsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTagsMixin(value): {
        tags+: value,
      },
      '#withTimeouts': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeouts(value): {
        timeouts: value,
      },
      '#withTimeoutsMixin': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['object'] }], help: '' } },
      withTimeoutsMixin(value): {
        timeouts+: value,
      },
      timeouts+:
        {
          '#withRead': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
          withRead(value): {
            timeouts+: {
              read: value,
            },
          },
        },
      '#withTransitGatewayId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withTransitGatewayId(value): {
        transit_gateway_id: value,
      },
      '#withVpnConnectionId': { 'function': { args: [{ default: null, enums: null, name: 'value', type: ['string'] }], help: '' } },
      withVpnConnectionId(value): {
        vpn_connection_id: value,
      },
    },
}
